const _logger = require('../../logger/winston').logger;
const db = require('../../database/postgresql_db');
const { Sequelize, QueryTypes } = require('sequelize');
const { success } = require("../../model/responseModel");
const requestIp = require('request-ip');
const DeviceDetector = require('node-device-detector');
const detector = new DeviceDetector({ clientIndexes: true, deviceIndexes: true, deviceAliasCode: false, });
var validator = require('validator');
const { apiStatus } = require('../../constants/apiStatus');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const redisDB = require('../../database/redis_cache_db');
var dateFormat = require('date-format');
const commonModule = require('../../modules/commonModule');
const registrationModule = require('../../modules/registrationModule');
const utils = require('../../utilities/utils');
const constants = require('../../constants/constants');
const fs = require('fs');
const entityDataModule = require('../../modules/entityDataModule');
const fetchApigee = require('../../apigee/fetchApigee');
const cloudStorageModule = require('../../modules/cloudStorageModule');
const billDeskModule = require('../../modules/billDeskModule');
const { entityMenuItems } = require('../../constants/entityMenuItems');
const { apiEntityMsgs } = require('../../constants/apiEntityMsgs');
const { validationTypes } = require('../../constants/validationTypes');
const { default: fetch } = require('cross-fetch');
const update_profile_success_msg = `Profile updated successfully and sent for approval.`;
const crypto = require('crypto');
const jws = require('jws');
const emailModule = require('../../modules/emailModule');
const paymentService = require('./paymentService');

/***********************************************************/

const profile_validation_data = async (user_id) => {
    const _query1 = `SELECT u.entity_id, a.reg_id, a.user_id, u.form_static_fields_json, a.is_admin
    FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id
    WHERE a.user_id = ? AND a.is_deleted = false AND u.is_deleted = false`;
    const row1 = await db.sequelize.query(_query1, { replacements: [user_id], type: QueryTypes.SELECT });
    if (row1 && row1.length > 0) {
        return row1[0];
    }
    return null;
};



const designations_except_other_users = async (entity_id, reg_id, user_id) => {
    var designations = [];
    const _query1 = `SELECT d.design_id, d.design_name, d.design_code 
    FROM designation_mast d INNER JOIN designation_mapp m ON d.design_id = m.design_id
    WHERE m.entity_id = :entity_id AND d.is_enabled = true AND d.is_deleted = false AND d.design_id NOT IN (
        SELECT COALESCE(a.design_id, 0) FROM user_account a WHERE a.reg_id = :reg_id AND a.user_id <> :user_id AND a.is_deleted = false
    )`;
    const row1 = await db.sequelize.query(_query1, {
        replacements: {
            entity_id: entity_id,
            reg_id: reg_id,
            user_id: user_id,
        }, type: QueryTypes.SELECT
    });
    for (let i = 0; row1 && i < row1.length; i++) {
        designations.push({
            design_id: row1[i].design_id,
            design_name: row1[i].design_name,
            design_code: row1[i].design_code,
        });
    }
    return designations;
};

const hasDuplicate = (arrayObj, colName) => {
    var hash = Object.create(null);
    return arrayObj.some((arr) => {
        return arr[colName] && (hash[arr[colName]] || !(hash[arr[colName]] = true));
    });
};

const delete_uploaded_files = (req) => {
    if (req.files && req.files.length > 0) {
        for (let i = 0; i < req.files.length; i++) {
            try {
                fs.unlinkSync(req.files[i].path);
            } catch (err) {
                try { _logger.error(err.stack); } catch (_) { }
            }
        }
    }
};

const delete_file_by_path = (path) => {
    try {
        fs.unlinkSync(path);
    } catch (err) {
        try { _logger.error(err.stack); } catch (_) { }
    }
};

/*******************************************************************************************/

const countries = async (req, res, next) => {
    const { } = req.body;
    try {
        const list = await commonModule.country_dropdown();
        return res.status(200).json(success(true, res.statusCode, "", list));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const states = async (req, res, next) => {
    const { country_id } = req.body;
    try {
        var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
        const states = await commonModule.state_dropdown(_country_id);
        return res.status(200).json(success(true, res.statusCode, "", states));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const districts = async (req, res, next) => {
    const { state_id } = req.body;
    try {
        var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
        const districts = await commonModule.district_dropdown(_state_id);
        return res.status(200).json(success(true, res.statusCode, "", districts));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const blocks = async (req, res, next) => {
    const { district_id } = req.body;
    try {
        var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
        const blocks = await commonModule.block_dropdown(_district_id);
        return res.status(200).json(success(true, res.statusCode, "", blocks));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const ifsc_code_search = async (req, res, next) => {
    const { ifsc_code } = req.body;
    try {
        const _ifsc_code = (ifsc_code && ifsc_code.length > 0) ? ifsc_code.trim().toUpperCase() : "";
        const results = await commonModule.ifsc_code_search(_ifsc_code);
        return res.status(200).json(success(true, res.statusCode, "", results));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const check_ifsc_code = async (req, res, next) => {
    const { ifsc_code } = req.body;
    try {
        const _ifsc_code = (ifsc_code && ifsc_code.length > 0) ? ifsc_code.trim().toUpperCase() : "";

        if (!_ifsc_code || _ifsc_code.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, "Please enter IFSC code.", null));
        }
        if (!utils.is_ifsc_code(_ifsc_code)) {
            return res.status(200).json(success(false, res.statusCode, "Please enter correct IFSC code.", null));
        }
        const ifsc_result = await fetchApigee.validate_ifsc_code(_ifsc_code);
        var is_ifsc_valid = ifsc_result.status;
        var ifsc_error_msg = ifsc_result.msg;
        var ifsc_response = ifsc_result.data;
        if (is_ifsc_valid) {
            var bank_other = ''; var branch_other = '';
            try {
                const tempJson = JSON.parse(ifsc_response);
                bank_other = tempJson.bank;
                branch_other = tempJson.branch;
            } catch (_) {
            }
            const ifscOutResult = {
                ifsc: _ifsc_code,
                bank: bank_other,
                branch: branch_other,
            };
            return res.status(200).json(success(true, res.statusCode, "IFSC code verified successfully.", ifscOutResult));
        } else {
            return res.status(200).json(success(false, res.statusCode, (ifsc_error_msg.length > 0 ? ifsc_error_msg : 'IFSC code verification failed.'), null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

const logout = async (req, res, next) => {
    try {
        const auth_key = req.token_data.auth_key;
        const _query1 = `update user_token set is_logout = ?, logout_time = ? where unique_id = ?`;
        await db.sequelize.query(_query1, { replacements: [true, new Date(), auth_key], type: QueryTypes.UPDATE });
        if (parseInt(process.env.REDIS_ENABLED) > 0) {
            await redisDB.del(auth_key);
        }
        return res.status(200).json(success(true, res.statusCode, "Logout successfully.", null));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const dashboard = async (req, res, next) => {
    const { } = req.body;
    try {

        return res.status(200).json(success(true, res.statusCode, "Success", null));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const password = async (req, res, next) => {
    const { old_pass, new_pass } = req.body;
    try {
        const user_id = req.token_data.user_id;

        const _old_pass = (old_pass && old_pass.length > 0) ? old_pass : "";
        const _new_pass = (new_pass && new_pass.length > 0) ? new_pass : "";

        if (_old_pass.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, "Please enter old password.", null));
        }
        if (_new_pass.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, "Please enter new password.", null));
        }
        if (_new_pass.length < 8) {
            return res.status(200).json(success(false, res.statusCode, "The new password must contain atleast 8 characters.", null));
        }
        const hasNumber = /\d/;
        if (!hasNumber.test(_new_pass)) {
            return res.status(200).json(success(false, res.statusCode, "The new password must contain a number.", null));
        }
        const specialChars = /[`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
        if (!specialChars.test(_new_pass)) {
            return res.status(200).json(success(false, res.statusCode, "The new password must contain a special character.", null));
        }
        const _query2 = `SELECT login_pass FROM user_account WHERE user_id = ?`;
        const row2 = await db.sequelize.query(_query2, { replacements: [user_id], type: QueryTypes.SELECT });
        if (row2 && row2.length > 0) {
            const isValidPass = await bcrypt.compare(_old_pass, row2[0].login_pass);
            if (!isValidPass) {
                return res.status(200).json(success(false, res.statusCode, "Invalid old password, Please enter correct password.", null));
            }

            var password_hash = await bcrypt.hash(_new_pass, 10);

            const _query4 = `UPDATE user_account SET login_pass = ? WHERE user_id = ?`;
            const _replacements2 = [password_hash, user_id];

            const [, i] = await db.sequelize.query(_query4, { replacements: _replacements2, type: QueryTypes.UPDATE });
            if (i > 0) {
                return res.status(200).json(success(true, res.statusCode, "Password changed successfully.", null));
            } else {
                return res.status(200).json(success(false, res.statusCode, "Unable to update password, Please try again", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, "Unable to find profile detail, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

const profile_data = async (req, res, next) => {
    const { } = req.body;
    try {
        const user_id = req.token_data.user_id;

        const _query1 = `SELECT u.entity_id, a.reg_id, a.user_id, u.form_static_fields_json, a.is_admin,
       
        a.first_name AS a_first_name, a.middle_name AS a_middle_name, a.last_name AS a_last_name, a.email_id AS a_email_id, a.mobile_ccc AS a_mobile_ccc, a.mobile_no AS a_mobile_no, 
        a.design_id AS a_design_id, d.design_name AS a_design_name, a.pan_no AS a_pan_no, a.pa_address1 AS a_pa_address1, a.pa_address2 AS a_pa_address2, 
        a.pa_address3 AS a_pa_address3, a.pa_country_id AS a_pa_country_id, a.pa_state_id AS a_pa_state_id, a.pa_district_id AS a_pa_district_id, 
        a.pa_block_id AS a_pa_block_id, a.pa_pin_code AS a_pa_pin_code, a.ca_same_pa AS a_ca_same_pa, a.ca_address1 AS a_ca_address1, a.ca_address2 AS a_ca_address2,
        a.ca_address3 AS a_ca_address3, a.ca_country_id AS a_ca_country_id, a.ca_state_id AS a_ca_state_id, a.ca_district_id AS a_ca_district_id, 
        a.ca_block_id AS a_ca_block_id, a.ca_pin_code AS a_ca_pin_code, a.sign_file_name, a.sign_new_name, a.sign_gcp_data, a.sign_gcp_path, a.addr_file_name,
        a.addr_new_name, a.addr_gcp_data, a.addr_gcp_path, a.idn_file_name, a.idn_new_name, a.idn_gcp_data, a.idn_gcp_path,

        u.first_name AS u_first_name, u.middle_name AS u_middle_name, u.last_name AS u_last_name, u.email_id AS u_email_id, u.mobile_ccc AS u_mobile_ccc, u.mobile_no AS u_mobile_no, u.pan_no AS u_pan_no,
        u.company_name AS u_company_name, u.registered_as_id AS u_registered_as_id, u.org_type_id AS u_org_type_id, u.parent_org_id AS u_parent_org_id, u.address_1 AS u_address_1, 
        u.address_2 AS u_address_2, u.address_3 AS u_address_3, u.country_id AS u_country_id, u.state_id AS u_state_id, u.district_id AS u_district_id, u.block_id AS u_block_id, 
        u.pin_code AS u_pin_code, u.contact_no AS u_contact_no, u.company_pan_no AS u_company_pan_no, u.gstin_no AS u_gstin_no, u.cin_no AS u_cin_no, 
        u.registration_no AS u_registration_no, u.it_80g_reg_no AS u_it_80g_reg_no, u.it_12a_reg_no AS u_it_12a_reg_no, u.darpan_reg_no AS u_darpan_reg_no, 
        u.mca_csr_f1_reg_no AS u_mca_csr_f1_reg_no, u.fcra_no_with_status AS u_fcra_no_with_status, u.fcra_no_status AS u_fcra_no_status, 
        u.fin_audit_rpt_filed AS u_fin_audit_rpt_filed,
        COALESCE((SELECT tmp.company_name FROM user_master tmp WHERE tmp.reg_id = COALESCE(u.parent_org_id, 0)), '') AS u_parent_org_name,
        u.brief_csr_policy

        FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id LEFT OUTER JOIN designation_mast d ON a.design_id = d.design_id
        WHERE a.user_id = ? AND a.is_deleted = false AND u.is_deleted = false`;
        const row1 = await db.sequelize.query(_query1, { replacements: [user_id], type: QueryTypes.SELECT });
        if (row1 && row1.length > 0) {
            const form_static_fields = await entityDataModule.profile_validation_field(row1[0].entity_id, row1[0].form_static_fields_json);

            const is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;


            //#region Check if approval pending

            var _modify_id = 0; var _is_profile_locked = false; var _mod_initiator_user = false; var _mod_company_basic = false; var _mod_company_address = false;
            var _mod_enrolment_identification = false; var _mod_enrolment_document = false; var _mod_enrolment_banks = false; var _mod_admin_basic = false; var _mod_admin_perm_addr = false;
            var _mod_admin_curr_addr = false; var _mod_admin_document = false; var _mod_board_member = false; var _mod_csr_company = false; var _mod_csr_committee = false;

            const _queryCheckMod = `SELECT modify_id, mod_initiator_user, mod_company_basic, mod_company_address, mod_enrolment_identification, mod_enrolment_document, 
            mod_enrolment_banks, mod_admin_basic, mod_admin_perm_addr, mod_admin_curr_addr, mod_admin_document, mod_board_member, mod_csr_company, 
            mod_csr_committee FROM modify_master WHERE reg_id = ? AND COALESCE(request_status, 0) = 0`;
            const rowCheckMod = await db.sequelize.query(_queryCheckMod, { replacements: [row1[0].reg_id], type: QueryTypes.SELECT });
            if (rowCheckMod && rowCheckMod.length > 0) {
                _modify_id = rowCheckMod[0].modify_id != null && validator.isNumeric(rowCheckMod[0].modify_id.toString()) ? BigInt(rowCheckMod[0].modify_id) : 0;
                _mod_initiator_user = (rowCheckMod[0].mod_initiator_user ? rowCheckMod[0].mod_initiator_user : false);
                _mod_company_basic = (rowCheckMod[0].mod_company_basic ? rowCheckMod[0].mod_company_basic : false);
                _mod_company_address = (rowCheckMod[0].mod_company_address ? rowCheckMod[0].mod_company_address : false);
                _mod_enrolment_identification = (rowCheckMod[0].mod_enrolment_identification ? rowCheckMod[0].mod_enrolment_identification : false);
                _mod_enrolment_document = (rowCheckMod[0].mod_enrolment_document ? rowCheckMod[0].mod_enrolment_document : false);
                _mod_enrolment_banks = (rowCheckMod[0].mod_enrolment_banks ? rowCheckMod[0].mod_enrolment_banks : false);
                _mod_admin_basic = (rowCheckMod[0].mod_admin_basic ? rowCheckMod[0].mod_admin_basic : false);
                _mod_admin_perm_addr = (rowCheckMod[0].mod_admin_perm_addr ? rowCheckMod[0].mod_admin_perm_addr : false);
                _mod_admin_curr_addr = (rowCheckMod[0].mod_admin_curr_addr ? rowCheckMod[0].mod_admin_curr_addr : false);
                _mod_admin_document = (rowCheckMod[0].mod_admin_document ? rowCheckMod[0].mod_admin_document : false);
                _mod_board_member = (rowCheckMod[0].mod_board_member ? rowCheckMod[0].mod_board_member : false);
                _mod_csr_company = (rowCheckMod[0].mod_csr_company ? rowCheckMod[0].mod_csr_company : false);
                _mod_csr_committee = (rowCheckMod[0].mod_csr_committee ? rowCheckMod[0].mod_csr_committee : false);
            }
            _is_profile_locked = (_mod_initiator_user || _mod_company_basic || _mod_company_address || _mod_enrolment_identification || _mod_enrolment_document || _mod_enrolment_banks ||
                _mod_admin_basic || _mod_admin_perm_addr || _mod_admin_curr_addr || _mod_admin_document || _mod_board_member || _mod_csr_company || _mod_csr_committee);
            var modData = null;
            if (_modify_id > 0) {
                const _queryModDataMst = `SELECT mm.request_date, mm.first_name, mm.middle_name, mm.last_name, mm.pan_no, 
                mm.company_name, mm.registered_as_id, mm.org_type_id, mm.parent_org_id, mm.address_1, mm.address_2, mm.address_3, mm.country_id, mm.state_id, mm.district_id, mm.block_id, mm.pin_code, mm.contact_no, 
                mm.company_pan_no, mm.gstin_no, mm.cin_no, mm.registration_no, mm.it_80g_reg_no, mm.it_12a_reg_no, mm.darpan_reg_no, mm.mca_csr_f1_reg_no, mm.fcra_no_with_status, mm.fcra_no_status, mm.fin_audit_rpt_filed, mm.brief_csr_policy,
                mm.acc_first_name, mm.acc_middle_name, mm.acc_last_name, mm.acc_design_id, mm.acc_pan_no, mm.acc_pa_address1, mm.acc_pa_address2, mm.acc_pa_address3, mm.acc_pa_country_id, mm.acc_pa_state_id, mm.acc_pa_district_id, mm.acc_pa_block_id,
                mm.acc_pa_pin_code, mm.acc_ca_same_pa, mm.acc_ca_address1, mm.acc_ca_address2, mm.acc_ca_address3, mm.acc_ca_country_id, mm.acc_ca_state_id, mm.acc_ca_district_id, mm.acc_ca_block_id, mm.acc_ca_pin_code,
                COALESCE((SELECT tmp.company_name FROM user_master tmp WHERE tmp.reg_id = COALESCE(mm.parent_org_id, 0) LIMIT 1), '') AS parent_org_name,
                COALESCE((SELECT tmp.design_name FROM designation_mast tmp WHERE tmp.design_id = COALESCE(mm.acc_design_id, 0) LIMIT 1), '') AS acc_design_name
                FROM modify_master mm WHERE mm.modify_id = ?`;
                const rowModDataMst = await db.sequelize.query(_queryModDataMst, { replacements: [_modify_id], type: QueryTypes.SELECT });
                if (rowModDataMst && rowModDataMst.length > 0) {
                    modData = rowModDataMst[0];
                }
            }
            //#endregion
            var profile_locked_msg = "";
            if (_modify_id > 0) {
                profile_locked_msg = `Your profile change request raised on ${dateFormat(constants.textbox_date_api_format, modData.request_date)} at ${dateFormat('hh:mm', modData.request_date)} Hrs is pending for Protean Admin approval.`
            }
            var designations = await designations_except_other_users(row1[0].entity_id, row1[0].reg_id, row1[0].user_id);
            var json_countries = JSON.stringify(await commonModule.country_dropdown());

            //#region Registration Details

            const registered_as_list = await registrationModule.registration_type(row1[0].entity_id);
            const org_type_list = await registrationModule.parent_organization(row1[0].entity_id);
            const expertise_area_list = await registrationModule.expertise_area(row1[0].entity_id);
            const document_list = await registrationModule.documents(row1[0].entity_id);
            const services_list = await registrationModule.services_data(row1[0].entity_id, form_static_fields.tab_services.visible);

            const u_country_id = (_mod_company_address && modData != null ?
                ((modData.country_id != null && validator.isNumeric(modData.country_id.toString())) ? BigInt(modData.country_id) : 0) :
                ((row1[0].u_country_id != null && validator.isNumeric(row1[0].u_country_id.toString())) ? BigInt(row1[0].u_country_id) : 0));
            const u_state_id = (_mod_company_address && modData != null ?
                ((modData.state_id != null && validator.isNumeric(modData.state_id.toString())) ? BigInt(modData.state_id) : 0) :
                ((row1[0].u_state_id != null && validator.isNumeric(row1[0].u_state_id.toString())) ? BigInt(row1[0].u_state_id) : 0));
            const u_district_id = (_mod_company_address && modData != null ?
                ((modData.district_id != null && validator.isNumeric(modData.district_id.toString())) ? BigInt(modData.district_id) : 0) :
                ((row1[0].u_district_id != null && validator.isNumeric(row1[0].u_district_id.toString())) ? BigInt(row1[0].u_district_id) : 0));
            const u_block_id = (_mod_company_address && modData != null ?
                ((modData.block_id != null && validator.isNumeric(modData.block_id.toString())) ? BigInt(modData.block_id) : 0) :
                ((row1[0].u_block_id != null && validator.isNumeric(row1[0].u_block_id.toString())) ? BigInt(row1[0].u_block_id) : 0));

            var u_country_list = JSON.parse(json_countries);
            var u_def_country_id = 0;
            if (u_country_id > 0) {
                u_def_country_id = u_country_id;
                for (let i = 0; u_country_list && i < u_country_list.length; i++) {
                    if (u_country_list[i].is_default && u_country_list[i].is_default == true) {
                        u_country_list[i].is_default = false;
                    }
                    if (u_country_list[i].country_id.toString() == u_country_id.toString()) {
                        u_country_list[i].is_default = true;
                    }
                }
            } else {
                for (let i = 0; u_country_list && i < u_country_list.length; i++) {
                    if ((u_country_list[i].is_default && u_country_list[i].is_default == true)) {
                        u_def_country_id = u_country_list[i].country_id;
                        break;
                    }
                }
            }
            var u_state_list = [];
            if (u_def_country_id && u_def_country_id > 0) {
                u_state_list = await commonModule.state_dropdown(u_def_country_id);
            }
            var u_def_state_id = 0;
            for (let i = 0; u_state_list && i < u_state_list.length; i++) {
                if (u_state_list[i].state_id.toString() == u_state_id.toString()) {
                    u_def_state_id = u_state_id; break;
                }
            }
            var u_district_list = [];
            if (u_def_state_id && u_def_state_id > 0) {
                u_district_list = await commonModule.district_dropdown(u_def_state_id);
            }
            var u_def_district_id = 0;
            for (let i = 0; u_district_list && i < u_district_list.length; i++) {
                if (u_district_list[i].district_id.toString() == u_district_id.toString()) {
                    u_def_district_id = u_district_id; break;
                }
            }
            var u_block_list = [];
            if (u_def_district_id && u_def_district_id > 0) {
                u_block_list = await commonModule.block_dropdown(u_def_district_id);
            }

            var expertise_area_ids = [];
            if (_mod_enrolment_identification) {
                const _query2 = `SELECT expertise_area_id FROM modify_expertise WHERE modify_id = ?`;
                const row2 = await db.sequelize.query(_query2, { replacements: [_modify_id], type: QueryTypes.SELECT });
                for (let i = 0; row2 && i < row2.length; i++) {
                    const _ax = row2[i].expertise_area_id != null && validator.isNumeric(row2[i].expertise_area_id.toString()) ? BigInt(row2[i].expertise_area_id) : 0;
                    if (_ax > 0) {
                        expertise_area_ids.push(_ax);
                    }
                }
            } else {
                expertise_area_ids = await entityDataModule.expertise_areas(row1[0].reg_id);
            }

            var services_selected = [];
            if (_mod_enrolment_identification) {
                services_selected = await entityDataModule.modified_services(_modify_id);
            } else {
                services_selected = await entityDataModule.services(row1[0].reg_id);
            }

            var document_uploaded = [];
            if (_mod_enrolment_document) {
                const tmpModDocUp = await entityDataModule.modified_entity_document_uploaded(_modify_id);
                for (let i = 0; tmpModDocUp && i < tmpModDocUp.length; i++) {
                    if (!tmpModDocUp[i].to_delete) {
                        document_uploaded.push({
                            file_id: 0,
                            document_id: tmpModDocUp[i].document_id,
                            file_name: tmpModDocUp[i].file_name,
                            new_name: tmpModDocUp[i].new_name,
                            file_path: tmpModDocUp[i].file_path,
                        });
                    }
                }
                const tmpEntDocs = await entityDataModule.entity_document_uploaded(row1[0].reg_id);

                for (let aq = 0; tmpEntDocs && aq < tmpEntDocs.length; aq++) {
                    var to_delete = false;
                    for (let aw = 0; tmpModDocUp && aw < tmpModDocUp.length; aw++) {
                        if (tmpModDocUp[aw].document_id.toString() == tmpEntDocs[aq].document_id.toString()) {
                            to_delete = tmpModDocUp[aw].to_delete; break;
                        }
                    }
                    if (!to_delete) {
                        var _exists_in_new_up = false;
                        for (let aw = 0; document_uploaded && aw < document_uploaded.length; aw++) {
                            if (document_uploaded[aw].document_id.toString() == tmpEntDocs[aq].document_id.toString()) {
                                _exists_in_new_up = true; break;
                            }
                        }
                        if (!_exists_in_new_up) {
                            document_uploaded.push({
                                file_id: tmpEntDocs[aq].file_id,
                                document_id: tmpEntDocs[aq].document_id,
                                file_name: tmpEntDocs[aq].file_name,
                                new_name: tmpEntDocs[aq].new_name,
                                file_path: tmpEntDocs[aq].file_path,
                            });
                        }
                    }
                }
            } else {
                document_uploaded = await entityDataModule.entity_document_uploaded(row1[0].reg_id);
            }

            var bank_details = [];
            if (_mod_enrolment_banks) {
                bank_details = await entityDataModule.modified_bank_accounts(_modify_id);
            } else {
                bank_details = await entityDataModule.bank_accounts(row1[0].reg_id);
            }

            //#endregion

            // #region User Account

            const pa_country_id = (_mod_admin_perm_addr && modData != null ?
                ((modData.acc_pa_country_id != null && validator.isNumeric(modData.acc_pa_country_id.toString())) ? BigInt(modData.acc_pa_country_id) : 0) :
                ((row1[0].a_pa_country_id != null && validator.isNumeric(row1[0].a_pa_country_id.toString())) ? BigInt(row1[0].a_pa_country_id) : 0));
            const pa_state_id = (_mod_admin_perm_addr && modData != null ?
                ((modData.acc_pa_state_id != null && validator.isNumeric(modData.acc_pa_state_id.toString())) ? BigInt(modData.acc_pa_state_id) : 0) :
                ((row1[0].a_pa_state_id != null && validator.isNumeric(row1[0].a_pa_state_id.toString())) ? BigInt(row1[0].a_pa_state_id) : 0));
            const pa_district_id = (_mod_admin_perm_addr && modData != null ?
                ((modData.acc_pa_district_id != null && validator.isNumeric(modData.acc_pa_district_id.toString())) ? BigInt(modData.acc_pa_district_id) : 0) :
                ((row1[0].a_pa_district_id != null && validator.isNumeric(row1[0].a_pa_district_id.toString())) ? BigInt(row1[0].a_pa_district_id) : 0));
            const pa_block_id = (_mod_admin_perm_addr && modData != null ?
                ((modData.acc_pa_block_id != null && validator.isNumeric(modData.acc_pa_block_id.toString())) ? BigInt(modData.acc_pa_block_id) : 0) :
                ((row1[0].a_pa_block_id != null && validator.isNumeric(row1[0].a_pa_block_id.toString())) ? BigInt(row1[0].a_pa_block_id) : 0));

            var pa_def_country_id = 0; var pa_country_list = JSON.parse(json_countries);
            if (pa_country_id > 0) {
                pa_def_country_id = pa_country_id;
                for (let i = 0; pa_country_list && i < pa_country_list.length; i++) {
                    if (pa_country_list[i].is_default && pa_country_list[i].is_default == true) { pa_country_list[i].is_default = false; }
                    if (pa_country_list[i].country_id.toString() == pa_country_id.toString()) { pa_country_list[i].is_default = true; }
                }
            } else {
                for (let i = 0; pa_country_list && i < pa_country_list.length; i++) {
                    if ((pa_country_list[i].is_default && pa_country_list[i].is_default == true)) {
                        pa_def_country_id = pa_country_list[i].country_id; break;
                    }
                }
            }
            var pa_state_list = [];
            if (pa_def_country_id && pa_def_country_id > 0) {
                pa_state_list = await commonModule.state_dropdown(pa_def_country_id);
            }
            var pa_def_state_id = 0;
            for (let i = 0; pa_state_list && i < pa_state_list.length; i++) {
                if (pa_state_list[i].state_id.toString() == pa_state_id.toString()) {
                    pa_def_state_id = pa_state_id; break;
                }
            }
            var pa_district_list = [];
            if (pa_def_state_id && pa_def_state_id > 0) {
                pa_district_list = await commonModule.district_dropdown(pa_def_state_id);
            }
            var pa_def_district_id = 0;
            for (let i = 0; pa_district_list && i < pa_district_list.length; i++) {
                if (pa_district_list[i].district_id.toString() == pa_district_id.toString()) {
                    pa_def_district_id = pa_district_id; break;
                }
            }
            var pa_block_list = [];
            if (pa_def_district_id && pa_def_district_id > 0) {
                pa_block_list = await commonModule.block_dropdown(pa_def_district_id);
            }

            var acc_ca_same_pa = (_mod_admin_curr_addr && modData != null ? (modData.acc_ca_same_pa ? modData.acc_ca_same_pa : false) : (row1[0].a_ca_same_pa ? row1[0].a_ca_same_pa : false));

            const ca_country_id = (_mod_admin_curr_addr && modData != null ?
                ((modData.acc_ca_country_id != null && validator.isNumeric(modData.acc_ca_country_id.toString())) ? BigInt(modData.acc_ca_country_id) : 0) :
                ((row1[0].a_ca_country_id != null && validator.isNumeric(row1[0].a_ca_country_id.toString())) ? BigInt(row1[0].a_ca_country_id) : 0));
            const ca_state_id = (_mod_admin_curr_addr && modData != null ?
                ((modData.acc_ca_state_id != null && validator.isNumeric(modData.acc_ca_state_id.toString())) ? BigInt(modData.acc_ca_state_id) : 0) :
                ((row1[0].a_ca_state_id != null && validator.isNumeric(row1[0].a_ca_state_id.toString())) ? BigInt(row1[0].a_ca_state_id) : 0));
            const ca_district_id = (_mod_admin_curr_addr && modData != null ?
                ((modData.acc_ca_district_id != null && validator.isNumeric(modData.acc_ca_district_id.toString())) ? BigInt(modData.acc_ca_district_id) : 0) :
                ((row1[0].a_ca_district_id != null && validator.isNumeric(row1[0].a_ca_district_id.toString())) ? BigInt(row1[0].a_ca_district_id) : 0));
            const ca_block_id = (_mod_admin_curr_addr && modData != null ?
                ((modData.acc_ca_block_id != null && validator.isNumeric(modData.acc_ca_block_id.toString())) ? BigInt(modData.acc_ca_block_id) : 0) :
                ((row1[0].a_ca_block_id != null && validator.isNumeric(row1[0].a_ca_block_id.toString())) ? BigInt(row1[0].a_ca_block_id) : 0));
            var ca_def_country_id = 0; var ca_country_list = JSON.parse(json_countries);
            if (ca_country_id > 0) {
                ca_def_country_id = ca_country_id;
                for (let i = 0; ca_country_list && i < ca_country_list.length; i++) {
                    if (ca_country_list[i].is_default && ca_country_list[i].is_default == true) { ca_country_list[i].is_default = false; }
                    if (ca_country_list[i].country_id.toString() == ca_country_id.toString()) { ca_country_list[i].is_default = true; }
                }
            } else {
                for (let i = 0; ca_country_list && i < ca_country_list.length; i++) {
                    if ((ca_country_list[i].is_default && ca_country_list[i].is_default == true)) {
                        ca_def_country_id = ca_country_list[i].country_id; break;
                    }
                }
            }
            var ca_state_list = [];
            if (ca_def_country_id && ca_def_country_id > 0) {
                ca_state_list = await commonModule.state_dropdown(ca_def_country_id);
            }
            var ca_def_state_id = 0;
            for (let i = 0; ca_state_list && i < ca_state_list.length; i++) {
                if (ca_state_list[i].state_id.toString() == ca_state_id.toString()) {
                    ca_def_state_id = ca_state_id; break;
                }
            }
            var ca_district_list = [];
            if (ca_def_state_id && ca_def_state_id > 0) {
                ca_district_list = await commonModule.district_dropdown(ca_def_state_id);
            }
            var ca_def_district_id = 0;
            for (let i = 0; ca_district_list && i < ca_district_list.length; i++) {
                if (ca_district_list[i].district_id.toString() == ca_district_id.toString()) {
                    ca_def_district_id = ca_district_id; break;
                }
            }
            var ca_block_list = [];
            if (ca_def_district_id && ca_def_district_id > 0) {
                ca_block_list = await commonModule.block_dropdown(ca_def_district_id);
            }

            const user_docs_list = await registrationModule.user_acc_documents(row1[0].entity_id);

            var user_docs_uploaded = [];
            if (_mod_admin_document) {
                const tmpModAdmDocUp = await entityDataModule.modified_user_acc_document_uploaded(_modify_id);
                for (let i = 0; tmpModAdmDocUp && i < tmpModAdmDocUp.length; i++) {
                    if (!tmpModAdmDocUp[i].to_delete) {
                        user_docs_uploaded.push({
                            file_id: 0,
                            document_id: tmpModAdmDocUp[i].document_id,
                            file_name: tmpModAdmDocUp[i].file_name,
                            new_name: tmpModAdmDocUp[i].new_name,
                            file_path: tmpModAdmDocUp[i].file_path,
                        });
                    }
                }
                const tmpAdmDocs = await entityDataModule.user_acc_document_uploaded(user_id);
                for (let aq = 0; tmpAdmDocs && aq < tmpAdmDocs.length; aq++) {
                    var to_delete = false;
                    for (let aw = 0; tmpModAdmDocUp && aw < tmpModAdmDocUp.length; aw++) {
                        if (tmpModAdmDocUp[aw].document_id.toString() == tmpAdmDocs[aq].document_id.toString()) {
                            to_delete = tmpModAdmDocUp[aw].to_delete; break;
                        }
                    }
                    if (!to_delete) {
                        var _exists_in_new_up = false;
                        for (let aw = 0; user_docs_uploaded && aw < user_docs_uploaded.length; aw++) {
                            if (user_docs_uploaded[aw].document_id.toString() == tmpAdmDocs[aq].document_id.toString()) {
                                _exists_in_new_up = true; break;
                            }
                        }
                        if (!_exists_in_new_up) {
                            user_docs_uploaded.push({
                                file_id: tmpAdmDocs[aq].file_id,
                                document_id: tmpAdmDocs[aq].document_id,
                                file_name: tmpAdmDocs[aq].file_name,
                                new_name: tmpAdmDocs[aq].new_name,
                                file_path: tmpAdmDocs[aq].file_path,
                            });
                        }
                    }
                }
            } else {
                user_docs_uploaded = await entityDataModule.user_acc_document_uploaded(user_id);
            }

            // #endregion

            var board_members = [];
            if (_mod_board_member) {
                board_members = await entityDataModule.modified_board_members(_modify_id);
            } else {
                board_members = await entityDataModule.board_members(row1[0].reg_id);
            }

            var csr_members = [];
            if (_mod_csr_committee) {
                csr_members = await entityDataModule.modified_csr_committee_members(_modify_id);
            } else {
                csr_members = await entityDataModule.csr_committee_members(row1[0].reg_id);
            }

            const csr_policy_docs_list = await registrationModule.csr_policy_documents(row1[0].entity_id);

            var csr_policy_docs_uploaded = [];
            if (_mod_csr_company) {
                const tmpModCsrDocUp = await entityDataModule.modified_csr_docs_document_uploaded(_modify_id);
                for (let i = 0; tmpModCsrDocUp && i < tmpModCsrDocUp.length; i++) {
                    if (!tmpModCsrDocUp[i].to_delete) {
                        csr_policy_docs_uploaded.push({
                            file_id: 0,
                            document_id: tmpModCsrDocUp[i].document_id,
                            file_name: tmpModCsrDocUp[i].file_name,
                            new_name: tmpModCsrDocUp[i].new_name,
                            file_path: tmpModCsrDocUp[i].file_path,
                        });
                    }
                }
                const tmpCsrDocs = await entityDataModule.csr_docs_document_uploaded(row1[0].reg_id);
                for (let aq = 0; tmpCsrDocs && aq < tmpCsrDocs.length; aq++) {
                    var to_delete = false;
                    for (let aw = 0; tmpModCsrDocUp && aw < tmpModCsrDocUp.length; aw++) {
                        if (tmpModCsrDocUp[aw].document_id.toString() == tmpCsrDocs[aq].document_id.toString()) {
                            to_delete = tmpModCsrDocUp[aw].to_delete; break;
                        }
                    }
                    if (!to_delete) {
                        var _exists_in_new_up = false;
                        for (let aw = 0; csr_policy_docs_uploaded && aw < csr_policy_docs_uploaded.length; aw++) {
                            if (csr_policy_docs_uploaded[aw].document_id.toString() == tmpCsrDocs[aq].document_id.toString()) {
                                _exists_in_new_up = true; break;
                            }
                        }
                        if (!_exists_in_new_up) {
                            csr_policy_docs_uploaded.push({
                                file_id: tmpCsrDocs[aq].file_id,
                                document_id: tmpCsrDocs[aq].document_id,
                                file_name: tmpCsrDocs[aq].file_name,
                                new_name: tmpCsrDocs[aq].new_name,
                                file_path: tmpCsrDocs[aq].file_path,
                            });
                        }
                    }
                }
            } else {
                csr_policy_docs_uploaded = await entityDataModule.csr_docs_document_uploaded(row1[0].reg_id);
            }
            const mobile_ccc_list = await commonModule.country_calling_code();

            const results = {
                profile_static_fields: {
                    board_members: {
                        label: 'Board Members',
                        reg_type: false,
                        required: false,
                        visible: (row1[0].entity_id.toString() == '4' ? false : true),
                    },
                    csr_committee: {
                        label: 'CSR Committee',
                        reg_type: false,
                        required: false,
                        visible: (row1[0].entity_id.toString() == '4' ? false : true),
                    }
                },
                form_static_fields: form_static_fields,
                registration_details: {
                    first_name: (_mod_initiator_user && modData != null ? modData.first_name : row1[0].u_first_name),
                    middle_name: (_mod_initiator_user && modData != null ? modData.middle_name : row1[0].u_middle_name),
                    last_name: (_mod_initiator_user && modData != null ? modData.last_name : row1[0].u_last_name),
                    email_id: (row1[0].u_email_id ? row1[0].u_email_id : ""),
                    mobile_ccc: (row1[0].u_mobile_ccc ? row1[0].u_mobile_ccc : ""),
                    mobile_no: (row1[0].u_mobile_no ? row1[0].u_mobile_no : ""),
                    pan_no: (_mod_initiator_user && modData != null ? modData.pan_no : (row1[0].u_pan_no ? row1[0].u_pan_no : "")),

                    company_name: (_mod_company_basic && modData != null ? modData.company_name : (row1[0].u_company_name ? row1[0].u_company_name : "")),
                    registered_as_id: (_mod_company_basic && modData != null ?
                        ((modData.registered_as_id != null && validator.isNumeric(modData.registered_as_id.toString())) ? BigInt(modData.registered_as_id) : 0)
                        : ((row1[0].u_registered_as_id != null && validator.isNumeric(row1[0].u_registered_as_id.toString())) ? BigInt(row1[0].u_registered_as_id) : 0)),
                    registered_as_list: registered_as_list,
                    org_type_id: (_mod_company_basic && modData != null ?
                        ((modData.org_type_id != null && validator.isNumeric(modData.org_type_id.toString())) ? BigInt(modData.org_type_id) : 0) :
                        ((row1[0].u_org_type_id != null && validator.isNumeric(row1[0].u_org_type_id.toString())) ? BigInt(row1[0].u_org_type_id) : 0)),
                    org_type_list: org_type_list,
                    parent_org_id: (_mod_company_basic && modData != null ?
                        ((modData.parent_org_id != null && validator.isNumeric(modData.parent_org_id.toString())) ? BigInt(modData.parent_org_id) : 0) :
                        ((row1[0].u_parent_org_id != null && validator.isNumeric(row1[0].u_parent_org_id.toString())) ? BigInt(row1[0].u_parent_org_id) : 0)),
                    parent_org_name: (_mod_company_basic && modData != null ? modData.parent_org_name : (row1[0].u_parent_org_name ? row1[0].u_parent_org_name : "")),

                    address_1: (_mod_company_address && modData != null ? modData.address_1 : (row1[0].u_address_1 ? row1[0].u_address_1 : "")),
                    address_2: (_mod_company_address && modData != null ? modData.address_2 : (row1[0].u_address_2 ? row1[0].u_address_2 : "")),
                    address_3: (_mod_company_address && modData != null ? modData.address_3 : (row1[0].u_address_3 ? row1[0].u_address_3 : "")),
                    country_id: u_country_id,
                    country_list: u_country_list,
                    state_id: u_state_id,
                    state_list: u_state_list,
                    district_id: u_district_id,
                    district_list: u_district_list,
                    block_id: u_block_id,
                    block_list: u_block_list,
                    pin_code: (_mod_company_address && modData != null ? modData.pin_code : (row1[0].u_pin_code ? row1[0].u_pin_code : "")),
                    contact_no: (_mod_company_address && modData != null ? modData.contact_no : (row1[0].u_contact_no ? row1[0].u_contact_no : "")),

                    company_pan_no: (_mod_enrolment_identification && modData != null ? modData.company_pan_no : (row1[0].u_company_pan_no ? row1[0].u_company_pan_no : "")),
                    gstin_no: (_mod_enrolment_identification && modData != null ? modData.gstin_no : (row1[0].u_gstin_no ? row1[0].u_gstin_no : "")),
                    cin_no: (_mod_enrolment_identification && modData != null ? modData.cin_no : (row1[0].u_cin_no ? row1[0].u_cin_no : "")),
                    registration_no: (_mod_enrolment_identification && modData != null ? modData.registration_no : (row1[0].u_registration_no ? row1[0].u_registration_no : "")),
                    it_80g_reg_no: (_mod_enrolment_identification && modData != null ? modData.it_80g_reg_no : (row1[0].u_it_80g_reg_no ? row1[0].u_it_80g_reg_no : "")),
                    it_12a_reg_no: (_mod_enrolment_identification && modData != null ? modData.it_12a_reg_no : (row1[0].u_it_12a_reg_no ? row1[0].u_it_12a_reg_no : "")),
                    darpan_reg_no: (_mod_enrolment_identification && modData != null ? modData.darpan_reg_no : (row1[0].u_darpan_reg_no ? row1[0].u_darpan_reg_no : "")),
                    mca_csr_f1_reg_no: (_mod_enrolment_identification && modData != null ? modData.mca_csr_f1_reg_no : (row1[0].u_mca_csr_f1_reg_no ? row1[0].u_mca_csr_f1_reg_no : "")),
                    fcra_no_with_status: (_mod_enrolment_identification && modData != null ? modData.fcra_no_with_status : (row1[0].u_fcra_no_with_status ? row1[0].u_fcra_no_with_status : "")),
                    fcra_no_status: (_mod_enrolment_identification && modData != null ? (modData.fcra_no_status ? modData.fcra_no_status : false) : (row1[0].u_fcra_no_status ? row1[0].u_fcra_no_status : false)),
                    expertise_area_ids: expertise_area_ids,
                    expertise_area_list: expertise_area_list,
                    fin_audit_rpt_filed: (_mod_enrolment_identification && modData != null ? (modData.fin_audit_rpt_filed ? modData.fin_audit_rpt_filed : false) : (row1[0].u_fin_audit_rpt_filed ? row1[0].u_fin_audit_rpt_filed : false)),
                    services_selected: services_selected,
                    services_list: services_list,

                    document_uploaded: document_uploaded,
                    document_list: document_list,

                    bank_details: bank_details,

                    brief_csr_policy: (_mod_csr_company && modData != null ? modData.brief_csr_policy : (row1[0].brief_csr_policy ? row1[0].brief_csr_policy : "")),
                },
                admin_details: {
                    first_name: (_mod_admin_basic && modData != null ? modData.acc_first_name : (row1[0].a_first_name ? row1[0].a_first_name : "")),
                    middle_name: (_mod_admin_basic && modData != null ? modData.acc_middle_name : (row1[0].a_middle_name ? row1[0].a_middle_name : "")),
                    last_name: (_mod_admin_basic && modData != null ? modData.acc_last_name : (row1[0].a_last_name ? row1[0].a_last_name : "")),
                    email_id: (row1[0].a_email_id ? row1[0].a_email_id : ""),
                    mobile_ccc: (row1[0].a_mobile_ccc ? row1[0].a_mobile_ccc : ""),
                    mobile_no: (row1[0].a_mobile_no ? row1[0].a_mobile_no : ""),
                    design_id: (_mod_admin_basic && modData != null ?
                        ((modData.acc_design_id != null && validator.isNumeric(modData.acc_design_id.toString())) ? BigInt(modData.acc_design_id) : 0) :
                        ((row1[0].a_design_id != null && validator.isNumeric(row1[0].a_design_id.toString())) ? BigInt(row1[0].a_design_id) : 0)),
                    design_name: (_mod_admin_basic && modData != null ? modData.acc_design_name : (row1[0].a_design_name ? row1[0].a_design_name : "")),
                    designations: designations,
                    pan_no: (_mod_admin_basic && modData != null ? modData.acc_pan_no : (row1[0].a_pan_no ? row1[0].a_pan_no : "")),

                    pa_address1: (_mod_admin_perm_addr && modData != null ? modData.acc_pa_address1 : (row1[0].a_pa_address1 ? row1[0].a_pa_address1 : "")),
                    pa_address2: (_mod_admin_perm_addr && modData != null ? modData.acc_pa_address2 : (row1[0].a_pa_address2 ? row1[0].a_pa_address2 : "")),
                    pa_address3: (_mod_admin_perm_addr && modData != null ? modData.acc_pa_address3 : (row1[0].a_pa_address3 ? row1[0].a_pa_address3 : "")),
                    pa_country_id: pa_country_id,
                    pa_country_list: pa_country_list,
                    pa_state_id: pa_state_id,
                    pa_state_list: pa_state_list,
                    pa_district_id: pa_district_id,
                    pa_district_list: pa_district_list,
                    pa_block_id: pa_block_id,
                    pa_block_list: pa_block_list,
                    pa_pin_code: (_mod_admin_perm_addr && modData != null ? modData.acc_pa_pin_code : (row1[0].a_pa_pin_code ? row1[0].a_pa_pin_code : "")),

                    ca_same_pa: acc_ca_same_pa,
                    ca_address1: (_mod_admin_curr_addr && modData != null ? modData.acc_ca_address1 : (row1[0].a_ca_address1 ? row1[0].a_ca_address1 : "")),
                    ca_address2: (_mod_admin_curr_addr && modData != null ? modData.acc_ca_address2 : (row1[0].a_ca_address2 ? row1[0].a_ca_address2 : "")),
                    ca_address3: (_mod_admin_curr_addr && modData != null ? modData.acc_ca_address3 : (row1[0].a_ca_address3 ? row1[0].a_ca_address3 : "")),
                    ca_country_id: ca_country_id,
                    ca_country_list: ca_country_list,
                    ca_state_id: ca_state_id,
                    ca_state_list: ca_state_list,
                    ca_district_id: ca_district_id,
                    ca_district_list: ca_district_list,
                    ca_block_id: ca_block_id,
                    ca_block_list: ca_block_list,
                    ca_pin_code: (_mod_admin_curr_addr && modData != null ? modData.acc_ca_pin_code : (row1[0].a_ca_pin_code ? row1[0].a_ca_pin_code : "")),

                    user_docs_list: user_docs_list,
                    user_docs_uploaded: user_docs_uploaded,
                    /*sign_file_name: (row1[0].sign_file_name ? row1[0].sign_file_name : ""),
                    addr_file_name: (row1[0].addr_file_name ? row1[0].addr_file_name : ""),
                    idn_file_name: (row1[0].idn_file_name ? row1[0].idn_file_name : ""),*/
                },
                board_members: board_members,
                csr_policy_docs_list: csr_policy_docs_list,
                csr_policy_docs_uploaded: csr_policy_docs_uploaded,
                csr_members: csr_members,
                mobile_ccc_list: mobile_ccc_list,

                modified_section: {
                    is_profile_locked: _is_profile_locked,
                    profile_locked_msg: profile_locked_msg,
                    initiator_user: _mod_initiator_user,
                    company_basic: _mod_company_basic,
                    company_address: _mod_company_address,
                    enrolment_identification: _mod_enrolment_identification,
                    enrolment_document: _mod_enrolment_document,
                    enrolment_banks: _mod_enrolment_banks,
                    admin_basic: _mod_admin_basic,
                    admin_perm_addr: _mod_admin_perm_addr,
                    admin_curr_addr: _mod_admin_curr_addr,
                    admin_document: _mod_admin_document,
                    board_member: _mod_board_member,
                    csr_company: _mod_csr_company,
                    csr_committee: _mod_csr_committee,
                },
                modify_id: _modify_id,
                is_editable: (is_admin ? true : false),
                is_admin_account: is_admin,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_parent_entity = async (req, res, next) => {
    const { org_type_id, unique_id, company_name, pin_code } = req.body;
    try {
        var _org_type_id = org_type_id != null && validator.isNumeric(org_type_id.toString()) ? BigInt(org_type_id) : 0;
        const _unique_id = (unique_id && unique_id.length > 0) ? unique_id.trim() : "";
        const _company_name = (company_name && company_name.length > 0) ? company_name.trim() : "";
        const _pin_code = (pin_code && pin_code.length > 0) ? pin_code.trim() : "";
        const results = await commonModule.search_parent_entity(_org_type_id, _unique_id, _company_name, _pin_code);
        return res.status(200).json(success(true, res.statusCode, "Search result.", results));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const validate_initiator = async (req, res, next) => {
    const { first_name, middle_name, last_name, pan_no, } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const _first_name = (first_name && first_name.length > 0) ? first_name.trim() : "";
            if (form_static_fields.first_name.visible && form_static_fields.first_name.required) {
                if (_first_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter first name.", { tab: 1, }));
                }
            }
            if (_first_name.length > 0) {
                if (_first_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "First name should not be less than 2 characters.", { tab: 1, }));
                }
                if (_first_name.length > 30) {
                    return res.status(200).json(success(false, res.statusCode, "First name should not be more than 30 characters.", { tab: 1, }));
                }
            }
            const _middle_name = (middle_name && middle_name.length > 0) ? middle_name.trim() : "";
            if (form_static_fields.middle_name.visible && form_static_fields.middle_name.required) {
                if (_middle_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter middle name.", { tab: 1, }));
                }
            }
            if (_middle_name.length > 0) {
                if (_middle_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "Middle name should not be less than 2 characters.", { tab: 1, }));
                }
                if (_middle_name.length > 30) {
                    return res.status(200).json(success(false, res.statusCode, "Middle name should not be more than 30 characters.", { tab: 1, }));
                }
            }
            const _last_name = (last_name && last_name.length > 0) ? last_name.trim() : "";
            if (form_static_fields.last_name.visible && form_static_fields.last_name.required) {
                if (_last_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter last name.", { tab: 1, }));
                }
            }
            if (_last_name.length > 0) {
                if (_last_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "Last name should not be less than 2 characters.", { tab: 1, }));
                }
                if (_last_name.length > 30) {
                    return res.status(200).json(success(false, res.statusCode, "Last name should not be more than 30 characters.", { tab: 1, }));
                }
            }
            const _pan_no = (pan_no && pan_no.length > 0) ? pan_no.trim().toUpperCase() : "";
            if (form_static_fields.pan_no.visible) {
                if (_pan_no.length <= 0 && form_static_fields.pan_no.required) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter PAN number.", { tab: 1, }));
                }
            }
            if (_pan_no.length > 0) {
                if (!utils.is_pan_no(_pan_no)) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter correct PAN number.", { tab: 1, }));
                }
                const _query3 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.company_pan_no, '')) > 0 AND LOWER(u.company_pan_no) = LOWER(:pan_no)
                UNION ALL
                SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.pan_no, '')) > 0 AND LOWER(u.pan_no) = LOWER(:pan_no)`;
                const row3 = await db.sequelize.query(_query3, { replacements: { reg_id: entityData.reg_id, pan_no: _pan_no }, type: QueryTypes.SELECT });
                if (row3 && row3.length > 0) {
                    return res.status(200).json(success(false, res.statusCode, "PAN number is already registered.", { tab: 1, }));
                }
            }
            return res.status(200).json(success(true, res.statusCode, "Success.", null));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const validate_company = async (req, res, next) => {
    const {
        mod_company_basic, mod_company_address,
        company_name, registered_as_id, org_type_id, parent_org_id, address_1, address_2, address_3,
        country_id, state_id, district_id, block_id, pin_code, contact_no
    } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const _mod_company_basic = (mod_company_basic && mod_company_basic.toString().toLowerCase() == 'true') ? true : false;
            const _mod_company_address = (mod_company_address && mod_company_address.toString().toLowerCase() == 'true') ? true : false;

            var _company_name = ''; var _registered_as_id = 0; var _org_type_id = 0; var _parent_org_id = 0;
            if (_mod_company_basic) {
                _company_name = (company_name && company_name.length > 0) ? company_name.trim() : "";
                if (form_static_fields.company_name.visible) {
                    if (form_static_fields.company_name.required) {
                        if (_company_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter company name.", { tab: 2, }));
                        }
                    }
                }
                if (_company_name.length > 0) {
                    if (_company_name.length < 5) {
                        return res.status(200).json(success(false, res.statusCode, "Company name should not be less than 5 characters.", { tab: 2, }));
                    }
                    if (_company_name.length > 100) {
                        return res.status(200).json(success(false, res.statusCode, "Company name should not be more than 100 characters.", { tab: 2, }));
                    }
                }
                _registered_as_id = registered_as_id != null && validator.isNumeric(registered_as_id.toString()) ? BigInt(registered_as_id) : 0;
                if (form_static_fields.registered_as_id.visible) {
                    if (form_static_fields.registered_as_id.required) {
                        if (_registered_as_id <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select entity registered as.", { tab: 2, }));
                        }
                    }
                }
                if (_registered_as_id > 0) {
                    const reg_types_ = await registrationModule.registration_type(entityData.entity_id);
                    var _exists = false;
                    for (let p = 0; reg_types_ && p < reg_types_.length; p++) {
                        if (reg_types_[p].reg_type_id.toString() == _registered_as_id.toString()) {
                            _exists = true; break;
                        }
                    }
                    if (!_exists) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid entity registered as selected.", { tab: 2, }));
                    }
                }
                _org_type_id = org_type_id != null && validator.isNumeric(org_type_id.toString()) ? BigInt(org_type_id) : 0;
                if (form_static_fields.parent_orgnization.visible) {
                    if (form_static_fields.parent_orgnization.required) {
                        if (_org_type_id <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select parent organization.", { tab: 2, }));
                        }
                    }
                }
                if (_org_type_id > 0) {
                    const _query1014 = `SELECT m.parent_entity FROM parent_orgs_mast d INNER JOIN parent_orgs_mapp m ON d.org_type_id = m.org_type_id
                    WHERE d.org_type_id = ? AND d.is_enabled = true AND d.is_deleted = false`;
                    const row1014 = await db.sequelize.query(_query1014, { replacements: [_org_type_id], type: QueryTypes.SELECT });
                    if (row1014 && row1014.length > 0) {
                        const select_org_req = (row1014[0].parent_entity && row1014[0].parent_entity.length > 0 ? true : false);
                        if (select_org_req) {
                            _parent_org_id = parent_org_id != null && validator.isNumeric(parent_org_id.toString()) ? BigInt(parent_org_id) : 0;
                            if (_parent_org_id <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please search & select parent entity name.", { tab: 2, }));
                            }
                            const _query1015 = `SELECT u.entity_id FROM user_master u WHERE u.reg_id <> ? AND u.reg_id = ? AND u.is_enabled = true AND u.is_deleted = false AND u.approve_status = 1`;
                            const row1015 = await db.sequelize.query(_query1015, { replacements: [entityData.reg_id, _parent_org_id], type: QueryTypes.SELECT });
                            if (row1015 && row1015.length > 0) {
                                var _is_org_matched = false;
                                for (let opn = 0; row1014[0].parent_entity && opn < row1014[0].parent_entity.length; opn++) {
                                    if (row1014[0].parent_entity[opn].toString() == row1015[0].entity_id.toString()) {
                                        _is_org_matched = true; break;
                                    }
                                }
                                if (!_is_org_matched) {
                                    return res.status(200).json(success(false, res.statusCode, "Invalid parent entity name selected.", { tab: 2, }));
                                }
                            } else {
                                return res.status(200).json(success(false, res.statusCode, "Invalid parent entity name selected.", { tab: 2, }));
                            }
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, "Invalid parent organization selected.", { tab: 2, }));
                    }
                }
            }

            var _address_1 = ''; var _address_2 = ''; var _address_3 = ''; var _country_id = 0; var _state_id = 0;
            var _district_id = 0; var _block_id = 0; var _pin_code = ''; var _contact_no = '';
            if (_mod_company_address) {
                _address_1 = (address_1 && address_1.length > 0) ? address_1.trim() : "";
                if (form_static_fields.address_1.visible) {
                    if (_address_1.length <= 0 && form_static_fields.address_1.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company address.", { tab: 2, }));
                    }
                }
                _address_2 = (address_2 && address_2.length > 0) ? address_2.trim() : "";
                if (form_static_fields.address_2.visible) {
                    if (_address_2.length <= 0 && form_static_fields.address_2.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company address 2.", { tab: 2, }));
                    }
                }
                _address_3 = (address_3 && address_3.length > 0) ? address_3.trim() : "";
                if (form_static_fields.address_3.visible) {
                    if (_address_3.length <= 0 && form_static_fields.address_3.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company address 3.", { tab: 2, }));
                    }
                }
                _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
                if (form_static_fields.country_id.visible) {
                    if (_country_id <= 0 && form_static_fields.country_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select country.", { tab: 2, }));
                    }
                }
                _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
                if (form_static_fields.state_id.visible) {
                    if (_state_id <= 0 && form_static_fields.state_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select state/UT.", { tab: 2, }));
                    }
                }
                _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
                if (form_static_fields.district_id.visible) {
                    if (_district_id <= 0 && form_static_fields.district_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select district.", { tab: 2, }));
                    }
                }
                _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;
                if (form_static_fields.block_id.visible) {
                    if (form_static_fields.block_id.required) {
                        if (_block_id <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select block/taluka.", { tab: 2, }));
                        }
                    }
                }
                _pin_code = (pin_code && pin_code.length > 0) ? pin_code.trim() : "";
                if (form_static_fields.pin_code.visible) {
                    if (_pin_code.length <= 0 && form_static_fields.pin_code.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter pin code.", { tab: 2, }));
                    }
                }
                if (_pin_code.length > 0) {
                    if (!utils.is_pin_code(_pin_code)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct pin code.", { tab: 2, }));
                    }
                }
                _contact_no = (contact_no && contact_no.length > 0) ? contact_no.trim() : "";
                if (form_static_fields.contact_no.visible) {
                    if (_contact_no.length <= 0 && form_static_fields.contact_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter landline no. (with STD code).", { tab: 2, }));
                    }
                }
            }
            return res.status(200).json(success(true, res.statusCode, "Success.", null));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const validate_enrolment = async (req, res, next) => {
    const {
        mod_enrolment_identification, mod_enrolment_banks,
        company_pan_no, gstin_no, cin_no, registration_no, it_80g_reg_no, it_12a_reg_no, darpan_reg_no,
        mca_csr_f1_reg_no, fcra_no_with_status, fcra_no_status, expertise_area_ids, fin_audit_rpt_filed,
        services, bank_details
    } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const _mod_enrolment_identification = (mod_enrolment_identification && mod_enrolment_identification.toString().toLowerCase() == 'true') ? true : false;
            const _mod_enrolment_banks = (mod_enrolment_banks && mod_enrolment_banks.toString().toLowerCase() == 'true') ? true : false;

            var _company_pan_no = ''; var _gstin_no = ''; var _cin_no = ''; var _registration_no = ''; var _it_80g_reg_no = '';
            var _it_12a_reg_no = ''; var _darpan_reg_no = ''; var _mca_csr_f1_reg_no = ''; var _fcra_no_with_status = '';
            var _fcra_no_status = false; var _expertise_area_ids = []; var _fin_audit_rpt_filed = false; var _services = [];
            var company_pan_no_validated = false; var company_pan_no_valid_date = null; var company_pan_no_response = '';
            var gstin_no_validated = false; var gstin_no_valid_date = null; var gstin_no_response = '';
            var cin_no_validated = false; var cin_no_valid_date = null; var cin_no_response = '';
            if (_mod_enrolment_identification) {
                _company_pan_no = (company_pan_no && company_pan_no.length > 0) ? company_pan_no.trim().toUpperCase() : "";
                if (form_static_fields.company_pan_no.visible) {
                    if (_company_pan_no.length <= 0 && form_static_fields.company_pan_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company PAN number.", { tab: 3, }));
                    }
                }
                if (_company_pan_no.length > 0) {
                    if (!utils.is_pan_no(_company_pan_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct company PAN number.", { tab: 3, }));
                    }
                    const _query4 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.company_pan_no, '')) > 0 AND LOWER(u.company_pan_no) = LOWER(:company_pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.pan_no, '')) > 0 AND LOWER(u.pan_no) = LOWER(:company_pan_no)`;
                    const row4 = await db.sequelize.query(_query4, { replacements: { reg_id: entityData.reg_id, company_pan_no: _company_pan_no }, type: QueryTypes.SELECT });
                    if (row4 && row4.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Company PAN number is already registered.", { tab: 3, }));
                    }
                    /*const pan_result = await fetchApigee.validate_pan_card(_company_pan_no);
                    company_pan_no_validated = pan_result.status;
                    var company_pan_error_msg = pan_result.msg;
                    company_pan_no_response = pan_result.data;
                    company_pan_no_valid_date = new Date();
                    if (!company_pan_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (company_pan_error_msg.length > 0 ? company_pan_error_msg : 'Company PAN verification failed.'), { tab: 3, }));
                    }*/
                }
                _gstin_no = (gstin_no && gstin_no.length > 0) ? gstin_no.trim().toUpperCase() : "";
                if (form_static_fields.gstin_no.visible) {
                    if (_gstin_no.length <= 0 && form_static_fields.gstin_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter GSTIN number.", { tab: 3, }));
                    }
                }
                if (_gstin_no.length > 0) {
                    if (!utils.is_gstn_no(_gstin_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct GSTIN number.", { tab: 3, }));
                    }
                    const _query5 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.gstin_no, '')) > 0 AND LOWER(u.gstin_no) = LOWER(:gstin_no)`;
                    const row5 = await db.sequelize.query(_query5, { replacements: { reg_id: entityData.reg_id, gstin_no: _gstin_no }, type: QueryTypes.SELECT });
                    if (row5 && row5.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "GSTIN number is already registered.", { tab: 3, }));
                    }
                    /*const gstin_result = await fetchApigee.validate_gstin_no(_gstin_no);
                    gstin_no_validated = gstin_result.status;
                    var gstin_error_msg = gstin_result.msg;
                    gstin_no_response = gstin_result.data;
                    gstin_no_valid_date = new Date();
                    if (!gstin_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (gstin_error_msg.length > 0 ? gstin_error_msg : 'GSTIN number verification failed.'), { tab: 3, }));
                    }*/
                }
                _cin_no = (cin_no && cin_no.length > 0) ? cin_no.trim().toUpperCase() : "";
                if (form_static_fields.cin_no.visible) {
                    if (_cin_no.length <= 0 && form_static_fields.cin_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company identification number.", { tab: 3, }));
                    }
                }
                if (_cin_no.length > 0) {
                    if (!utils.is_cin_no(_cin_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct company identification number.", { tab: 3, }));
                    }
                    const _query6 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.cin_no, '')) > 0 AND LOWER(u.cin_no) = LOWER(:cin_no)`;
                    const row6 = await db.sequelize.query(_query6, { replacements: { reg_id: entityData.reg_id, cin_no: _cin_no }, type: QueryTypes.SELECT });
                    if (row6 && row6.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Company identification number is already registered.", { tab: 3, }));
                    }
                    /*const cin_result = await fetchApigee.validate_cin_no(_cin_no);
                    cin_no_validated = cin_result.status;
                    var cin_error_msg = cin_result.msg;
                    cin_no_response = cin_result.data;
                    cin_no_valid_date = new Date();
                    if (!cin_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (cin_error_msg.length > 0 ? cin_error_msg : 'Company identification number verification failed.'), { tab: 3, }));
                    }*/
                }
                _registration_no = (registration_no && registration_no.length > 0) ? registration_no.trim() : "";
                if (form_static_fields.registration_no.visible) {
                    if (form_static_fields.registration_no.required) {
                        if (_registration_no.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter registration number.", { tab: 3, }));
                        }
                    }
                }
                if (_registration_no.length > 0) {
                    const _query501 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.registration_no, '')) > 0 AND LOWER(u.registration_no) = LOWER(:registration_no)`;
                    const row501 = await db.sequelize.query(_query501, { replacements: { reg_id: entityData.reg_id, registration_no: _registration_no }, type: QueryTypes.SELECT });
                    if (row501 && row501.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Registration number is already registered.", { tab: 3, }));
                    }
                }
                _it_80g_reg_no = (it_80g_reg_no && it_80g_reg_no.length > 0) ? it_80g_reg_no.trim() : "";
                if (form_static_fields.it_80g_reg_no.visible) {
                    if (_it_80g_reg_no.length <= 0 && form_static_fields.it_80g_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter income tax 18G registration no.", { tab: 3, }));
                    }
                }
                if (_it_80g_reg_no.length > 0) {
                    const _query502 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.it_80g_reg_no, '')) > 0 AND LOWER(u.it_80g_reg_no) = LOWER(:it_80g_reg_no)`;
                    const row502 = await db.sequelize.query(_query502, { replacements: { reg_id: entityData.reg_id, it_80g_reg_no: _it_80g_reg_no }, type: QueryTypes.SELECT });
                    if (row502 && row502.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Income tax 18G registration no. is already registered.", { tab: 3, }));
                    }
                }
                _it_12a_reg_no = (it_12a_reg_no && it_12a_reg_no.length > 0) ? it_12a_reg_no.trim() : "";
                if (form_static_fields.it_12a_reg_no.visible) {
                    if (_it_12a_reg_no.length <= 0 && form_static_fields.it_12a_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter income tax 12A registration no.", { tab: 3, }));
                    }
                }
                if (_it_12a_reg_no.length > 0) {
                    const _query503 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.it_12a_reg_no, '')) > 0 AND LOWER(u.it_12a_reg_no) = LOWER(:it_12a_reg_no)`;
                    const row503 = await db.sequelize.query(_query503, { replacements: { reg_id: entityData.reg_id, it_12a_reg_no: _it_12a_reg_no }, type: QueryTypes.SELECT });
                    if (row503 && row503.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Income tax 12A registration no. is already registered.", { tab: 3, }));
                    }
                }
                _darpan_reg_no = (darpan_reg_no && darpan_reg_no.length > 0) ? darpan_reg_no.trim() : "";
                if (form_static_fields.darpan_reg_no.visible) {
                    if (_darpan_reg_no.length <= 0 && form_static_fields.darpan_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter NGO DARPAN registration no/id.", { tab: 3, }));
                    }
                }
                if (_darpan_reg_no.length > 0) {
                    const _query504 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.darpan_reg_no, '')) > 0 AND LOWER(u.darpan_reg_no) = LOWER(:darpan_reg_no)`;
                    const row504 = await db.sequelize.query(_query504, { replacements: { reg_id: entityData.reg_id, darpan_reg_no: _darpan_reg_no }, type: QueryTypes.SELECT });
                    if (row504 && row504.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "NGO DARPAN registration no/id is already registered.", { tab: 3, }));
                    }
                }
                _mca_csr_f1_reg_no = (mca_csr_f1_reg_no && mca_csr_f1_reg_no.length > 0) ? mca_csr_f1_reg_no.trim() : "";
                if (form_static_fields.mca_csr_f1_reg_no.visible) {
                    if (_mca_csr_f1_reg_no.length <= 0 && form_static_fields.mca_csr_f1_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter MCA CSR form 1 registration no.", { tab: 3, }));
                    }
                }
                if (_mca_csr_f1_reg_no.length > 0) {
                    const _query505 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.mca_csr_f1_reg_no, '')) > 0 AND LOWER(u.mca_csr_f1_reg_no) = LOWER(:mca_csr_f1_reg_no)`;
                    const row505 = await db.sequelize.query(_query505, { replacements: { reg_id: entityData.reg_id, mca_csr_f1_reg_no: _mca_csr_f1_reg_no }, type: QueryTypes.SELECT });
                    if (row505 && row505.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "MCA CSR form 1 registration no. is already registered.", { tab: 3, }));
                    }
                }
                _fcra_no_with_status = (fcra_no_with_status && fcra_no_with_status.length > 0) ? fcra_no_with_status.trim() : "";
                _fcra_no_status = (fcra_no_status && fcra_no_status.toString().toLowerCase() == 'true') ? true : false;

                if (form_static_fields.expertise_area_id.visible) {
                    if (expertise_area_ids && expertise_area_ids.length > 0) {
                        const expertise_area_ids_list = expertise_area_ids.split(',').join('|');
                        const expertise_area_ids_array = expertise_area_ids_list.split('|');
                        for (let ax = 0; expertise_area_ids_array && ax < expertise_area_ids_array.length; ax++) {
                            var _ax = expertise_area_ids_array[ax] != null && validator.isNumeric(expertise_area_ids_array[ax].toString()) ? BigInt(expertise_area_ids_array[ax]) : 0;
                            if (_ax > 0) {
                                _expertise_area_ids.push(_ax);
                            }
                        }
                    }
                    if (_expertise_area_ids.length <= 0 && form_static_fields.expertise_area_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select area of expertise.", { tab: 3, }));
                    }
                }
                if (_expertise_area_ids.length > 0) {
                    const expertise_areas_ = await registrationModule.expertise_area(entityData.entity_id);
                    for (let ti = 0; _expertise_area_ids && ti < _expertise_area_ids.length; ti++) {
                        var _exists = false;
                        for (let ii = 0; expertise_areas_ && ii < expertise_areas_.length; ii++) {
                            if (expertise_areas_[ii].expertise_area_id.toString() == _expertise_area_ids[ti].toString()) {
                                _exists = true; break;
                            }
                        }
                        if (!_exists) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid area of expertise selected.", { tab: 3, }));
                        }
                    }
                }
                _fin_audit_rpt_filed = (fin_audit_rpt_filed && fin_audit_rpt_filed.toString().toLowerCase() == 'true') ? true : false;

                if (form_static_fields.tab_services.visible) {
                    var services_data = await registrationModule.services_data(entityData.entity_id, form_static_fields.tab_services.visible);
                    var _tmpServices = [];
                    if (services.constructor == String) {
                        try { _tmpServices = JSON.parse(services); } catch (_) { }
                    } else {
                        if (services != null) { _tmpServices = services; }
                    }
                    for (let s_i = 0; _tmpServices && s_i < _tmpServices.length; s_i++) {
                        const sEle = _tmpServices[s_i]; var is_exists = false; var cat_name = ''; var service_name = '';
                        var u_serv_id = sEle.u_serv_id != null && validator.isNumeric(sEle.u_serv_id.toString()) ? BigInt(sEle.u_serv_id) : 0;
                        var __head_id = 0; var __category_id = 0;
                        for (let i = 0; services_data && i < services_data.length; i++) {
                            for (let j = 0; services_data[i].category && j < services_data[i].category.length; j++) {
                                for (let k = 0; services_data[i].category[j].sub_category && k < services_data[i].category[j].sub_category.length; k++) {
                                    if (services_data[i].category[j].sub_category[k].id.toString() == sEle.id.toString()) {
                                        __head_id = services_data[i].id; __category_id = services_data[i].category[j].id;
                                        cat_name = services_data[i].category[j].name;
                                        service_name = services_data[i].category[j].sub_category[k].name; is_exists = true;
                                        break;
                                    }
                                }
                                if (is_exists) { break; }
                            }
                            if (is_exists) { break; }
                        }
                        if (!is_exists) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid service selected, Please check.", { tab: 3, }));
                        }
                        var amt = 0; try { amt = parseFloat(sEle.price); amt = parseFloat(amt.toFixed(2)); } catch (_) { }
                        if (amt <= 0) {
                            return res.status(200).json(success(false, res.statusCode, `Please enter price for service ${cat_name}(${service_name}).`, { tab: 3, }));
                        }
                        _services.push({
                            u_serv_id: u_serv_id,
                            head_id: __head_id,
                            category_id: __category_id,
                            id: sEle.id,
                            size: sEle.size,
                            price: amt,
                        });
                    }
                    if (form_static_fields.tab_services.required) {
                        if (_services.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select services you will provide.", { tab: 3, }));
                        }
                    }
                }
            }

            var _tmpBankAcc = []; var updatedBankDetails = [];
            if (_mod_enrolment_banks) {
                if (bank_details.constructor == String) {
                    try { _tmpBankAcc = JSON.parse(bank_details); } catch (_) { }
                } else {
                    if (bank_details != null) { _tmpBankAcc = bank_details; }
                }
                if (form_static_fields.tab_bank_details.visible) {
                    if (_tmpBankAcc.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please add bank account details.", { tab: 3, }));
                    }
                }
                for (let k = 0; _tmpBankAcc && k < _tmpBankAcc.length; k++) {
                    const eleBank = _tmpBankAcc[k];
                    const _ubank_id = eleBank.ubank_id != null && validator.isNumeric(eleBank.ubank_id.toString()) ? BigInt(eleBank.ubank_id) : 0;
                    if (eleBank.account_no.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter bank account number.", { tab: 3, }));
                    }
                    if (!utils.is_bank_account_no(eleBank.account_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid bank account number.", { tab: 3, }));
                    }
                    if (eleBank.re_account_no.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please re-enter bank account number.", { tab: 3, }));
                    }
                    if (!utils.is_bank_account_no(eleBank.re_account_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid re-enter bank account number.", { tab: 3, }));
                    }
                    if (eleBank.account_no != eleBank.re_account_no) {
                        return res.status(200).json(success(false, res.statusCode, "Bank account number does not matched.", { tab: 3, }));
                    }
                    const _account_type = eleBank.account_type != null && validator.isNumeric(eleBank.account_type.toString()) ? BigInt(eleBank.account_type) : 0;
                    if (_account_type <= 0 && eleBank.account_type && eleBank.account_type.length > 0) {
                        if (eleBank.account_type.trim().toLowerCase() == 'saving') { _account_type = 1; }
                        if (eleBank.account_type.trim().toLowerCase() == 'current') { _account_type = 2; }
                    }
                    if (_account_type <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select account type.", { tab: 3, }));
                    }
                    if (!utils.check_in_array(_account_type, [1, 2])) {
                        return res.status(200).json(success(false, res.statusCode, "Account type must be Saving(1) or Current(2).", { tab: 3, }));
                    }
                    const _ifsc_code = (eleBank.ifsc_code && eleBank.ifsc_code.length > 0) ? eleBank.ifsc_code.trim().toUpperCase() : "";
                    if (_ifsc_code.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter IFSC code.", { tab: 3, }));
                    }
                    if (!utils.is_ifsc_code(_ifsc_code)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct IFSC code.", { tab: 3, }));
                    }
                    const ifsc_result = await fetchApigee.validate_ifsc_code(_ifsc_code);
                    const is_ifsc_valid = ifsc_result.status;
                    const ifsc_error_msg = ifsc_result.msg;
                    if (!is_ifsc_valid) {
                        return res.status(200).json(success(false, res.statusCode, (ifsc_error_msg.length > 0 ? ifsc_error_msg : 'IFSC code verification failed.'), { tab: 3, }));
                    }
                    updatedBankDetails.push({
                        ubank_id: _ubank_id,
                        account_no: eleBank.account_no,
                        re_account_no: eleBank.re_account_no,
                        account_type: _account_type,
                        ifsc_code: eleBank.ifsc_code,
                        is_ifsc_valid: false,
                        ifsc_response: '',
                        bank_other: '',
                        branch_other: '',
                        is_account_valid: false,
                        account_response: '',
                    });
                }
                if (_tmpBankAcc && _tmpBankAcc.length > 1) {
                    var has_same_bank = false;
                    for (let k = 0; k < _tmpBankAcc.length; k++) {
                        const eleTmp = _tmpBankAcc[k];
                        for (let ki = 0; ki < _tmpBankAcc.length; ki++) {
                            const eleTmpInner = _tmpBankAcc[ki];
                            if (eleTmp.account_no.toLowerCase() == eleTmpInner.account_no.toLowerCase() &&
                                eleTmp.ifsc_code.toLowerCase() == eleTmpInner.ifsc_code.toLowerCase()) {
                                has_same_bank = true; break;
                            }
                        }
                        if (has_same_bank) { break; }
                    }
                    if (has_same_bank) {
                        return res.status(200).json(success(false, res.statusCode, "You have entered same bank account details.", { tab: 3, }));
                    }
                }
            }

            return res.status(200).json(success(true, res.statusCode, "Success.", null));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const validate_admin = async (req, res, next) => {
    const { mod_admin_basic, mod_admin_perm_addr, mod_admin_curr_addr, admin_details } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const _mod_admin_basic = (mod_admin_basic && mod_admin_basic.toString().toLowerCase() == 'true') ? true : false;
            const _mod_admin_perm_addr = (mod_admin_perm_addr && mod_admin_perm_addr.toString().toLowerCase() == 'true') ? true : false;
            const _mod_admin_curr_addr = (mod_admin_curr_addr && mod_admin_curr_addr.toString().toLowerCase() == 'true') ? true : false;

            var _acc_first_name = ''; var _acc_middle_name = ''; var _acc_last_name = ''; var _acc_design_id = 0; var _acc_pan_no = '';
            var acc_pan_no_validated = false; var acc_pan_no_valid_date = null; var acc_pan_no_response = '';

            if (_mod_admin_basic) {
                _acc_first_name = (admin_details.first_name && admin_details.first_name.length > 0) ? admin_details.first_name.trim() : "";
                if (_acc_first_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter first name.", { tab: 4, }));
                }
                if (_acc_first_name.length > 0) {
                    if (_acc_first_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "First name should not be less than 2 characters.", { tab: 4, }));
                    }
                    if (_acc_first_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "First name should not be more than 30 characters.", { tab: 4, }));
                    }
                }
                _acc_middle_name = (admin_details.middle_name && admin_details.middle_name.length > 0) ? admin_details.middle_name.trim() : "";
                if (_acc_middle_name.length > 0) {
                    if (_acc_middle_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "Middle name should not be less than 2 characters.", { tab: 4, }));
                    }
                    if (_acc_middle_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "Middle name should not be more than 30 characters.", { tab: 4, }));
                    }
                }
                _acc_last_name = (admin_details.last_name && admin_details.last_name.length > 0) ? admin_details.last_name.trim() : "";
                if (_acc_last_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter last name.", { tab: 4, }));
                }
                if (_acc_last_name.length > 0) {
                    if (_acc_last_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "Last name should not be less than 2 characters.", { tab: 4, }));
                    }
                    if (_acc_last_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "Last name should not be more than 30 characters.", { tab: 4, }));
                    }
                }
                _acc_design_id = admin_details.design_id != null && validator.isNumeric(admin_details.design_id.toString()) ? BigInt(admin_details.design_id) : 0;
                if (_acc_design_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select designation.", { tab: 4, }));
                }
                var designations_ = await registrationModule.designations(entityData.entity_id);
                var _exists__ = false;
                for (let di = 0; designations_ && di < designations_.length; di++) {
                    if (designations_[di].design_id.toString() == _acc_design_id.toString()) {
                        _exists__ = true; break;
                    }
                }
                if (!_exists__) {
                    return res.status(200).json(success(false, res.statusCode, "Invalid designation selected.", { tab: 4, }));
                }
                _acc_pan_no = (admin_details.pan_no && admin_details.pan_no.length > 0) ? admin_details.pan_no.trim().toUpperCase() : "";
                if (_acc_pan_no.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter PAN card number.", { tab: 4, }));
                }
                if (_acc_pan_no.length > 0) {
                    if (!utils.is_pan_no(_acc_pan_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct PAN number.", { tab: 4, }));
                    }
                    const _query3 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND LENGTH(COALESCE(u.company_pan_no, '')) > 0 AND LOWER(u.company_pan_no) = LOWER(:pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND LENGTH(COALESCE(u.pan_no, '')) > 0 AND LOWER(u.pan_no) = LOWER(:pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE u.is_deleted = false AND a.is_deleted = false AND a.user_id <> :user_id
                    AND LENGTH(COALESCE(a.pan_no, '')) > 0 AND LOWER(a.pan_no) = LOWER(:pan_no)`;
                    const row3 = await db.sequelize.query(_query3, { replacements: { user_id: entityData.user_id, pan_no: _acc_pan_no }, type: QueryTypes.SELECT });
                    if (row3 && row3.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "PAN number is already registered.", { tab: 4, }));
                    }
                    /*const acc_pan_result = await fetchApigee.validate_pan_card(_acc_pan_no);
                    acc_pan_no_validated = acc_pan_result.status;
                    var acc_pan_error_msg = acc_pan_result.msg;
                    acc_pan_no_response = acc_pan_result.data;
                    acc_pan_no_valid_date = new Date();
                    if (!acc_pan_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (acc_pan_error_msg.length > 0 ? acc_pan_error_msg : 'Admin PAN verification failed.'), { tab: 4, }));
                    }*/
                }
            }

            var _acc_pa_address1 = ''; var _acc_pa_address2 = ''; var _acc_pa_address3 = ''; var _acc_pa_country_id = 0;
            var _acc_pa_state_id = 0; var _acc_pa_district_id = 0; var _acc_pa_block_id = 0; var _acc_pa_pin_code = '';
            if (_mod_admin_perm_addr) {
                _acc_pa_address1 = (admin_details.pa_address1 && admin_details.pa_address1.length > 0) ? admin_details.pa_address1.trim() : "";
                if (_acc_pa_address1.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter permanent address.", { tab: 4, }));
                }
                if (_acc_pa_address1.length > 0) {
                    if (_acc_pa_address1.length > 150) {
                        return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                    }
                }
                _acc_pa_address2 = (admin_details.pa_address2 && admin_details.pa_address2.length > 0) ? admin_details.pa_address2.trim() : "";
                if (_acc_pa_address2.length > 0) {
                    if (_acc_pa_address2.length > 150) {
                        return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                    }
                }
                _acc_pa_address3 = (admin_details.pa_address3 && admin_details.pa_address3.length > 0) ? admin_details.pa_address3.trim() : "";
                if (_acc_pa_address3.length > 0) {
                    if (_acc_pa_address3.length > 150) {
                        return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                    }
                }
                _acc_pa_country_id = admin_details.pa_country_id != null && validator.isNumeric(admin_details.pa_country_id.toString()) ? BigInt(admin_details.pa_country_id) : 0;
                if (_acc_pa_country_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address country.", { tab: 4, }));
                }
                _acc_pa_state_id = admin_details.pa_state_id != null && validator.isNumeric(admin_details.pa_state_id.toString()) ? BigInt(admin_details.pa_state_id) : 0;
                if (_acc_pa_state_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address state.", { tab: 4, }));
                }
                _acc_pa_district_id = admin_details.pa_district_id != null && validator.isNumeric(admin_details.pa_district_id.toString()) ? BigInt(admin_details.pa_district_id) : 0;
                if (_acc_pa_district_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address district.", { tab: 4, }));
                }
                _acc_pa_block_id = admin_details.pa_block_id != null && validator.isNumeric(admin_details.pa_block_id.toString()) ? BigInt(admin_details.pa_block_id) : 0;
                if (_acc_pa_block_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address block/taluka.", { tab: 4, }));
                }
                _acc_pa_pin_code = (admin_details.pa_pin_code && admin_details.pa_pin_code.length > 0) ? admin_details.pa_pin_code.trim() : "";
                if (_acc_pa_pin_code.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter permanent address pin code.", { tab: 4, }));
                }
                if (_acc_pa_pin_code.length > 0) {
                    if (!utils.is_pin_code(_acc_pa_pin_code)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct permanent address pin code.", { tab: 4, }));
                    }
                }
            }

            var _acc_ca_same_pa = false;
            var _acc_ca_address1 = ''; var _acc_ca_address2 = ''; var _acc_ca_address3 = ''; var _acc_ca_country_id = 0;
            var _acc_ca_state_id = 0; var _acc_ca_district_id = 0; var _acc_ca_block_id = 0; var _acc_ca_pin_code = '';
            if (_mod_admin_curr_addr) {
                _acc_ca_same_pa = (admin_details.ca_same_pa && admin_details.ca_same_pa.toString().toLowerCase() == 'true') ? true : false;
                if (_acc_ca_same_pa) {
                    if (_mod_admin_perm_addr) {
                        var _acc_ca_address1 = _acc_pa_address1; var _acc_ca_address2 = _acc_pa_address2; var _acc_ca_address3 = _acc_pa_address3;
                        var _acc_ca_country_id = _acc_pa_country_id; var _acc_ca_state_id = _acc_pa_state_id; var _acc_ca_district_id = _acc_pa_district_id;
                        var _acc_ca_block_id = _acc_pa_block_id; var _acc_ca_pin_code = _acc_pa_pin_code;
                    } else {
                        const _query1GetPerAddr = `SELECT pa_address1, pa_address2, pa_address3, pa_country_id, pa_state_id, pa_district_id, pa_block_id, pa_pin_code FROM user_account WHERE user_id = ?`;
                        const row1GetPerAddr = await db.sequelize.query(_query1GetPerAddr, { replacements: [entityData.user_id], type: QueryTypes.SELECT });
                        if (row1GetPerAddr && row1GetPerAddr.length > 0) {
                            _acc_ca_address1 = row1GetPerAddr[0].pa_address1;
                            _acc_ca_address2 = row1GetPerAddr[0].pa_address2;
                            _acc_ca_address3 = row1GetPerAddr[0].pa_address3;
                            _acc_ca_country_id = row1GetPerAddr[0].pa_country_id;
                            _acc_ca_state_id = row1GetPerAddr[0].pa_state_id;
                            _acc_ca_district_id = row1GetPerAddr[0].pa_district_id;
                            _acc_ca_block_id = row1GetPerAddr[0].pa_block_id;
                            _acc_ca_pin_code = row1GetPerAddr[0].pa_pin_code;
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
                        }
                    }
                }
                else {
                    _acc_ca_address1 = (admin_details.ca_address1 && admin_details.ca_address1.length > 0) ? admin_details.ca_address1.trim() : "";
                    if (_acc_ca_address1.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter current address.", { tab: 4, }));
                    }
                    if (_acc_ca_address1.length > 0) {
                        if (_acc_ca_address1.length > 150) {
                            return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                        }
                    }
                    _acc_ca_address2 = (admin_details.ca_address2 && admin_details.ca_address2.length > 0) ? admin_details.ca_address2.trim() : "";
                    if (_acc_ca_address2.length > 0) {
                        if (_acc_ca_address2.length > 150) {
                            return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                        }
                    }
                    _acc_ca_address3 = (admin_details.ca_address3 && admin_details.ca_address3.length > 0) ? admin_details.ca_address3.trim() : "";
                    if (_acc_ca_address3.length > 0) {
                        if (_acc_ca_address3.length > 150) {
                            return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                        }
                    }
                    _acc_ca_country_id = admin_details.ca_country_id != null && validator.isNumeric(admin_details.ca_country_id.toString()) ? BigInt(admin_details.ca_country_id) : 0;
                    if (_acc_ca_country_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address country.", { tab: 4, }));
                    }
                    _acc_ca_state_id = admin_details.ca_state_id != null && validator.isNumeric(admin_details.ca_state_id.toString()) ? BigInt(admin_details.ca_state_id) : 0;
                    if (_acc_ca_state_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address state.", { tab: 4, }));
                    }
                    _acc_ca_district_id = admin_details.ca_district_id != null && validator.isNumeric(admin_details.ca_district_id.toString()) ? BigInt(admin_details.ca_district_id) : 0;
                    if (_acc_ca_district_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address district.", { tab: 4, }));
                    }
                    _acc_ca_block_id = admin_details.ca_block_id != null && validator.isNumeric(admin_details.ca_block_id.toString()) ? BigInt(admin_details.ca_block_id) : 0;
                    if (_acc_ca_block_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address block/taluka.", { tab: 4, }));
                    }
                    _acc_ca_pin_code = (admin_details.ca_pin_code && admin_details.ca_pin_code.length > 0) ? admin_details.ca_pin_code.trim() : "";
                    if (_acc_ca_pin_code.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter current address pin code.", { tab: 4, }));
                    }
                    if (_acc_ca_pin_code.length > 0) {
                        if (!utils.is_pin_code(_acc_ca_pin_code)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct current address pin code.", { tab: 4, }));
                        }
                    }
                }
            }

            return res.status(200).json(success(true, res.statusCode, "Success.", null));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const validate_board_member = async (req, res, next) => {
    const { mod_board_member, board_members } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const _mod_board_member = (mod_board_member && mod_board_member.toString().toLowerCase() == 'true') ? true : false;

            var _tmpBoardMembers = []; var updatedBoardMembers = [];
            if (_mod_board_member) {
                if (board_members.constructor == String) {
                    try { _tmpBoardMembers = JSON.parse(board_members); } catch (_) { }
                } else {
                    if (board_members != null) { _tmpBoardMembers = board_members; }
                }
                if (_tmpBoardMembers && _tmpBoardMembers.length > 0) {
                    const mobile_ccc_list = await commonModule.country_calling_code();
                    for (let i = 0; _tmpBoardMembers && i < _tmpBoardMembers.length; i++) {
                        const eleBoardMem = _tmpBoardMembers[i];
                        const _bmem_member_id = eleBoardMem.member_id != null && validator.isNumeric(eleBoardMem.member_id.toString()) ? BigInt(eleBoardMem.member_id) : 0;
                        const _bmem_full_name = (eleBoardMem.full_name && eleBoardMem.full_name.length > 0) ? eleBoardMem.full_name.trim() : "";
                        if (_bmem_full_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member name.", { tab: 5, }));
                        }
                        if (_bmem_full_name.length > 0) {
                            if (_bmem_full_name.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "Board member name should not be less than 2 characters.", { tab: 5, }));
                            }
                            if (_bmem_full_name.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "Board member name should not be more than 150 characters.", { tab: 5, }));
                            }
                        }
                        const _bmem_designation = (eleBoardMem.designation && eleBoardMem.designation.length > 0) ? eleBoardMem.designation.trim() : "";
                        if (_bmem_designation.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member designation.", { tab: 5, }));
                        }
                        if (_bmem_designation.length > 0) {
                            if (_bmem_designation.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "Board member designation should not be less than 2 characters.", { tab: 5, }));
                            }
                            if (_bmem_designation.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "Board member designation should not be more than 150 characters.", { tab: 5, }));
                            }
                        }
                        const _bmem_email_id = (eleBoardMem.email_id && eleBoardMem.email_id.length > 0) ? eleBoardMem.email_id.trim() : "";
                        if (_bmem_email_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member email id.", { tab: 5, }));
                        }
                        if (!validator.isEmail(_bmem_email_id)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct board member email id.", { tab: 5, }));
                        }
                        var _bmem_mobile_ccc = (eleBoardMem.mobile_ccc && eleBoardMem.mobile_ccc.length > 0) ? eleBoardMem.mobile_ccc.trim() : "";
                        var is_valid_bmem_mobile_ccc = false;
                        if (_bmem_mobile_ccc.length > 0) {
                            for (let cc = 0; cc < mobile_ccc_list.length; cc++) {
                                if (mobile_ccc_list[cc].toLowerCase().trim() == _bmem_mobile_ccc.toLowerCase().trim()) {
                                    is_valid_bmem_mobile_ccc = true; break;
                                }
                            }
                        } else {
                            _bmem_mobile_ccc = mobile_ccc_list[0]; is_valid_bmem_mobile_ccc = true;
                        }
                        if (!is_valid_bmem_mobile_ccc) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid board member mobile country code.", { tab: 5, }));
                        }
                        const _bmem_mobile_no = (eleBoardMem.mobile_no && eleBoardMem.mobile_no.length > 0) ? eleBoardMem.mobile_no.trim() : "";
                        if (_bmem_mobile_no.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member mobile no.", { tab: 5, }));
                        }
                        if (!utils.is_mobile_no(_bmem_mobile_no)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct board member mobile no.", { tab: 5, }));
                        }
                        updatedBoardMembers.push({
                            member_id: _bmem_member_id,
                            full_name: _bmem_full_name,
                            designation: _bmem_designation,
                            email_id: _bmem_email_id,
                            mobile_ccc: _bmem_mobile_ccc,
                            mobile_no: _bmem_mobile_no,
                        });
                    }
                    var has_same_email = hasDuplicate(_tmpBoardMembers, "email_id");
                    if (has_same_email) {
                        return res.status(200).json(success(false, res.statusCode, "Board member details has same email id.", { tab: 5, }));
                    }
                    var has_same_mobile = hasDuplicate(_tmpBoardMembers, "mobile_no");
                    if (has_same_mobile) {
                        return res.status(200).json(success(false, res.statusCode, "Board member details has same mobile no.", { tab: 5, }));
                    }
                }
            }

            return res.status(200).json(success(true, res.statusCode, "Success.", null));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const validate_csr_committee = async (req, res, next) => {
    const { mod_csr_company, mod_csr_committee, brief_csr_policy, csr_members } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const _mod_csr_company = (mod_csr_company && mod_csr_company.toString().toLowerCase() == 'true') ? true : false;
            const _mod_csr_committee = (mod_csr_committee && mod_csr_committee.toString().toLowerCase() == 'true') ? true : false;


            var _brief_csr_policy = '';
            if (_mod_csr_company) {
                _brief_csr_policy = (brief_csr_policy && brief_csr_policy.length > 0) ? brief_csr_policy.trim() : "";
            }

            var _tmpCsrMembers = []; var updatedCsrMembers = [];
            if (_mod_csr_committee) {
                if (csr_members.constructor == String) {
                    try { _tmpCsrMembers = JSON.parse(csr_members); } catch (_) { }
                } else {
                    if (csr_members != null) { _tmpCsrMembers = csr_members; }
                }
                if (_tmpCsrMembers && _tmpCsrMembers.length > 0) {
                    const mobile_ccc_list = await commonModule.country_calling_code();
                    for (let i = 0; _tmpCsrMembers && i < _tmpCsrMembers.length; i++) {
                        const eleCsrMem = _tmpCsrMembers[i];
                        const _cmem_member_id = eleCsrMem.member_id != null && validator.isNumeric(eleCsrMem.member_id.toString()) ? BigInt(eleCsrMem.member_id) : 0;
                        const _cmem_full_name = (eleCsrMem.full_name && eleCsrMem.full_name.length > 0) ? eleCsrMem.full_name.trim() : "";
                        if (_cmem_full_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee name.", { tab: 6, }));
                        }
                        if (_cmem_full_name.length > 0) {
                            if (_cmem_full_name.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee name should not be less than 2 characters.", { tab: 6, }));
                            }
                            if (_cmem_full_name.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee name should not be more than 150 characters.", { tab: 6, }));
                            }
                        }
                        const _cmem_designation = (eleCsrMem.designation && eleCsrMem.designation.length > 0) ? eleCsrMem.designation.trim() : "";
                        if (_cmem_designation.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee designation.", { tab: 6, }));
                        }
                        if (_cmem_designation.length > 0) {
                            if (_cmem_designation.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee designation should not be less than 2 characters.", { tab: 6, }));
                            }
                            if (_cmem_designation.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee designation should not be more than 150 characters.", { tab: 5, }));
                            }
                        }
                        const _cmem_email_id = (eleCsrMem.email_id && eleCsrMem.email_id.length > 0) ? eleCsrMem.email_id.trim() : "";
                        if (_cmem_email_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee email id.", { tab: 6, }));
                        }
                        if (!validator.isEmail(_cmem_email_id)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct CSR committee email id.", { tab: 6, }));
                        }

                        var _cmem_mobile_ccc = (eleCsrMem.mobile_ccc && eleCsrMem.mobile_ccc.length > 0) ? eleCsrMem.mobile_ccc.trim() : "";
                        var is_valid_cmem_mobile_ccc = false;
                        if (_cmem_mobile_ccc.length > 0) {
                            for (let cc = 0; cc < mobile_ccc_list.length; cc++) {
                                if (mobile_ccc_list[cc].toLowerCase().trim() == _cmem_mobile_ccc.toLowerCase().trim()) {
                                    is_valid_cmem_mobile_ccc = true; break;
                                }
                            }
                        } else {
                            _cmem_mobile_ccc = mobile_ccc_list[0]; is_valid_cmem_mobile_ccc = true;
                        }
                        if (!is_valid_cmem_mobile_ccc) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid CSR committee mobile country code.", { tab: 5, }));
                        }

                        const _cmem_mobile_no = (eleCsrMem.mobile_no && eleCsrMem.mobile_no.length > 0) ? eleCsrMem.mobile_no.trim() : "";
                        if (_cmem_mobile_no.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee mobile no.", { tab: 6, }));
                        }
                        if (!utils.is_mobile_no(_cmem_mobile_no)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct CSR committee mobile no.", { tab: 6, }));
                        }
                        updatedCsrMembers.push({
                            member_id: _cmem_member_id,
                            full_name: _cmem_full_name,
                            designation: _cmem_designation,
                            email_id: _cmem_email_id,
                            mobile_ccc: _cmem_mobile_ccc,
                            mobile_no: _cmem_mobile_no,
                        });
                    }
                    var has_same_email = hasDuplicate(_tmpCsrMembers, "email_id");
                    if (has_same_email) {
                        return res.status(200).json(success(false, res.statusCode, "CSR committee details has same email id.", { tab: 6, }));
                    }
                    var has_same_mobile = hasDuplicate(_tmpCsrMembers, "mobile_no");
                    if (has_same_mobile) {
                        return res.status(200).json(success(false, res.statusCode, "CSR committee details has same mobile no.", { tab: 6, }));
                    }
                }
            }

            return res.status(200).json(success(true, res.statusCode, "Success.", null));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const profile_update = async (req, res, next) => {
    const {
        mod_initiator_user, mod_company_basic, mod_company_address, mod_enrolment_identification, mod_enrolment_document,
        mod_enrolment_banks, mod_admin_basic, mod_admin_perm_addr, mod_admin_curr_addr, mod_admin_document, mod_board_member,
        mod_csr_company, mod_csr_committee,

        first_name, middle_name, last_name, pan_no,
        company_name, registered_as_id, org_type_id, parent_org_id, address_1, address_2, address_3,
        country_id, state_id, district_id, block_id, pin_code, contact_no,
        company_pan_no, gstin_no, cin_no, registration_no, it_80g_reg_no, it_12a_reg_no, darpan_reg_no,
        mca_csr_f1_reg_no, fcra_no_with_status, fcra_no_status, expertise_area_ids, fin_audit_rpt_filed,
        services, bank_details, entity_docs_to_delete,
        admin_details, admin_docs_to_delete,
        board_members,
        brief_csr_policy, csr_policy_docs_to_delete, csr_members,
    } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const form_static_fields = await entityDataModule.profile_validation_field(entityData.entity_id, entityData.form_static_fields_json);

            const is_admin = entityData.is_admin && entityData.is_admin == true ? true : false;
            if (!is_admin) {
                return res.status(200).json(success(false, res.statusCode, "Only admin accounts are allowed to update profile.", null));
            }

            const _mod_initiator_user = (mod_initiator_user && mod_initiator_user.toString().toLowerCase() == 'true') ? true : false;
            const _mod_company_basic = (mod_company_basic && mod_company_basic.toString().toLowerCase() == 'true') ? true : false;
            const _mod_company_address = (mod_company_address && mod_company_address.toString().toLowerCase() == 'true') ? true : false;
            const _mod_enrolment_identification = (mod_enrolment_identification && mod_enrolment_identification.toString().toLowerCase() == 'true') ? true : false;
            const _mod_enrolment_document = (mod_enrolment_document && mod_enrolment_document.toString().toLowerCase() == 'true') ? true : false;
            const _mod_enrolment_banks = (mod_enrolment_banks && mod_enrolment_banks.toString().toLowerCase() == 'true') ? true : false;
            const _mod_admin_basic = (mod_admin_basic && mod_admin_basic.toString().toLowerCase() == 'true') ? true : false;
            const _mod_admin_perm_addr = (mod_admin_perm_addr && mod_admin_perm_addr.toString().toLowerCase() == 'true') ? true : false;
            const _mod_admin_curr_addr = (mod_admin_curr_addr && mod_admin_curr_addr.toString().toLowerCase() == 'true') ? true : false;
            const _mod_admin_document = (mod_admin_document && mod_admin_document.toString().toLowerCase() == 'true') ? true : false;
            const _mod_board_member = (mod_board_member && mod_board_member.toString().toLowerCase() == 'true') ? true : false;
            const _mod_csr_company = (mod_csr_company && mod_csr_company.toString().toLowerCase() == 'true') ? true : false;
            const _mod_csr_committee = (mod_csr_committee && mod_csr_committee.toString().toLowerCase() == 'true') ? true : false;


            //#region Check if previous request pending

            var _old_modify_id = 0; var _old_initiator_user = false; var _old_company_basic = false; var _old_company_address = false; var _old_enrolment_identification = false;
            var _old_enrolment_document = false; var _old_enrolment_banks = false; var _old_admin_basic = false; var _old_admin_perm_addr = false;
            var _old_admin_curr_addr = false; var _old_admin_document = false; var _old_board_member = false; var _old_csr_company = false; var _old_csr_committee = false;

            const _queryCheckMod = `SELECT modify_id, mod_initiator_user, mod_company_basic, mod_company_address, mod_enrolment_identification, mod_enrolment_document, 
            mod_enrolment_banks, mod_admin_basic, mod_admin_perm_addr, mod_admin_curr_addr, mod_admin_document, mod_board_member, mod_csr_company, 
            mod_csr_committee FROM modify_master WHERE reg_id = ? AND COALESCE(request_status, 0) = 0`;
            const rowCheckMod = await db.sequelize.query(_queryCheckMod, { replacements: [entityData.reg_id], type: QueryTypes.SELECT });
            if (rowCheckMod && rowCheckMod.length > 0) {
                _old_modify_id = rowCheckMod[0].modify_id != null && validator.isNumeric(rowCheckMod[0].modify_id.toString()) ? BigInt(rowCheckMod[0].modify_id) : 0;
                _old_initiator_user = (rowCheckMod[0].mod_initiator_user ? rowCheckMod[0].mod_initiator_user : false);
                _old_company_basic = (rowCheckMod[0].mod_company_basic ? rowCheckMod[0].mod_company_basic : false);
                _old_company_address = (rowCheckMod[0].mod_company_address ? rowCheckMod[0].mod_company_address : false);
                _old_enrolment_identification = (rowCheckMod[0].mod_enrolment_identification ? rowCheckMod[0].mod_enrolment_identification : false);
                _old_enrolment_document = (rowCheckMod[0].mod_enrolment_document ? rowCheckMod[0].mod_enrolment_document : false);
                _old_enrolment_banks = (rowCheckMod[0].mod_enrolment_banks ? rowCheckMod[0].mod_enrolment_banks : false);
                _old_admin_basic = (rowCheckMod[0].mod_admin_basic ? rowCheckMod[0].mod_admin_basic : false);
                _old_admin_perm_addr = (rowCheckMod[0].mod_admin_perm_addr ? rowCheckMod[0].mod_admin_perm_addr : false);
                _old_admin_curr_addr = (rowCheckMod[0].mod_admin_curr_addr ? rowCheckMod[0].mod_admin_curr_addr : false);
                _old_admin_document = (rowCheckMod[0].mod_admin_document ? rowCheckMod[0].mod_admin_document : false);
                _old_board_member = (rowCheckMod[0].mod_board_member ? rowCheckMod[0].mod_board_member : false);
                _old_csr_company = (rowCheckMod[0].mod_csr_company ? rowCheckMod[0].mod_csr_company : false);
                _old_csr_committee = (rowCheckMod[0].mod_csr_committee ? rowCheckMod[0].mod_csr_committee : false);
            }
            if (_old_modify_id > 0) {
                return res.status(200).json(success(false, res.statusCode, "Your previous approval request is pending.", null));
            }

            if (_mod_initiator_user && _old_initiator_user) {
                return res.status(200).json(success(false, res.statusCode, "Initiator details pending for approval.", null));
            }
            if ((_mod_company_basic && _old_company_basic) || (_mod_company_address && _old_company_address)) {
                return res.status(200).json(success(false, res.statusCode, "Company details pending for approval.", null));
            }

            if ((_mod_enrolment_identification && _old_enrolment_identification) || (_mod_enrolment_document && _old_enrolment_document) ||
                (_mod_enrolment_banks && _old_enrolment_banks)) {
                return res.status(200).json(success(false, res.statusCode, "Enrolment details pending for approval.", null));
            }
            if ((_mod_admin_basic && _old_admin_basic) || (_mod_admin_perm_addr && _old_admin_perm_addr) ||
                (_mod_admin_curr_addr && _old_admin_curr_addr) || (_mod_admin_document && _old_admin_document)) {
                return res.status(200).json(success(false, res.statusCode, "Admin details pending for approval.", null));
            }
            if (_mod_board_member && _old_board_member) {
                return res.status(200).json(success(false, res.statusCode, "Board members pending for approval.", null));
            }
            if ((_mod_csr_company && _old_csr_company) || (_mod_csr_committee && _old_csr_committee)) {
                return res.status(200).json(success(false, res.statusCode, "CSR Committee pending for approval.", null));
            }

            //#endregion

            const hasMod = _mod_initiator_user || _mod_company_basic || _mod_company_address || _mod_enrolment_identification ||
                _mod_enrolment_document || _mod_enrolment_banks || _mod_admin_basic || _mod_admin_perm_addr || _mod_admin_curr_addr ||
                _mod_admin_document || _mod_board_member || _mod_csr_company || _mod_csr_committee;
            if (!hasMod) {
                return res.status(200).json(success(false, res.statusCode, "Please check request parameters.", null));
            }

            const mobile_ccc_list = await commonModule.country_calling_code();

            // initiator details

            var _first_name = ''; var _middle_name = ''; var _last_name = ''; var _pan_no = '';
            var pan_no_validated = false; var pan_no_valid_date = null; var pan_no_response = '';
            if (_mod_initiator_user) {
                _first_name = (first_name && first_name.length > 0) ? first_name.trim() : "";
                if (form_static_fields.first_name.visible && form_static_fields.first_name.required) {
                    if (_first_name.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter first name.", { tab: 1, }));
                    }
                }
                if (_first_name.length > 0) {
                    if (_first_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "First name should not be less than 2 characters.", { tab: 1, }));
                    }
                    if (_first_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "First name should not be more than 30 characters.", { tab: 1, }));
                    }
                }
                _middle_name = (middle_name && middle_name.length > 0) ? middle_name.trim() : "";
                if (form_static_fields.middle_name.visible && form_static_fields.middle_name.required) {
                    if (_middle_name.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter middle name.", { tab: 1, }));
                    }
                }
                if (_middle_name.length > 0) {
                    if (_middle_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "Middle name should not be less than 2 characters.", { tab: 1, }));
                    }
                    if (_middle_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "Middle name should not be more than 30 characters.", { tab: 1, }));
                    }
                }
                _last_name = (last_name && last_name.length > 0) ? last_name.trim() : "";
                if (form_static_fields.last_name.visible && form_static_fields.last_name.required) {
                    if (_last_name.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter last name.", { tab: 1, }));
                    }
                }
                if (_last_name.length > 0) {
                    if (_last_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "Last name should not be less than 2 characters.", { tab: 1, }));
                    }
                    if (_last_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "Last name should not be more than 30 characters.", { tab: 1, }));
                    }
                }
                _pan_no = (pan_no && pan_no.length > 0) ? pan_no.trim().toUpperCase() : "";
                if (form_static_fields.pan_no.visible) {
                    if (_pan_no.length <= 0 && form_static_fields.pan_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter PAN number.", { tab: 1, }));
                    }
                }
                if (_pan_no.length > 0) {
                    if (!utils.is_pan_no(_pan_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct PAN number.", { tab: 1, }));
                    }
                    const _query3 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.company_pan_no, '')) > 0 AND LOWER(u.company_pan_no) = LOWER(:pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.pan_no, '')) > 0 AND LOWER(u.pan_no) = LOWER(:pan_no)`;
                    const row3 = await db.sequelize.query(_query3, { replacements: { reg_id: entityData.reg_id, pan_no: _pan_no }, type: QueryTypes.SELECT });
                    if (row3 && row3.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "PAN number is already registered.", { tab: 1, }));
                    }
                    const pan_result = await fetchApigee.validate_pan_card(_pan_no);
                    pan_no_validated = pan_result.status;
                    pan_no_response = pan_result.data;
                    var pan_error_msg = pan_result.msg;
                    pan_no_valid_date = new Date();
                    if (!pan_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (pan_error_msg.length > 0 ? pan_error_msg : 'Pan card verification failed.'), { tab: 1, }));
                    }
                }
            }

            // Company Details

            var _company_name = ''; var _registered_as_id = 0; var _org_type_id = 0; var _parent_org_id = 0;
            if (_mod_company_basic) {
                _company_name = (company_name && company_name.length > 0) ? company_name.trim() : "";
                if (form_static_fields.company_name.visible) {
                    if (form_static_fields.company_name.required) {
                        if (_company_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter company name.", { tab: 2, }));
                        }
                    }
                }
                if (_company_name.length > 0) {
                    if (_company_name.length < 5) {
                        return res.status(200).json(success(false, res.statusCode, "Company name should not be less than 5 characters.", { tab: 2, }));
                    }
                    if (_company_name.length > 100) {
                        return res.status(200).json(success(false, res.statusCode, "Company name should not be more than 100 characters.", { tab: 2, }));
                    }
                }
                _registered_as_id = registered_as_id != null && validator.isNumeric(registered_as_id.toString()) ? BigInt(registered_as_id) : 0;
                if (form_static_fields.registered_as_id.visible) {
                    if (form_static_fields.registered_as_id.required) {
                        if (_registered_as_id <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select entity registered as.", { tab: 2, }));
                        }
                    }
                }
                if (_registered_as_id > 0) {
                    const reg_types_ = await registrationModule.registration_type(entityData.entity_id);
                    var _exists = false;
                    for (let p = 0; reg_types_ && p < reg_types_.length; p++) {
                        if (reg_types_[p].reg_type_id.toString() == _registered_as_id.toString()) {
                            _exists = true; break;
                        }
                    }
                    if (!_exists) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid entity registered as selected.", { tab: 2, }));
                    }
                }
                _org_type_id = org_type_id != null && validator.isNumeric(org_type_id.toString()) ? BigInt(org_type_id) : 0;
                if (form_static_fields.parent_orgnization.visible) {
                    if (form_static_fields.parent_orgnization.required) {
                        if (_org_type_id <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select parent organization.", { tab: 2, }));
                        }
                    }
                }
                if (_org_type_id > 0) {
                    const _query1014 = `SELECT m.parent_entity FROM parent_orgs_mast d INNER JOIN parent_orgs_mapp m ON d.org_type_id = m.org_type_id
                    WHERE d.org_type_id = ? AND d.is_enabled = true AND d.is_deleted = false`;
                    const row1014 = await db.sequelize.query(_query1014, { replacements: [_org_type_id], type: QueryTypes.SELECT });
                    if (row1014 && row1014.length > 0) {
                        const select_org_req = (row1014[0].parent_entity && row1014[0].parent_entity.length > 0 ? true : false);
                        if (select_org_req) {
                            _parent_org_id = parent_org_id != null && validator.isNumeric(parent_org_id.toString()) ? BigInt(parent_org_id) : 0;
                            if (_parent_org_id <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please search & select parent entity name.", { tab: 2, }));
                            }
                            const _query1015 = `SELECT u.entity_id FROM user_master u WHERE u.reg_id <> ? AND u.reg_id = ? AND u.is_enabled = true AND u.is_deleted = false AND u.approve_status = 1`;
                            const row1015 = await db.sequelize.query(_query1015, { replacements: [entityData.reg_id, _parent_org_id], type: QueryTypes.SELECT });
                            if (row1015 && row1015.length > 0) {
                                var _is_org_matched = false;
                                for (let opn = 0; row1014[0].parent_entity && opn < row1014[0].parent_entity.length; opn++) {
                                    if (row1014[0].parent_entity[opn].toString() == row1015[0].entity_id.toString()) {
                                        _is_org_matched = true; break;
                                    }
                                }
                                if (!_is_org_matched) {
                                    return res.status(200).json(success(false, res.statusCode, "Invalid parent entity name selected.", { tab: 2, }));
                                }
                            } else {
                                return res.status(200).json(success(false, res.statusCode, "Invalid parent entity name selected.", { tab: 2, }));
                            }
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, "Invalid parent organization selected.", { tab: 2, }));
                    }
                }
            }

            var _address_1 = ''; var _address_2 = ''; var _address_3 = ''; var _country_id = 0; var _state_id = 0;
            var _district_id = 0; var _block_id = 0; var _pin_code = ''; var _contact_no = '';
            if (_mod_company_address) {
                _address_1 = (address_1 && address_1.length > 0) ? address_1.trim() : "";
                if (form_static_fields.address_1.visible) {
                    if (_address_1.length <= 0 && form_static_fields.address_1.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company address.", { tab: 2, }));
                    }
                }
                _address_2 = (address_2 && address_2.length > 0) ? address_2.trim() : "";
                if (form_static_fields.address_2.visible) {
                    if (_address_2.length <= 0 && form_static_fields.address_2.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company address 2.", { tab: 2, }));
                    }
                }
                _address_3 = (address_3 && address_3.length > 0) ? address_3.trim() : "";
                if (form_static_fields.address_3.visible) {
                    if (_address_3.length <= 0 && form_static_fields.address_3.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company address 3.", { tab: 2, }));
                    }
                }
                _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
                if (form_static_fields.country_id.visible) {
                    if (_country_id <= 0 && form_static_fields.country_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select country.", { tab: 2, }));
                    }
                }
                _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
                if (form_static_fields.state_id.visible) {
                    if (_state_id <= 0 && form_static_fields.state_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select state/UT.", { tab: 2, }));
                    }
                }
                _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
                if (form_static_fields.district_id.visible) {
                    if (_district_id <= 0 && form_static_fields.district_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select district.", { tab: 2, }));
                    }
                }
                _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;
                if (form_static_fields.block_id.visible) {
                    if (form_static_fields.block_id.required) {
                        if (_block_id <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select block/taluka.", { tab: 2, }));
                        }
                    }
                }
                _pin_code = (pin_code && pin_code.length > 0) ? pin_code.trim() : "";
                if (form_static_fields.pin_code.visible) {
                    if (_pin_code.length <= 0 && form_static_fields.pin_code.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter pin code.", { tab: 2, }));
                    }
                }
                if (_pin_code.length > 0) {
                    if (!utils.is_pin_code(_pin_code)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct pin code.", { tab: 2, }));
                    }
                }
                _contact_no = (contact_no && contact_no.length > 0) ? contact_no.trim() : "";
                if (form_static_fields.contact_no.visible) {
                    if (_contact_no.length <= 0 && form_static_fields.contact_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter landline no. (with STD code).", { tab: 2, }));
                    }
                }
            }

            // Enrolment Details

            var _company_pan_no = ''; var _gstin_no = ''; var _cin_no = ''; var _registration_no = ''; var _it_80g_reg_no = '';
            var _it_12a_reg_no = ''; var _darpan_reg_no = ''; var _mca_csr_f1_reg_no = ''; var _fcra_no_with_status = '';
            var _fcra_no_status = false; var _expertise_area_ids = []; var _fin_audit_rpt_filed = false; var _services = [];
            var company_pan_no_validated = false; var company_pan_no_valid_date = null; var company_pan_no_response = '';
            var gstin_no_validated = false; var gstin_no_valid_date = null; var gstin_no_response = '';
            var cin_no_validated = false; var cin_no_valid_date = null; var cin_no_response = '';

            if (_mod_enrolment_identification) {
                _company_pan_no = (company_pan_no && company_pan_no.length > 0) ? company_pan_no.trim().toUpperCase() : "";
                if (form_static_fields.company_pan_no.visible) {
                    if (_company_pan_no.length <= 0 && form_static_fields.company_pan_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company PAN number.", { tab: 3, }));
                    }
                }
                if (_company_pan_no.length > 0) {
                    if (!utils.is_pan_no(_company_pan_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct company PAN number.", { tab: 3, }));
                    }
                    const _query4 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.company_pan_no, '')) > 0 AND LOWER(u.company_pan_no) = LOWER(:company_pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.pan_no, '')) > 0 AND LOWER(u.pan_no) = LOWER(:company_pan_no)`;
                    const row4 = await db.sequelize.query(_query4, { replacements: { reg_id: entityData.reg_id, company_pan_no: _company_pan_no }, type: QueryTypes.SELECT });
                    if (row4 && row4.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Company PAN number is already registered.", { tab: 3, }));
                    }
                    const pan_result = await fetchApigee.validate_pan_card(_company_pan_no);
                    company_pan_no_validated = pan_result.status;
                    var company_pan_error_msg = pan_result.msg;
                    company_pan_no_response = pan_result.data;
                    company_pan_no_valid_date = new Date();
                    if (!company_pan_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (company_pan_error_msg.length > 0 ? company_pan_error_msg : 'Company PAN verification failed.'), { tab: 3, }));
                    }
                }
                _gstin_no = (gstin_no && gstin_no.length > 0) ? gstin_no.trim().toUpperCase() : "";
                if (form_static_fields.gstin_no.visible) {
                    if (_gstin_no.length <= 0 && form_static_fields.gstin_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter GSTIN number.", { tab: 3, }));
                    }
                }
                if (_gstin_no.length > 0) {
                    if (!utils.is_gstn_no(_gstin_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct GSTIN number.", { tab: 3, }));
                    }
                    const _query5 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.gstin_no, '')) > 0 AND LOWER(u.gstin_no) = LOWER(:gstin_no)`;
                    const row5 = await db.sequelize.query(_query5, { replacements: { reg_id: entityData.reg_id, gstin_no: _gstin_no }, type: QueryTypes.SELECT });
                    if (row5 && row5.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "GSTIN number is already registered.", { tab: 3, }));
                    }
                    const gstin_result = await fetchApigee.validate_gstin_no(_gstin_no);
                    gstin_no_validated = gstin_result.status;
                    var gstin_error_msg = gstin_result.msg;
                    gstin_no_response = gstin_result.data;
                    gstin_no_valid_date = new Date();
                    if (!gstin_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (gstin_error_msg.length > 0 ? gstin_error_msg : 'GSTIN number verification failed.'), { tab: 3, }));
                    }
                }
                _cin_no = (cin_no && cin_no.length > 0) ? cin_no.trim().toUpperCase() : "";
                if (form_static_fields.cin_no.visible) {
                    if (_cin_no.length <= 0 && form_static_fields.cin_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter company identification number.", { tab: 3, }));
                    }
                }
                if (_cin_no.length > 0) {
                    if (!utils.is_cin_no(_cin_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct company identification number.", { tab: 3, }));
                    }
                    const _query6 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.cin_no, '')) > 0 AND LOWER(u.cin_no) = LOWER(:cin_no)`;
                    const row6 = await db.sequelize.query(_query6, { replacements: { reg_id: entityData.reg_id, cin_no: _cin_no }, type: QueryTypes.SELECT });
                    if (row6 && row6.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Company identification number is already registered.", { tab: 3, }));
                    }
                    const cin_result = await fetchApigee.validate_cin_no(_cin_no);
                    cin_no_validated = cin_result.status;
                    var cin_error_msg = cin_result.msg;
                    cin_no_response = cin_result.data;
                    cin_no_valid_date = new Date();
                    if (!cin_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (cin_error_msg.length > 0 ? cin_error_msg : 'Company identification number verification failed.'), { tab: 3, }));
                    }
                }
                _registration_no = (registration_no && registration_no.length > 0) ? registration_no.trim() : "";
                if (form_static_fields.registration_no.visible) {
                    if (form_static_fields.registration_no.required) {
                        if (_registration_no.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter registration number.", { tab: 3, }));
                        }
                    }
                }
                if (_registration_no.length > 0) {
                    const _query501 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.registration_no, '')) > 0 AND LOWER(u.registration_no) = LOWER(:registration_no)`;
                    const row501 = await db.sequelize.query(_query501, { replacements: { reg_id: entityData.reg_id, registration_no: _registration_no }, type: QueryTypes.SELECT });
                    if (row501 && row501.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Registration number is already registered.", { tab: 3, }));
                    }
                }
                _it_80g_reg_no = (it_80g_reg_no && it_80g_reg_no.length > 0) ? it_80g_reg_no.trim() : "";
                if (form_static_fields.it_80g_reg_no.visible) {
                    if (_it_80g_reg_no.length <= 0 && form_static_fields.it_80g_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter income tax 18G registration no.", { tab: 3, }));
                    }
                }
                if (_it_80g_reg_no.length > 0) {
                    const _query502 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.it_80g_reg_no, '')) > 0 AND LOWER(u.it_80g_reg_no) = LOWER(:it_80g_reg_no)`;
                    const row502 = await db.sequelize.query(_query502, { replacements: { reg_id: entityData.reg_id, it_80g_reg_no: _it_80g_reg_no }, type: QueryTypes.SELECT });
                    if (row502 && row502.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Income tax 18G registration no. is already registered.", { tab: 3, }));
                    }
                }
                _it_12a_reg_no = (it_12a_reg_no && it_12a_reg_no.length > 0) ? it_12a_reg_no.trim() : "";
                if (form_static_fields.it_12a_reg_no.visible) {
                    if (_it_12a_reg_no.length <= 0 && form_static_fields.it_12a_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter income tax 12A registration no.", { tab: 3, }));
                    }
                }
                if (_it_12a_reg_no.length > 0) {
                    const _query503 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.it_12a_reg_no, '')) > 0 AND LOWER(u.it_12a_reg_no) = LOWER(:it_12a_reg_no)`;
                    const row503 = await db.sequelize.query(_query503, { replacements: { reg_id: entityData.reg_id, it_12a_reg_no: _it_12a_reg_no }, type: QueryTypes.SELECT });
                    if (row503 && row503.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "Income tax 12A registration no. is already registered.", { tab: 3, }));
                    }
                }
                _darpan_reg_no = (darpan_reg_no && darpan_reg_no.length > 0) ? darpan_reg_no.trim() : "";
                if (form_static_fields.darpan_reg_no.visible) {
                    if (_darpan_reg_no.length <= 0 && form_static_fields.darpan_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter NGO DARPAN registration no/id.", { tab: 3, }));
                    }
                }
                if (_darpan_reg_no.length > 0) {
                    const _query504 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.darpan_reg_no, '')) > 0 AND LOWER(u.darpan_reg_no) = LOWER(:darpan_reg_no)`;
                    const row504 = await db.sequelize.query(_query504, { replacements: { reg_id: entityData.reg_id, darpan_reg_no: _darpan_reg_no }, type: QueryTypes.SELECT });
                    if (row504 && row504.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "NGO DARPAN registration no/id is already registered.", { tab: 3, }));
                    }
                }
                _mca_csr_f1_reg_no = (mca_csr_f1_reg_no && mca_csr_f1_reg_no.length > 0) ? mca_csr_f1_reg_no.trim() : "";
                if (form_static_fields.mca_csr_f1_reg_no.visible) {
                    if (_mca_csr_f1_reg_no.length <= 0 && form_static_fields.mca_csr_f1_reg_no.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter MCA CSR form 1 registration no.", { tab: 3, }));
                    }
                }
                if (_mca_csr_f1_reg_no.length > 0) {
                    const _query505 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND u.reg_id <> :reg_id AND LENGTH(COALESCE(u.mca_csr_f1_reg_no, '')) > 0 AND LOWER(u.mca_csr_f1_reg_no) = LOWER(:mca_csr_f1_reg_no)`;
                    const row505 = await db.sequelize.query(_query505, { replacements: { reg_id: entityData.reg_id, mca_csr_f1_reg_no: _mca_csr_f1_reg_no }, type: QueryTypes.SELECT });
                    if (row505 && row505.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "MCA CSR form 1 registration no. is already registered.", { tab: 3, }));
                    }
                }
                _fcra_no_with_status = (fcra_no_with_status && fcra_no_with_status.length > 0) ? fcra_no_with_status.trim() : "";
                _fcra_no_status = (fcra_no_status && fcra_no_status.toString().toLowerCase() == 'true') ? true : false;

                if (form_static_fields.expertise_area_id.visible) {
                    if (expertise_area_ids && expertise_area_ids.length > 0) {
                        const expertise_area_ids_list = expertise_area_ids.split(',').join('|');
                        const expertise_area_ids_array = expertise_area_ids_list.split('|');
                        for (let ax = 0; expertise_area_ids_array && ax < expertise_area_ids_array.length; ax++) {
                            var _ax = expertise_area_ids_array[ax] != null && validator.isNumeric(expertise_area_ids_array[ax].toString()) ? BigInt(expertise_area_ids_array[ax]) : 0;
                            if (_ax > 0) {
                                _expertise_area_ids.push(_ax);
                            }
                        }
                    }
                    if (_expertise_area_ids.length <= 0 && form_static_fields.expertise_area_id.required) {
                        return res.status(200).json(success(false, res.statusCode, "Please select area of expertise.", { tab: 3, }));
                    }
                }
                if (_expertise_area_ids.length > 0) {
                    const expertise_areas_ = await registrationModule.expertise_area(entityData.entity_id);
                    for (let ti = 0; _expertise_area_ids && ti < _expertise_area_ids.length; ti++) {
                        var _exists = false;
                        for (let ii = 0; expertise_areas_ && ii < expertise_areas_.length; ii++) {
                            if (expertise_areas_[ii].expertise_area_id.toString() == _expertise_area_ids[ti].toString()) {
                                _exists = true; break;
                            }
                        }
                        if (!_exists) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid area of expertise selected.", { tab: 3, }));
                        }
                    }
                }
                _fin_audit_rpt_filed = (fin_audit_rpt_filed && fin_audit_rpt_filed.toString().toLowerCase() == 'true') ? true : false;

                if (form_static_fields.tab_services.visible) {
                    var services_data = await registrationModule.services_data(entityData.entity_id, form_static_fields.tab_services.visible);
                    var _tmpServices = [];
                    if (services.constructor == String) {
                        try { _tmpServices = JSON.parse(services); } catch (_) { }
                    } else {
                        if (services != null) { _tmpServices = services; }
                    }
                    for (let s_i = 0; _tmpServices && s_i < _tmpServices.length; s_i++) {
                        const sEle = _tmpServices[s_i]; var is_exists = false; var cat_name = ''; var service_name = '';
                        var u_serv_id = sEle.u_serv_id != null && validator.isNumeric(sEle.u_serv_id.toString()) ? BigInt(sEle.u_serv_id) : 0;
                        var __head_id = 0; var __category_id = 0;
                        for (let i = 0; services_data && i < services_data.length; i++) {
                            for (let j = 0; services_data[i].category && j < services_data[i].category.length; j++) {
                                for (let k = 0; services_data[i].category[j].sub_category && k < services_data[i].category[j].sub_category.length; k++) {
                                    if (services_data[i].category[j].sub_category[k].id.toString() == sEle.id.toString()) {
                                        __head_id = services_data[i].id; __category_id = services_data[i].category[j].id;
                                        cat_name = services_data[i].category[j].name;
                                        service_name = services_data[i].category[j].sub_category[k].name; is_exists = true;
                                        break;
                                    }
                                }
                                if (is_exists) { break; }
                            }
                            if (is_exists) { break; }
                        }
                        if (!is_exists) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid service selected, Please check.", { tab: 3, }));
                        }
                        var amt = 0; try { amt = parseFloat(sEle.price); amt = parseFloat(amt.toFixed(2)); } catch (_) { }
                        if (amt <= 0) {
                            return res.status(200).json(success(false, res.statusCode, `Please enter price for service ${cat_name}(${service_name}).`, { tab: 3, }));
                        }
                        _services.push({
                            u_serv_id: u_serv_id,
                            head_id: __head_id,
                            category_id: __category_id,
                            id: sEle.id,
                            size: sEle.range,
                            price: amt,
                        });
                    }
                    if (form_static_fields.tab_services.required) {
                        if (_services.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please select services you will provide.", { tab: 3, }));
                        }
                    }
                }
            }

            var document_uploaded = await entityDataModule.entity_document_uploaded(entityData.reg_id);
            var documentRequired = await registrationModule.documents(entityData.entity_id);
            var _docs_to_delete = [];
            if (_mod_enrolment_document) {
                var _tmpDocsToDelete = [];
                if (entity_docs_to_delete.constructor == String) {
                    try { _tmpDocsToDelete = JSON.parse(entity_docs_to_delete); } catch (_) { }
                } else {
                    if (entity_docs_to_delete != null) { _tmpDocsToDelete = entity_docs_to_delete; }
                }
                for (let i = 0; _tmpDocsToDelete && i < _tmpDocsToDelete.length; i++) {
                    var _ai = _tmpDocsToDelete[i] != null && validator.isNumeric(_tmpDocsToDelete[i].toString()) ? BigInt(_tmpDocsToDelete[i]) : 0;
                    if (_ai > 0) {
                        _docs_to_delete.push(_ai);
                    }
                }
                for (let i = 0; documentRequired && i < documentRequired.length; i++) {
                    if (form_static_fields.flow_by_reg_type_id) {
                        for (let tt = 0; tt < form_static_fields.reg_type_flow_data.length; tt++) {
                            if (form_static_fields.reg_type_flow_data[tt].reg_type_id.toString() == _registered_as_id.toString()) {
                                for (let ti = 0; ti < form_static_fields.reg_type_flow_data[tt].field_data.document_list.length; ti++) {
                                    const docEle = form_static_fields.reg_type_flow_data[tt].field_data.document_list[ti];
                                    if (docEle.document_id == documentRequired[i].document_id) {
                                        documentRequired[i].is_required = docEle.is_required;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    const file_name_to_check = 'doc_' + documentRequired[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null; var is_already_up = false; var is_doc_to_delete = false;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    for (let dd = 0; _docs_to_delete && dd < _docs_to_delete.length; dd++) {
                        if (_docs_to_delete[dd].toString() == documentRequired[i].document_id.toString()) {
                            is_doc_to_delete = true; break;
                        }
                    }
                    for (let ht = 0; document_uploaded && ht < document_uploaded.length; ht++) {
                        if (document_uploaded[ht].document_id.toString() == documentRequired[i].document_id.toString()) {
                            is_already_up = true; break;
                        }
                    }
                    if (documentRequired[i].is_required && !is_file_exists && is_already_up && is_doc_to_delete) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + documentRequired[i].doc_name, { tab: 3, }));
                    }
                    if (documentRequired[i].is_required && !is_file_exists && !is_already_up) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + documentRequired[i].doc_name, { tab: 3, }));
                    }
                    if (is_file_exists) {
                        const ext = file_json_data.originalname.substr(file_json_data.originalname.lastIndexOf('.')).toLowerCase();
                        if (!utils.check_in_array(ext, documentRequired[i].file_type_allowed)) {
                            return res.status(200).json(success(false, res.statusCode, "Please check file format for document<br>\"" + documentRequired[i].doc_name + "\"<br><br>Supported formats are: " + documentRequired[i].file_type_allowed.join(', '), { tab: 3, }));
                        }
                        const file_size_in_kb = file_json_data.size / 1024;
                        if (file_size_in_kb > documentRequired[i].file_max_size) {
                            const readable = utils.bytes_to_readable(documentRequired[i].file_max_size * 1024);
                            return res.status(200).json(success(false, res.statusCode, "Please check file size for document<br>\"" + documentRequired[i].doc_name + "\"<br><br>Maximum file size limit is " + readable, { tab: 3, }));
                        }
                    }
                }
            }

            var _tmpBankAcc = []; var updatedBankDetails = [];
            if (_mod_enrolment_banks) {
                if (bank_details.constructor == String) {
                    try { _tmpBankAcc = JSON.parse(bank_details); } catch (_) { }
                } else {
                    if (bank_details != null) { _tmpBankAcc = bank_details; }
                }
                if (form_static_fields.tab_bank_details.visible) {
                    if (_tmpBankAcc.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please add bank account details.", { tab: 3, }));
                    }
                }
                for (let k = 0; _tmpBankAcc && k < _tmpBankAcc.length; k++) {
                    const eleBank = _tmpBankAcc[k];
                    const _ubank_id = eleBank.ubank_id != null && validator.isNumeric(eleBank.ubank_id.toString()) ? BigInt(eleBank.ubank_id) : 0;
                    if (eleBank.account_no.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter bank account number.", { tab: 3, }));
                    }
                    if (!utils.is_bank_account_no(eleBank.account_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid bank account number.", { tab: 3, }));
                    }
                    if (eleBank.re_account_no.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please re-enter bank account number.", { tab: 3, }));
                    }
                    if (!utils.is_bank_account_no(eleBank.re_account_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid re-enter bank account number.", { tab: 3, }));
                    }
                    if (eleBank.account_no != eleBank.re_account_no) {
                        return res.status(200).json(success(false, res.statusCode, "Bank account number does not matched.", { tab: 3, }));
                    }
                    const _account_type = eleBank.account_type != null && validator.isNumeric(eleBank.account_type.toString()) ? parseInt(eleBank.account_type) : 0;
                    if (_account_type <= 0 && eleBank.account_type && eleBank.account_type.length > 0) {
                        if (eleBank.account_type.trim().toLowerCase() == 'saving') { _account_type = 1; }
                        if (eleBank.account_type.trim().toLowerCase() == 'current') { _account_type = 2; }
                    }
                    if (_account_type <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select account type.", { tab: 3, }));
                    }
                    if (!utils.check_in_array(_account_type, [1, 2])) {
                        return res.status(200).json(success(false, res.statusCode, "Account type must be Saving(1) or Current(2).", { tab: 3, }));
                    }
                    const _ifsc_code = (eleBank.ifsc_code && eleBank.ifsc_code.length > 0) ? eleBank.ifsc_code.trim().toUpperCase() : "";
                    if (_ifsc_code.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter IFSC code.", { tab: 3, }));
                    }
                    if (!utils.is_ifsc_code(_ifsc_code)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct IFSC code.", { tab: 3, }));
                    }

                    updatedBankDetails.push({
                        ubank_id: _ubank_id,
                        account_no: eleBank.account_no,
                        re_account_no: eleBank.re_account_no,
                        account_type: _account_type,
                        ifsc_code: eleBank.ifsc_code,
                        is_ifsc_valid: false,
                        ifsc_response: '',
                        bank_other: '',
                        branch_other: '',
                        is_account_valid: false,
                        account_response: '',
                    });
                }
                if (_tmpBankAcc && _tmpBankAcc.length > 1) {
                    var has_same_bank = false;
                    for (let k = 0; k < _tmpBankAcc.length; k++) {
                        const eleTmp = _tmpBankAcc[k];
                        for (let ki = 0; ki < _tmpBankAcc.length; ki++) {
                            const eleTmpInner = _tmpBankAcc[ki];
                            if (eleTmp.account_no.toLowerCase() == eleTmpInner.account_no.toLowerCase() &&
                                eleTmp.ifsc_code.toLowerCase() == eleTmpInner.ifsc_code.toLowerCase()) {
                                has_same_bank = true; break;
                            }
                        }
                        if (has_same_bank) { break; }
                    }
                    if (has_same_bank) {
                        return res.status(200).json(success(false, res.statusCode, "You have entered same bank account details.", { tab: 3, }));
                    }
                }
            }

            // Admin Details

            var _admDetailNew = {};
            if (admin_details.constructor == String) {
                try { _admDetailNew = JSON.parse(admin_details); } catch (_) { }
            } else {
                if (admin_details != null) { _admDetailNew = admin_details; }
            }

            var _acc_first_name = ''; var _acc_middle_name = ''; var _acc_last_name = ''; var _acc_design_id = 0; var _acc_pan_no = '';
            var acc_pan_no_validated = false; var acc_pan_no_valid_date = null; var acc_pan_no_response = '';

            if (_mod_admin_basic) {
                _acc_first_name = (_admDetailNew.first_name && _admDetailNew.first_name.length > 0) ? _admDetailNew.first_name.trim() : "";
                if (_acc_first_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter first name.", { tab: 4, }));
                }
                if (_acc_first_name.length > 0) {
                    if (_acc_first_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "First name should not be less than 2 characters.", { tab: 4, }));
                    }
                    if (_acc_first_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "First name should not be more than 30 characters.", { tab: 4, }));
                    }
                }
                _acc_middle_name = (_admDetailNew.middle_name && _admDetailNew.middle_name.length > 0) ? _admDetailNew.middle_name.trim() : "";
                if (_acc_middle_name.length > 0) {
                    if (_acc_middle_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "Middle name should not be less than 2 characters.", { tab: 4, }));
                    }
                    if (_acc_middle_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "Middle name should not be more than 30 characters.", { tab: 4, }));
                    }
                }
                _acc_last_name = (_admDetailNew.last_name && _admDetailNew.last_name.length > 0) ? _admDetailNew.last_name.trim() : "";
                if (_acc_last_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter last name.", { tab: 4, }));
                }
                if (_acc_last_name.length > 0) {
                    if (_acc_last_name.length < 2) {
                        return res.status(200).json(success(false, res.statusCode, "Last name should not be less than 2 characters.", { tab: 4, }));
                    }
                    if (_acc_last_name.length > 30) {
                        return res.status(200).json(success(false, res.statusCode, "Last name should not be more than 30 characters.", { tab: 4, }));
                    }
                }
                _acc_design_id = _admDetailNew.design_id != null && validator.isNumeric(_admDetailNew.design_id.toString()) ? BigInt(_admDetailNew.design_id) : 0;
                if (_acc_design_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select designation.", { tab: 4, }));
                }
                var designations_ = await registrationModule.designations(entityData.entity_id);
                var _exists__ = false;
                for (let di = 0; designations_ && di < designations_.length; di++) {
                    if (designations_[di].design_id.toString() == _acc_design_id.toString()) {
                        _exists__ = true; break;
                    }
                }
                if (!_exists__) {
                    return res.status(200).json(success(false, res.statusCode, "Invalid designation selected.", { tab: 4, }));
                }
                _acc_pan_no = (_admDetailNew.pan_no && _admDetailNew.pan_no.length > 0) ? _admDetailNew.pan_no.trim().toUpperCase() : "";
                if (_acc_pan_no.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter PAN card number.", { tab: 4, }));
                }
                if (_acc_pan_no.length > 0) {
                    if (!utils.is_pan_no(_acc_pan_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct PAN number.", { tab: 4, }));
                    }
                    const _query3 = `SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND LENGTH(COALESCE(u.company_pan_no, '')) > 0 AND LOWER(u.company_pan_no) = LOWER(:pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_master u WHERE u.is_deleted = false AND LENGTH(COALESCE(u.pan_no, '')) > 0 AND LOWER(u.pan_no) = LOWER(:pan_no)
                    UNION ALL
                    SELECT u.reg_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE u.is_deleted = false AND a.is_deleted = false AND a.user_id <> :user_id
                    AND LENGTH(COALESCE(a.pan_no, '')) > 0 AND LOWER(a.pan_no) = LOWER(:pan_no)`;
                    const row3 = await db.sequelize.query(_query3, { replacements: { user_id: entityData.user_id, pan_no: _acc_pan_no }, type: QueryTypes.SELECT });
                    if (row3 && row3.length > 0) {
                        return res.status(200).json(success(false, res.statusCode, "PAN number is already registered.", { tab: 4, }));
                    }
                    const acc_pan_result = await fetchApigee.validate_pan_card(_acc_pan_no);

                    acc_pan_no_validated = acc_pan_result.status;
                    var acc_pan_error_msg = acc_pan_result.msg;
                    acc_pan_no_response = acc_pan_result.data;
                    acc_pan_no_valid_date = new Date();
                    if (!acc_pan_no_validated) {
                        return res.status(200).json(success(false, res.statusCode, (acc_pan_error_msg.length > 0 ? acc_pan_error_msg : 'Admin PAN verification failed.'), { tab: 4, }));
                    }
                }
            }

            var _acc_pa_address1 = ''; var _acc_pa_address2 = ''; var _acc_pa_address3 = ''; var _acc_pa_country_id = 0;
            var _acc_pa_state_id = 0; var _acc_pa_district_id = 0; var _acc_pa_block_id = 0; var _acc_pa_pin_code = '';
            if (_mod_admin_perm_addr) {
                _acc_pa_address1 = (_admDetailNew.pa_address1 && _admDetailNew.pa_address1.length > 0) ? _admDetailNew.pa_address1.trim() : "";
                if (_acc_pa_address1.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter permanent address.", { tab: 4, }));
                }
                if (_acc_pa_address1.length > 0) {
                    if (_acc_pa_address1.length > 150) {
                        return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                    }
                }
                _acc_pa_address2 = (_admDetailNew.pa_address2 && _admDetailNew.pa_address2.length > 0) ? _admDetailNew.pa_address2.trim() : "";
                if (_acc_pa_address2.length > 0) {
                    if (_acc_pa_address2.length > 150) {
                        return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                    }
                }
                _acc_pa_address3 = (_admDetailNew.pa_address3 && _admDetailNew.pa_address3.length > 0) ? _admDetailNew.pa_address3.trim() : "";
                if (_acc_pa_address3.length > 0) {
                    if (_acc_pa_address3.length > 150) {
                        return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                    }
                }
                _acc_pa_country_id = _admDetailNew.pa_country_id != null && validator.isNumeric(_admDetailNew.pa_country_id.toString()) ? BigInt(_admDetailNew.pa_country_id) : 0;
                if (_acc_pa_country_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address country.", { tab: 4, }));
                }
                _acc_pa_state_id = _admDetailNew.pa_state_id != null && validator.isNumeric(_admDetailNew.pa_state_id.toString()) ? BigInt(_admDetailNew.pa_state_id) : 0;
                if (_acc_pa_state_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address state.", { tab: 4, }));
                }
                _acc_pa_district_id = _admDetailNew.pa_district_id != null && validator.isNumeric(_admDetailNew.pa_district_id.toString()) ? BigInt(_admDetailNew.pa_district_id) : 0;
                if (_acc_pa_district_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address district.", { tab: 4, }));
                }
                _acc_pa_block_id = _admDetailNew.pa_block_id != null && validator.isNumeric(_admDetailNew.pa_block_id.toString()) ? BigInt(_admDetailNew.pa_block_id) : 0;
                if (_acc_pa_block_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select permanent address block/taluka.", { tab: 4, }));
                }
                _acc_pa_pin_code = (_admDetailNew.pa_pin_code && _admDetailNew.pa_pin_code.length > 0) ? _admDetailNew.pa_pin_code.trim() : "";
                if (_acc_pa_pin_code.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter permanent address pin code.", { tab: 4, }));
                }
                if (_acc_pa_pin_code.length > 0) {
                    if (!utils.is_pin_code(_acc_pa_pin_code)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct permanent address pin code.", { tab: 4, }));
                    }
                }
            }
            var _acc_ca_same_pa = false;
            var _acc_ca_address1 = ''; var _acc_ca_address2 = ''; var _acc_ca_address3 = ''; var _acc_ca_country_id = 0;
            var _acc_ca_state_id = 0; var _acc_ca_district_id = 0; var _acc_ca_block_id = 0; var _acc_ca_pin_code = '';
            if (_mod_admin_curr_addr) {
                _acc_ca_same_pa = (_admDetailNew.ca_same_pa && _admDetailNew.ca_same_pa.toString().toLowerCase() == 'true') ? true : false;
                if (_acc_ca_same_pa) {
                    if (_mod_admin_perm_addr) {
                        var _acc_ca_address1 = _acc_pa_address1; var _acc_ca_address2 = _acc_pa_address2; var _acc_ca_address3 = _acc_pa_address3;
                        var _acc_ca_country_id = _acc_pa_country_id; var _acc_ca_state_id = _acc_pa_state_id; var _acc_ca_district_id = _acc_pa_district_id;
                        var _acc_ca_block_id = _acc_pa_block_id; var _acc_ca_pin_code = _acc_pa_pin_code;
                    } else {
                        const _query1GetPerAddr = `SELECT pa_address1, pa_address2, pa_address3, pa_country_id, pa_state_id, pa_district_id, pa_block_id, pa_pin_code FROM user_account WHERE user_id = ?`;
                        const row1GetPerAddr = await db.sequelize.query(_query1GetPerAddr, { replacements: [entityData.user_id], type: QueryTypes.SELECT });
                        if (row1GetPerAddr && row1GetPerAddr.length > 0) {
                            _acc_ca_address1 = row1GetPerAddr[0].pa_address1;
                            _acc_ca_address2 = row1GetPerAddr[0].pa_address2;
                            _acc_ca_address3 = row1GetPerAddr[0].pa_address3;
                            _acc_ca_country_id = row1GetPerAddr[0].pa_country_id;
                            _acc_ca_state_id = row1GetPerAddr[0].pa_state_id;
                            _acc_ca_district_id = row1GetPerAddr[0].pa_district_id;
                            _acc_ca_block_id = row1GetPerAddr[0].pa_block_id;
                            _acc_ca_pin_code = row1GetPerAddr[0].pa_pin_code;
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
                        }
                    }
                }
                else {
                    _acc_ca_address1 = (_admDetailNew.ca_address1 && _admDetailNew.ca_address1.length > 0) ? _admDetailNew.ca_address1.trim() : "";
                    if (_acc_ca_address1.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter current address.", { tab: 4, }));
                    }
                    if (_acc_ca_address1.length > 0) {
                        if (_acc_ca_address1.length > 150) {
                            return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                        }
                    }
                    _acc_ca_address2 = (_admDetailNew.ca_address2 && _admDetailNew.ca_address2.length > 0) ? _admDetailNew.ca_address2.trim() : "";
                    if (_acc_ca_address2.length > 0) {
                        if (_acc_ca_address2.length > 150) {
                            return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                        }
                    }
                    _acc_ca_address3 = (_admDetailNew.ca_address3 && _admDetailNew.ca_address3.length > 0) ? _admDetailNew.ca_address3.trim() : "";
                    if (_acc_ca_address3.length > 0) {
                        if (_acc_ca_address3.length > 150) {
                            return res.status(200).json(success(false, res.statusCode, "Address should not be more than 150 characters.", { tab: 4, }));
                        }
                    }
                    _acc_ca_country_id = _admDetailNew.ca_country_id != null && validator.isNumeric(_admDetailNew.ca_country_id.toString()) ? BigInt(_admDetailNew.ca_country_id) : 0;
                    if (_acc_ca_country_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address country.", { tab: 4, }));
                    }
                    _acc_ca_state_id = _admDetailNew.ca_state_id != null && validator.isNumeric(_admDetailNew.ca_state_id.toString()) ? BigInt(_admDetailNew.ca_state_id) : 0;
                    if (_acc_ca_state_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address state.", { tab: 4, }));
                    }
                    _acc_ca_district_id = _admDetailNew.ca_district_id != null && validator.isNumeric(_admDetailNew.ca_district_id.toString()) ? BigInt(_admDetailNew.ca_district_id) : 0;
                    if (_acc_ca_district_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address district.", { tab: 4, }));
                    }
                    _acc_ca_block_id = _admDetailNew.ca_block_id != null && validator.isNumeric(_admDetailNew.ca_block_id.toString()) ? BigInt(_admDetailNew.ca_block_id) : 0;
                    if (_acc_ca_block_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select current address block/taluka.", { tab: 4, }));
                    }
                    _acc_ca_pin_code = (_admDetailNew.ca_pin_code && _admDetailNew.ca_pin_code.length > 0) ? _admDetailNew.ca_pin_code.trim() : "";
                    if (_acc_ca_pin_code.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter current address pin code.", { tab: 4, }));
                    }
                    if (_acc_ca_pin_code.length > 0) {
                        if (!utils.is_pin_code(_acc_ca_pin_code)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct current address pin code.", { tab: 4, }));
                        }
                    }
                }
            }

            var user_docs_uploaded = await entityDataModule.user_acc_document_uploaded(entityData.user_id);
            var user_docs_list = await registrationModule.user_acc_documents(entityData.entity_id);
            var _admin_docs_to_delete = [];
            if (_mod_admin_document) {
                var _tmpAdmDocsToDelete = [];
                if (admin_docs_to_delete.constructor == String) {
                    try { _tmpAdmDocsToDelete = JSON.parse(admin_docs_to_delete); } catch (_) { }
                } else {
                    if (admin_docs_to_delete != null) { _tmpAdmDocsToDelete = admin_docs_to_delete; }
                }
                for (let i = 0; _tmpAdmDocsToDelete && i < _tmpAdmDocsToDelete.length; i++) {
                    var _ai = _tmpAdmDocsToDelete[i] != null && validator.isNumeric(_tmpAdmDocsToDelete[i].toString()) ? BigInt(_tmpAdmDocsToDelete[i]) : 0;
                    if (_ai > 0) {
                        _admin_docs_to_delete.push(_ai);
                    }
                }
                for (let i = 0; user_docs_list && i < user_docs_list.length; i++) {
                    const file_name_to_check = 'user_doc_' + user_docs_list[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null; var is_already_up = false; var is_doc_to_delete = false;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    for (let dd = 0; _admin_docs_to_delete && dd < _admin_docs_to_delete.length; dd++) {
                        if (_admin_docs_to_delete[dd].toString() == user_docs_list[i].document_id.toString()) {
                            is_doc_to_delete = true; break;
                        }
                    }
                    for (let ht = 0; user_docs_uploaded && ht < user_docs_uploaded.length; ht++) {
                        if (user_docs_uploaded[ht].document_id.toString() == user_docs_list[i].document_id.toString()) {
                            is_already_up = true; break;
                        }
                    }
                    if (user_docs_list[i].is_required && !is_file_exists && is_already_up && is_doc_to_delete) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + user_docs_list[i].doc_name, { tab: 4, }));
                    }
                    if (user_docs_list[i].is_required && !is_file_exists && !is_already_up) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + user_docs_list[i].doc_name, { tab: 4, }));
                    }
                    if (is_file_exists) {
                        const ext = file_json_data.originalname.substr(file_json_data.originalname.lastIndexOf('.')).toLowerCase();
                        if (!utils.check_in_array(ext, user_docs_list[i].file_type_allowed)) {
                            return res.status(200).json(success(false, res.statusCode, "Please check file format for document<br>\"" + user_docs_list[i].doc_name + "\"<br><br>Supported formats are: " + user_docs_list[i].file_type_allowed.join(', '), { tab: 4, }));
                        }
                        const file_size_in_kb = file_json_data.size / 1024;
                        if (file_size_in_kb > user_docs_list[i].file_max_size) {
                            const readable = utils.bytes_to_readable(user_docs_list[i].file_max_size * 1024);
                            return res.status(200).json(success(false, res.statusCode, "Please check file size for document<br>\"" + user_docs_list[i].doc_name + "\"<br><br>Maximum file size limit is " + readable, { tab: 4, }));
                        }
                    }
                }
            }

            // Board Members

            var _tmpBoardMembers = []; var updatedBoardMembers = [];
            if (_mod_board_member) {
                if (board_members.constructor == String) {
                    try { _tmpBoardMembers = JSON.parse(board_members); } catch (_) { }
                } else {
                    if (board_members != null) { _tmpBoardMembers = board_members; }
                }
                if (_tmpBoardMembers && _tmpBoardMembers.length > 0) {
                    for (let i = 0; _tmpBoardMembers && i < _tmpBoardMembers.length; i++) {
                        const eleBoardMem = _tmpBoardMembers[i];
                        const _bmem_member_id = eleBoardMem.member_id != null && validator.isNumeric(eleBoardMem.member_id.toString()) ? BigInt(eleBoardMem.member_id) : 0;
                        const _bmem_full_name = (eleBoardMem.full_name && eleBoardMem.full_name.length > 0) ? eleBoardMem.full_name.trim() : "";
                        if (_bmem_full_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member name.", { tab: 5, }));
                        }
                        if (_bmem_full_name.length > 0) {
                            if (_bmem_full_name.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "Board member name should not be less than 2 characters.", { tab: 5, }));
                            }
                            if (_bmem_full_name.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "Board member name should not be more than 150 characters.", { tab: 5, }));
                            }
                        }
                        const _bmem_designation = (eleBoardMem.designation && eleBoardMem.designation.length > 0) ? eleBoardMem.designation.trim() : "";
                        if (_bmem_designation.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member designation.", { tab: 5, }));
                        }
                        if (_bmem_designation.length > 0) {
                            if (_bmem_designation.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "Board member designation should not be less than 2 characters.", { tab: 5, }));
                            }
                            if (_bmem_designation.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "Board member designation should not be more than 150 characters.", { tab: 5, }));
                            }
                        }
                        const _bmem_email_id = (eleBoardMem.email_id && eleBoardMem.email_id.length > 0) ? eleBoardMem.email_id.trim() : "";
                        if (_bmem_email_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member email id.", { tab: 5, }));
                        }
                        if (!validator.isEmail(_bmem_email_id)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct board member email id.", { tab: 5, }));
                        }
                        var _bmem_mobile_ccc = (eleBoardMem.mobile_ccc && eleBoardMem.mobile_ccc.length > 0) ? eleBoardMem.mobile_ccc.trim() : "";
                        var is_valid_bmem_mobile_ccc = false;
                        if (_bmem_mobile_ccc.length > 0) {
                            for (let cc = 0; cc < mobile_ccc_list.length; cc++) {
                                if (mobile_ccc_list[cc].toLowerCase().trim() == _bmem_mobile_ccc.toLowerCase().trim()) {
                                    is_valid_bmem_mobile_ccc = true; break;
                                }
                            }
                        } else {
                            _bmem_mobile_ccc = mobile_ccc_list[0]; is_valid_bmem_mobile_ccc = true;
                        }
                        if (!is_valid_bmem_mobile_ccc) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid board member mobile country code.", { tab: 5, }));
                        }
                        const _bmem_mobile_no = (eleBoardMem.mobile_no && eleBoardMem.mobile_no.length > 0) ? eleBoardMem.mobile_no.trim() : "";
                        if (_bmem_mobile_no.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter board member mobile no.", { tab: 5, }));
                        }
                        if (!utils.is_mobile_no(_bmem_mobile_no)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct board member mobile no.", { tab: 5, }));
                        }
                        updatedBoardMembers.push({
                            member_id: _bmem_member_id,
                            full_name: _bmem_full_name,
                            designation: _bmem_designation,
                            email_id: _bmem_email_id,
                            mobile_ccc: _bmem_mobile_ccc,
                            mobile_no: _bmem_mobile_no,
                        });
                    }
                    var has_same_email = hasDuplicate(_tmpBoardMembers, "email_id");
                    if (has_same_email) {
                        return res.status(200).json(success(false, res.statusCode, "Board member details has same email id.", { tab: 5, }));
                    }
                    var has_same_mobile = hasDuplicate(_tmpBoardMembers, "mobile_no");
                    if (has_same_mobile) {
                        return res.status(200).json(success(false, res.statusCode, "Board member details has same mobile no.", { tab: 5, }));
                    }
                }
            }

            // CSR Committee

            var _brief_csr_policy = '';
            var csr_policy_docs_uploaded = await entityDataModule.csr_docs_document_uploaded(entityData.reg_id);
            var csr_policy_docs_list = await registrationModule.csr_policy_documents(entityData.entity_id);
            var _csr_policy_docs_to_delete = [];

            if (_mod_csr_company) {
                _brief_csr_policy = (brief_csr_policy && brief_csr_policy.length > 0) ? brief_csr_policy.trim() : "";

                var _tmpCsrDocsToDelete = [];
                if (csr_policy_docs_to_delete.constructor == String) {
                    try { _tmpCsrDocsToDelete = JSON.parse(csr_policy_docs_to_delete); } catch (_) { }
                } else {
                    if (csr_policy_docs_to_delete != null) { _tmpCsrDocsToDelete = csr_policy_docs_to_delete; }
                }
                for (let i = 0; _tmpCsrDocsToDelete && i < _tmpCsrDocsToDelete.length; i++) {
                    var _ai = _tmpCsrDocsToDelete[i] != null && validator.isNumeric(_tmpCsrDocsToDelete[i].toString()) ? BigInt(_tmpCsrDocsToDelete[i]) : 0;
                    if (_ai > 0) {
                        _csr_policy_docs_to_delete.push(_ai);
                    }
                }
                for (let i = 0; csr_policy_docs_list && i < csr_policy_docs_list.length; i++) {
                    const file_name_to_check = 'csr_doc_' + csr_policy_docs_list[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null; var is_already_up = false; var is_doc_to_delete = false;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    for (let dd = 0; _csr_policy_docs_to_delete && dd < _csr_policy_docs_to_delete.length; dd++) {
                        if (_csr_policy_docs_to_delete[dd].toString() == csr_policy_docs_list[i].document_id.toString()) {
                            is_doc_to_delete = true; break;
                        }
                    }
                    for (let ht = 0; csr_policy_docs_uploaded && ht < csr_policy_docs_uploaded.length; ht++) {
                        if (csr_policy_docs_uploaded[ht].document_id.toString() == csr_policy_docs_list[i].document_id.toString()) {
                            is_already_up = true; break;
                        }
                    }
                    if (csr_policy_docs_list[i].is_required && !is_file_exists && is_already_up && is_doc_to_delete) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + csr_policy_docs_list[i].doc_name, { tab: 6, }));
                    }
                    if (csr_policy_docs_list[i].is_required && !is_file_exists && !is_already_up) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + csr_policy_docs_list[i].doc_name, { tab: 6, }));
                    }
                    if (is_file_exists) {
                        const ext = file_json_data.originalname.substr(file_json_data.originalname.lastIndexOf('.')).toLowerCase();
                        if (!utils.check_in_array(ext, csr_policy_docs_list[i].file_type_allowed)) {
                            return res.status(200).json(success(false, res.statusCode, "Please check file format for document<br>\"" + csr_policy_docs_list[i].doc_name + "\"<br><br>Supported formats are: " + csr_policy_docs_list[i].file_type_allowed.join(', '), { tab: 6, }));
                        }
                        const file_size_in_kb = file_json_data.size / 1024;
                        if (file_size_in_kb > csr_policy_docs_list[i].file_max_size) {
                            const readable = utils.bytes_to_readable(csr_policy_docs_list[i].file_max_size * 1024);
                            return res.status(200).json(success(false, res.statusCode, "Please check file size for document<br>\"" + csr_policy_docs_list[i].doc_name + "\"<br><br>Maximum file size limit is " + readable, { tab: 6, }));
                        }
                    }
                }
            }

            var _tmpCsrMembers = []; var updatedCsrMembers = [];
            if (_mod_csr_committee) {
                if (csr_members.constructor == String) {
                    try { _tmpCsrMembers = JSON.parse(csr_members); } catch (_) { }
                } else {
                    if (csr_members != null) { _tmpCsrMembers = csr_members; }
                }
                if (_tmpCsrMembers && _tmpCsrMembers.length > 0) {
                    for (let i = 0; _tmpCsrMembers && i < _tmpCsrMembers.length; i++) {
                        const eleCsrMem = _tmpCsrMembers[i];
                        const _cmem_member_id = eleCsrMem.member_id != null && validator.isNumeric(eleCsrMem.member_id.toString()) ? BigInt(eleCsrMem.member_id) : 0;
                        const _cmem_full_name = (eleCsrMem.full_name && eleCsrMem.full_name.length > 0) ? eleCsrMem.full_name.trim() : "";
                        if (_cmem_full_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee name.", { tab: 6, }));
                        }
                        if (_cmem_full_name.length > 0) {
                            if (_cmem_full_name.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee name should not be less than 2 characters.", { tab: 6, }));
                            }
                            if (_cmem_full_name.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee name should not be more than 150 characters.", { tab: 6, }));
                            }
                        }
                        const _cmem_designation = (eleCsrMem.designation && eleCsrMem.designation.length > 0) ? eleCsrMem.designation.trim() : "";
                        if (_cmem_designation.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee designation.", { tab: 6, }));
                        }
                        if (_cmem_designation.length > 0) {
                            if (_cmem_designation.length < 2) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee designation should not be less than 2 characters.", { tab: 6, }));
                            }
                            if (_cmem_designation.length > 150) {
                                return res.status(200).json(success(false, res.statusCode, "CSR committee designation should not be more than 150 characters.", { tab: 5, }));
                            }
                        }
                        const _cmem_email_id = (eleCsrMem.email_id && eleCsrMem.email_id.length > 0) ? eleCsrMem.email_id.trim() : "";
                        if (_cmem_email_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee email id.", { tab: 6, }));
                        }
                        if (!validator.isEmail(_cmem_email_id)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct CSR committee email id.", { tab: 6, }));
                        }

                        var _cmem_mobile_ccc = (eleCsrMem.mobile_ccc && eleCsrMem.mobile_ccc.length > 0) ? eleCsrMem.mobile_ccc.trim() : "";
                        var is_valid_cmem_mobile_ccc = false;
                        if (_cmem_mobile_ccc.length > 0) {
                            for (let cc = 0; cc < mobile_ccc_list.length; cc++) {
                                if (mobile_ccc_list[cc].toLowerCase().trim() == _cmem_mobile_ccc.toLowerCase().trim()) {
                                    is_valid_cmem_mobile_ccc = true; break;
                                }
                            }
                        } else {
                            _cmem_mobile_ccc = mobile_ccc_list[0]; is_valid_cmem_mobile_ccc = true;
                        }
                        if (!is_valid_cmem_mobile_ccc) {
                            return res.status(200).json(success(false, res.statusCode, "Invalid CSR committee mobile country code.", { tab: 5, }));
                        }

                        const _cmem_mobile_no = (eleCsrMem.mobile_no && eleCsrMem.mobile_no.length > 0) ? eleCsrMem.mobile_no.trim() : "";
                        if (_cmem_mobile_no.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter CSR committee mobile no.", { tab: 6, }));
                        }
                        if (!utils.is_mobile_no(_cmem_mobile_no)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct CSR committee mobile no.", { tab: 6, }));
                        }
                        updatedCsrMembers.push({
                            member_id: _cmem_member_id,
                            full_name: _cmem_full_name,
                            designation: _cmem_designation,
                            email_id: _cmem_email_id,
                            mobile_ccc: _cmem_mobile_ccc,
                            mobile_no: _cmem_mobile_no,
                        });
                    }
                    var has_same_email = hasDuplicate(_tmpCsrMembers, "email_id");
                    if (has_same_email) {
                        return res.status(200).json(success(false, res.statusCode, "CSR committee details has same email id.", { tab: 6, }));
                    }
                    var has_same_mobile = hasDuplicate(_tmpCsrMembers, "mobile_no");
                    if (has_same_mobile) {
                        return res.status(200).json(success(false, res.statusCode, "CSR committee details has same mobile no.", { tab: 6, }));
                    }
                }
            }

            // validate bank details

            if (_mod_enrolment_banks) {
                for (let aq = 0; updatedBankDetails && aq < updatedBankDetails.length; aq++) {
                    const ifsc_result = await fetchApigee.validate_ifsc_code(updatedBankDetails[aq].ifsc_code);
                    updatedBankDetails[aq].is_ifsc_valid = ifsc_result.status;
                    updatedBankDetails[aq].ifsc_response = ifsc_result.data;
                    const ifsc_error_msg = ifsc_result.msg; var _bank_name = ''; var _bank_branch = '';
                    if (!updatedBankDetails[aq].is_ifsc_valid) {
                        return res.status(200).json(success(false, res.statusCode, (ifsc_error_msg.length > 0 ? ifsc_error_msg : 'IFSC code verification failed.'), { tab: 3, }));
                    }
                    try {
                        const tempJson = JSON.parse(updatedBankDetails[aq].ifsc_response);
                        _bank_name = tempJson.bank;
                        _bank_branch = tempJson.branch;
                    } catch (_) {
                    }
                    updatedBankDetails[aq].bank_other = _bank_name;
                    updatedBankDetails[aq].branch_other = _bank_branch;
                    const acc_no_result = await fetchApigee.validate_bank_acc_number(updatedBankDetails[aq].account_no, updatedBankDetails[aq].account_type, updatedBankDetails[aq].ifsc_code);
                    updatedBankDetails[aq].is_account_valid = acc_no_result.status;
                    updatedBankDetails[aq].account_response = acc_no_result.data;
                    const account_no_error_msg = acc_no_result.msg;
                    if (!updatedBankDetails[aq].is_account_valid) {
                        return res.status(200).json(success(false, res.statusCode, (account_no_error_msg.length > 0 ? account_no_error_msg : 'Bank account verification failed.'), { tab: 3, }));
                    }
                }
            }

            // Uploading documents to GCP

            var entityDocsModified = [];
            if (_mod_enrolment_document) {
                for (let i = 0; documentRequired && i < documentRequired.length; i++) {
                    const file_name_to_check = 'doc_' + documentRequired[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    if (is_file_exists) {
                        try {
                            const gcp_file_path = 'modify/' + file_json_data.filename;
                            const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                            entityDocsModified.push({
                                document_id: documentRequired[i].document_id,
                                original_file_name: file_json_data.originalname,
                                new_file_name: file_json_data.filename,
                                gcp_response_data: JSON.stringify(gcpResp),
                                gcp_file_path: gcp_file_path,
                                to_delete: false,
                            });
                        } catch (gErr) {
                            try { _logger.error(gErr.stack); } catch (_) { }
                            for (let dd = 0; entityDocsModified && dd < entityDocsModified.length; dd++) {
                                try { await cloudStorageModule.DeleteFile(entityDocsModified[dd].gcp_file_path); } catch (_) { }
                            }
                            return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, { tab: 3, }));
                        }
                    } else {
                        var is_doc_to_delete = false;
                        for (let dd = 0; _docs_to_delete && dd < _docs_to_delete.length; dd++) {
                            if (_docs_to_delete[dd].toString() == documentRequired[i].document_id.toString()) {
                                is_doc_to_delete = true; break;
                            }
                        }
                        for (let td = 0; document_uploaded && td < document_uploaded.length; td++) {
                            if (document_uploaded[td].document_id.toString() == documentRequired[i].document_id.toString()) {
                                if (is_doc_to_delete) {
                                    entityDocsModified.push({
                                        document_id: document_uploaded[td].document_id,
                                        original_file_name: document_uploaded[td].file_name,
                                        new_file_name: document_uploaded[td].new_name,
                                        gcp_response_data: '',
                                        gcp_file_path: document_uploaded[td].file_path,
                                        to_delete: true,
                                    });
                                }
                                break;
                            }
                        }
                    }
                }
            }

            // Uploading user document to GCP

            var adminDocsModified = [];
            if (_mod_admin_document) {
                for (let i = 0; user_docs_list && i < user_docs_list.length; i++) {
                    const file_name_to_check = 'user_doc_' + user_docs_list[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    if (is_file_exists) {
                        try {
                            const gcp_file_path = 'modify/' + file_json_data.filename;
                            const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                            adminDocsModified.push({
                                document_id: user_docs_list[i].document_id,
                                original_file_name: file_json_data.originalname,
                                new_file_name: file_json_data.filename,
                                gcp_response_data: JSON.stringify(gcpResp),
                                gcp_file_path: gcp_file_path,
                                to_delete: false,
                            });
                        } catch (gErr) {
                            try { _logger.error(gErr.stack); } catch (_) { }
                            for (let dd = 0; adminDocsModified && dd < adminDocsModified.length; dd++) {
                                try { await cloudStorageModule.DeleteFile(adminDocsModified[dd].gcp_file_path); } catch (_) { }
                            }
                            return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, { tab: 4, }));
                        }
                    } else {
                        var is_doc_to_delete = false;
                        for (let dd = 0; _admin_docs_to_delete && dd < _admin_docs_to_delete.length; dd++) {
                            if (_admin_docs_to_delete[dd].toString() == user_docs_list[i].document_id.toString()) {
                                is_doc_to_delete = true; break;
                            }
                        }
                        for (let td = 0; user_docs_uploaded && td < user_docs_uploaded.length; td++) {
                            if (user_docs_uploaded[td].document_id.toString() == user_docs_list[i].document_id.toString()) {
                                if (is_doc_to_delete) {
                                    adminDocsModified.push({
                                        document_id: user_docs_uploaded[td].document_id,
                                        original_file_name: user_docs_uploaded[td].file_name,
                                        new_file_name: user_docs_uploaded[td].new_name,
                                        gcp_response_data: '',
                                        gcp_file_path: user_docs_uploaded[td].file_path,
                                        to_delete: true,
                                    });
                                }
                                break;
                            }
                        }
                    }
                }
            }

            // Uploading CSR Policy document to GCP

            var csrPolicyDocsModified = [];
            if (_mod_csr_company) {
                for (let i = 0; csr_policy_docs_list && i < csr_policy_docs_list.length; i++) {
                    const file_name_to_check = 'csr_doc_' + csr_policy_docs_list[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    if (is_file_exists) {
                        try {
                            const gcp_file_path = 'modify/' + file_json_data.filename;
                            const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                            csrPolicyDocsModified.push({
                                document_id: csr_policy_docs_list[i].document_id,
                                original_file_name: file_json_data.originalname,
                                new_file_name: file_json_data.filename,
                                gcp_response_data: JSON.stringify(gcpResp),
                                gcp_file_path: gcp_file_path,
                                to_delete: false,
                            });
                        } catch (gErr) {
                            try { _logger.error(gErr.stack); } catch (_) { }
                            for (let dd = 0; csrPolicyDocsModified && dd < csrPolicyDocsModified.length; dd++) {
                                try { await cloudStorageModule.DeleteFile(csrPolicyDocsModified[dd].gcp_file_path); } catch (_) { }
                            }
                            return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, { tab: 6, }));
                        }
                    } else {
                        var is_doc_to_delete = false;
                        for (let dd = 0; _csr_policy_docs_to_delete && dd < _csr_policy_docs_to_delete.length; dd++) {
                            if (_csr_policy_docs_to_delete[dd].toString() == csr_policy_docs_list[i].document_id.toString()) {
                                is_doc_to_delete = true; break;
                            }
                        }
                        for (let td = 0; csr_policy_docs_uploaded && td < csr_policy_docs_uploaded.length; td++) {
                            if (csr_policy_docs_uploaded[td].document_id.toString() == csr_policy_docs_list[i].document_id.toString()) {
                                if (is_doc_to_delete) {
                                    csrPolicyDocsModified.push({
                                        document_id: csr_policy_docs_uploaded[td].document_id,
                                        original_file_name: csr_policy_docs_uploaded[td].file_name,
                                        new_file_name: csr_policy_docs_uploaded[td].new_name,
                                        gcp_response_data: '',
                                        gcp_file_path: csr_policy_docs_uploaded[td].file_path,
                                        to_delete: true,
                                    });
                                }
                                break;
                            }
                        }
                    }
                }
            }


            var ip = ''; try { const clientIp = requestIp.getClientIp(req); ip = clientIp; } catch { }
            var user_agent = req.headers['user-agent'];
            var os_name = ''; try { const result = detector.detect(user_agent); os_name = result.os.name; } catch (e) { }

            // Validation completed and start inserting records
            const transaction = await db.sequelize.transaction();
            try {
                const _queryModInsert = `INSERT INTO modify_master(ip_address, user_agent, detected_os_name, account_id, user_id, reg_id, request_date, request_status, 
                mod_initiator_user, mod_company_basic, mod_company_address, mod_enrolment_identification, mod_enrolment_document, mod_enrolment_banks, 
                mod_admin_basic, mod_admin_perm_addr, mod_admin_curr_addr, mod_admin_document, mod_board_member, mod_csr_company, mod_csr_committee, 
                first_name, middle_name, last_name, pan_no, pan_no_validated, pan_no_valid_date, pan_no_response, 
                company_name, registered_as_id, org_type_id, parent_org_id, address_1, address_2, address_3, country_id, state_id, district_id, 
                block_id, pin_code, contact_no, 
                company_pan_no, company_pan_no_validated, company_pan_no_valid_date, company_pan_no_response, gstin_no, gstin_no_validated, gstin_no_valid_date, 
                gstin_no_response, cin_no, cin_no_validated, cin_no_valid_date, cin_no_response, registration_no, it_80g_reg_no, it_12a_reg_no, darpan_reg_no, 
                mca_csr_f1_reg_no, fcra_no_with_status, fcra_no_status, fin_audit_rpt_filed, brief_csr_policy, 
                acc_first_name, acc_middle_name, acc_last_name, acc_design_id, acc_pan_no, acc_pan_no_validated, acc_pan_no_valid_date, acc_pan_no_response, 
                acc_pa_address1, acc_pa_address2, acc_pa_address3, acc_pa_country_id, acc_pa_state_id, acc_pa_district_id, acc_pa_block_id, acc_pa_pin_code, acc_ca_same_pa, 
                acc_ca_address1, acc_ca_address2, acc_ca_address3, acc_ca_country_id, acc_ca_state_id, acc_ca_district_id, acc_ca_block_id, acc_ca_pin_code) 
            
                VALUES(:ip_address, :user_agent, :detected_os_name, :account_id, :user_id, :reg_id, :request_date, :request_status, 
                    :mod_initiator_user, :mod_company_basic, :mod_company_address, :mod_enrolment_identification, :mod_enrolment_document, :mod_enrolment_banks, 
                    :mod_admin_basic, :mod_admin_perm_addr, :mod_admin_curr_addr, :mod_admin_document, :mod_board_member, :mod_csr_company, :mod_csr_committee, 
                    :first_name, :middle_name, :last_name, :pan_no, :pan_no_validated, :pan_no_valid_date, :pan_no_response, 
                    :company_name, :registered_as_id, :org_type_id, :parent_org_id, :address_1, :address_2, :address_3, :country_id, :state_id, :district_id, 
                    :block_id, :pin_code, :contact_no, 
                    :company_pan_no, :company_pan_no_validated, :company_pan_no_valid_date, :company_pan_no_response, :gstin_no, :gstin_no_validated, :gstin_no_valid_date, 
                    :gstin_no_response, :cin_no, :cin_no_validated, :cin_no_valid_date, :cin_no_response, :registration_no, :it_80g_reg_no, :it_12a_reg_no, :darpan_reg_no, 
                    :mca_csr_f1_reg_no, :fcra_no_with_status, :fcra_no_status, :fin_audit_rpt_filed, :brief_csr_policy, 
                    :acc_first_name, :acc_middle_name, :acc_last_name, :acc_design_id, :acc_pan_no, :acc_pan_no_validated, :acc_pan_no_valid_date, :acc_pan_no_response, 
                    :acc_pa_address1, :acc_pa_address2, :acc_pa_address3, :acc_pa_country_id, :acc_pa_state_id, :acc_pa_district_id, :acc_pa_block_id, :acc_pa_pin_code, :acc_ca_same_pa, 
                    :acc_ca_address1, :acc_ca_address2, :acc_ca_address3, :acc_ca_country_id, :acc_ca_state_id, :acc_ca_district_id, :acc_ca_block_id, :acc_ca_pin_code)
            RETURNING "modify_id", "unique_id"`;
                const _replacementsModInsert = {
                    ip_address: ip, user_agent: user_agent, detected_os_name: os_name,
                    account_id: req.token_data.account_id, user_id: entityData.user_id, reg_id: entityData.reg_id, request_date: new Date(), request_status: 0,

                    mod_initiator_user: _mod_initiator_user, mod_company_basic: _mod_company_basic, mod_company_address: _mod_company_address, mod_enrolment_identification: _mod_enrolment_identification,
                    mod_enrolment_document: _mod_enrolment_document, mod_enrolment_banks: _mod_enrolment_banks, mod_admin_basic: _mod_admin_basic, mod_admin_perm_addr: _mod_admin_perm_addr,
                    mod_admin_curr_addr: _mod_admin_curr_addr, mod_admin_document: _mod_admin_document, mod_board_member: _mod_board_member, mod_csr_company: _mod_csr_company, mod_csr_committee: _mod_csr_committee,

                    first_name: _first_name, middle_name: _middle_name, last_name: _last_name, pan_no: _pan_no,
                    pan_no_validated: pan_no_validated, pan_no_valid_date: pan_no_valid_date, pan_no_response: pan_no_response,

                    company_name: _company_name, registered_as_id: _registered_as_id, org_type_id: _org_type_id, parent_org_id: _parent_org_id,
                    address_1: _address_1, address_2: _address_2, address_3: _address_3, country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, pin_code: _pin_code, contact_no: _contact_no,

                    company_pan_no: _company_pan_no, company_pan_no_validated: company_pan_no_validated, company_pan_no_valid_date: company_pan_no_valid_date,
                    company_pan_no_response: company_pan_no_response, gstin_no: _gstin_no, gstin_no_validated: gstin_no_validated, gstin_no_valid_date: gstin_no_valid_date,
                    gstin_no_response: gstin_no_response, cin_no: _cin_no, cin_no_validated: cin_no_validated, cin_no_valid_date: cin_no_valid_date, cin_no_response: cin_no_response,
                    registration_no: _registration_no, it_80g_reg_no: _it_80g_reg_no, it_12a_reg_no: _it_12a_reg_no, darpan_reg_no: _darpan_reg_no, mca_csr_f1_reg_no: _mca_csr_f1_reg_no,
                    fcra_no_with_status: _fcra_no_with_status, fcra_no_status: _fcra_no_status, fin_audit_rpt_filed: _fin_audit_rpt_filed, brief_csr_policy: _brief_csr_policy,

                    acc_first_name: _acc_first_name, acc_middle_name: _acc_middle_name, acc_last_name: _acc_last_name, acc_design_id: _acc_design_id, acc_pan_no: _acc_pan_no,
                    acc_pan_no_validated: acc_pan_no_validated, acc_pan_no_valid_date: acc_pan_no_valid_date, acc_pan_no_response: acc_pan_no_response,
                    acc_pa_address1: _acc_pa_address1, acc_pa_address2: _acc_pa_address2, acc_pa_address3: _acc_pa_address3, acc_pa_country_id: _acc_pa_country_id,
                    acc_pa_state_id: _acc_pa_state_id, acc_pa_district_id: _acc_pa_district_id, acc_pa_block_id: _acc_pa_block_id, acc_pa_pin_code: _acc_pa_pin_code, acc_ca_same_pa: _acc_ca_same_pa,
                    acc_ca_address1: _acc_ca_address1, acc_ca_address2: _acc_ca_address2, acc_ca_address3: _acc_ca_address3, acc_ca_country_id: _acc_ca_country_id, acc_ca_state_id: _acc_ca_state_id,
                    acc_ca_district_id: _acc_ca_district_id, acc_ca_block_id: _acc_ca_block_id, acc_ca_pin_code: _acc_ca_pin_code,
                };
                const [rowModInsert] = await db.sequelize.query(_queryModInsert, { replacements: _replacementsModInsert, type: QueryTypes.INSERT, returning: true });
                const modify_id = (rowModInsert && rowModInsert.length > 0 && rowModInsert[0] ? rowModInsert[0].modify_id : 0);
                if (modify_id > 0) {
                    if (_mod_enrolment_identification) {
                        for (let aq = 0; _expertise_area_ids && aq < _expertise_area_ids.length; aq++) {
                            const _queryModExpArea = `INSERT INTO modify_expertise(modify_id, expertise_area_id) VALUES(?, ?)`;
                            await db.sequelize.query(_queryModExpArea, { replacements: [modify_id, _expertise_area_ids[aq]], type: QueryTypes.INSERT });
                        }
                        for (let aq = 0; _services && aq < _services.length; aq++) {
                            const eleSer = _services[aq];
                            const _queryModServ = `INSERT INTO modify_services(modify_id, u_serv_id, head_id, category_id, sub_cat_id, range_size, price) VALUES(?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModServ, { replacements: [modify_id, eleSer.u_serv_id, eleSer.head_id, eleSer.category_id, eleSer.id, eleSer.size, eleSer.price], type: QueryTypes.INSERT });
                        }
                    }
                    if (_mod_enrolment_document) {
                        for (let aq = 0; entityDocsModified && aq < entityDocsModified.length; aq++) {
                            const eleEntityDoc = entityDocsModified[aq];
                            const _queryModEntDoc = `INSERT INTO modify_document(modify_id, document_id, original_file_name, new_file_name, gcp_file_path, gcp_response_data, uploaded_date, to_delete) VALUES(?, ?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModEntDoc, { replacements: [modify_id, eleEntityDoc.document_id, eleEntityDoc.original_file_name, eleEntityDoc.new_file_name, eleEntityDoc.gcp_file_path, eleEntityDoc.gcp_response_data, new Date(), eleEntityDoc.to_delete], type: QueryTypes.INSERT });
                        }
                    }
                    if (_mod_enrolment_banks) {
                        for (let aq = 0; updatedBankDetails && aq < updatedBankDetails.length; aq++) {
                            const eleBank = updatedBankDetails[aq];
                            const _queryModBank = `INSERT INTO modify_bank(modify_id, ubank_id, account_no, re_account_no, account_type, ifsc_code, is_ifsc_valid, ifsc_response, bank_other, branch_other, is_account_valid, account_response) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModBank, {
                                replacements: [modify_id, eleBank.ubank_id, eleBank.account_no, eleBank.re_account_no, eleBank.account_type, eleBank.ifsc_code, eleBank.is_ifsc_valid, eleBank.ifsc_response, eleBank.bank_other, eleBank.branch_other, eleBank.is_account_valid, eleBank.account_response], type: QueryTypes.INSERT
                            });
                        }
                    }

                    if (_mod_admin_document) {
                        for (let aq = 0; adminDocsModified && aq < adminDocsModified.length; aq++) {
                            const eleAdmDoc = adminDocsModified[aq];
                            const _queryModAdmDoc = `INSERT INTO modify_acc_doc_upload(modify_id, document_id, original_file_name, new_file_name, gcp_file_path, gcp_response_data, uploaded_date, to_delete) VALUES(?, ?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModAdmDoc, { replacements: [modify_id, eleAdmDoc.document_id, eleAdmDoc.original_file_name, eleAdmDoc.new_file_name, eleAdmDoc.gcp_file_path, eleAdmDoc.gcp_response_data, new Date(), eleAdmDoc.to_delete], type: QueryTypes.INSERT });
                        }
                    }
                    if (_mod_board_member) {
                        for (let aq = 0; updatedBoardMembers && aq < updatedBoardMembers.length; aq++) {
                            const eleBoardMem = updatedBoardMembers[aq];
                            const _queryModBoardMem = `INSERT INTO modify_board_member(modify_id, member_id, full_name, designation, email_id, mobile_ccc, mobile_no) VALUES(?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModBoardMem, { replacements: [modify_id, eleBoardMem.member_id, eleBoardMem.full_name, eleBoardMem.designation, eleBoardMem.email_id, eleBoardMem.mobile_ccc, eleBoardMem.mobile_no], type: QueryTypes.INSERT });
                        }
                    }

                    if (_mod_csr_company) {
                        for (let aq = 0; csrPolicyDocsModified && aq < csrPolicyDocsModified.length; aq++) {
                            const eleCsrDoc = csrPolicyDocsModified[aq];
                            const _queryModEntDoc = `INSERT INTO modify_csr_policy_docs(modify_id, document_id, original_file_name, new_file_name, gcp_file_path, gcp_response_data, uploaded_date, to_delete) VALUES(?, ?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModEntDoc, { replacements: [modify_id, eleCsrDoc.document_id, eleCsrDoc.original_file_name, eleCsrDoc.new_file_name, eleCsrDoc.gcp_file_path, eleCsrDoc.gcp_response_data, new Date(), eleCsrDoc.to_delete], type: QueryTypes.INSERT });
                        }
                    }
                    if (_mod_csr_committee) {
                        for (let aq = 0; updatedCsrMembers && aq < updatedCsrMembers.length; aq++) {
                            const eleCsrMem = updatedCsrMembers[aq];
                            const _queryModCsrMem = `INSERT INTO modify_csr_member(modify_id, member_id, full_name, designation, email_id, mobile_ccc, mobile_no) VALUES(?, ?, ?, ?, ?, ?, ?)`;
                            await db.sequelize.query(_queryModCsrMem, { replacements: [modify_id, eleCsrMem.member_id, eleCsrMem.full_name, eleCsrMem.designation, eleCsrMem.email_id, eleCsrMem.mobile_ccc, eleCsrMem.mobile_no], type: QueryTypes.INSERT });
                        }
                    }
                    await transaction.commit();
                    return res.status(200).json(success(true, res.statusCode, update_profile_success_msg, null));
                } else {
                    await transaction.rollback();
                    return res.status(200).json(success(false, res.statusCode, "Unable to add record, Please try again.", null));
                }
            } catch (_err) {
                await transaction.rollback();
                try { _logger.error(_err.stack); } catch (_) { }
                return res.status(200).json(success(false, res.statusCode, err.message, null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const profile_request_cancel = async (req, res, next) => {
    const { } = req.body;
    try {
        const entityData = await profile_validation_data(req.token_data.user_id);
        if (entityData) {
            const is_admin = entityData.is_admin && entityData.is_admin == true ? true : false;
            if (!is_admin) {
                return res.status(200).json(success(false, res.statusCode, "Only admin accounts are allowed to update profile.", null));
            }

            const _queryCheckMod = `SELECT modify_id FROM modify_master WHERE reg_id = ? AND COALESCE(request_status, 0) = 0`;
            const rowCheckMod = await db.sequelize.query(_queryCheckMod, { replacements: [entityData.reg_id], type: QueryTypes.SELECT });
            if (rowCheckMod && rowCheckMod.length > 0) {
                var _remark = 'Cancelled by user.'
                const _query2 = `UPDATE modify_master SET request_status = 3, cancelled_by = ?, cancelled_date = ?, cancel_remark = ? WHERE modify_id = ?`;
                const _replacements2 = [req.token_data.account_id, new Date(), _remark, rowCheckMod[0].modify_id];
                const [, i] = await db.sequelize.query(_query2, { replacements: _replacements2, type: QueryTypes.UPDATE });
                if (i > 0) {
                    return res.status(200).json(success(true, res.statusCode, "Cancelled successfully.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to update status, Please try again", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Profile edit request is not available.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, "Profile details not found, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

const enrolment_document_get_url = async (req, res, next) => {
    const { modify_id, file_id, document_id } = req.body;
    try {
        const _modify_id = modify_id != null && validator.isNumeric(modify_id.toString()) ? BigInt(modify_id) : 0;
        const _file_id = file_id != null && validator.isNumeric(file_id.toString()) ? BigInt(file_id) : 0;
        const _document_id = document_id != null && validator.isNumeric(document_id.toString()) ? BigInt(document_id) : 0;

        const resp = await entityDataModule.entity_document_signed_url(_modify_id, _file_id, _document_id);

        return res.status(200).json(success(true, res.statusCode, "", resp));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const admin_account_doc_get_url = async (req, res, next) => {
    const { modify_id, file_id, document_id } = req.body;
    try {
        const _modify_id = modify_id != null && validator.isNumeric(modify_id.toString()) ? BigInt(modify_id) : 0;
        const _file_id = file_id != null && validator.isNumeric(file_id.toString()) ? BigInt(file_id) : 0;
        const _document_id = document_id != null && validator.isNumeric(document_id.toString()) ? BigInt(document_id) : 0;

        const resp = await entityDataModule.user_acc_document_signed_url(_modify_id, _file_id, _document_id);

        return res.status(200).json(success(true, res.statusCode, "", resp));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const csr_policy_doc_get_url = async (req, res, next) => {
    const { modify_id, file_id, document_id } = req.body;
    try {
        const _modify_id = modify_id != null && validator.isNumeric(modify_id.toString()) ? BigInt(modify_id) : 0;
        const _file_id = file_id != null && validator.isNumeric(file_id.toString()) ? BigInt(file_id) : 0;
        const _document_id = document_id != null && validator.isNumeric(document_id.toString()) ? BigInt(document_id) : 0;

        const resp = await entityDataModule.csr_docs_document_signed_url(_modify_id, _file_id, _document_id);

        return res.status(200).json(success(true, res.statusCode, "", resp));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

const search_corporate = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_CORPORATE_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 2;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_foundation = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_FOUNDATION_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 3;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_philanthropist = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_PHILANTHROPIST_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 4;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_implementing_agency = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_IA_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 5;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_accreditation_agency = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_AA_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 6;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_vendor = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_VENDOR_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 7;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const search_consultant = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.ED_CONSULTANT_SEARCH, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _entity_id = 8;
            const results = await entityDataModule.search_entities(row[0].reg_id, _entity_id, page_no, search_text, country_id, state_id, district_id, block_id);
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const view_profile = async (req, res, next) => {
    const { id } = req.body;
    try {
        const prm_1 = utils.has_entity_permission(entityMenuItems.ED_CORPORATE_SEARCH, req.token_data.permissions);
        const prm_2 = utils.has_entity_permission(entityMenuItems.ED_FOUNDATION_SEARCH, req.token_data.permissions);
        const prm_3 = utils.has_entity_permission(entityMenuItems.ED_IA_SEARCH, req.token_data.permissions);
        const prm_4 = utils.has_entity_permission(entityMenuItems.ED_AA_SEARCH, req.token_data.permissions);
        const prm_5 = utils.has_entity_permission(entityMenuItems.ED_VENDOR_SEARCH, req.token_data.permissions);
        const prm_6 = utils.has_entity_permission(entityMenuItems.ED_CONSULTANT_SEARCH, req.token_data.permissions);
        const prm_7 = utils.has_entity_permission(entityMenuItems.ED_PHILANTHROPIST_SEARCH, req.token_data.permissions);
        const prm_8 = utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions);

        if (prm_1 || prm_2 || prm_3 || prm_4 || prm_5 || prm_6 || prm_7 || prm_8) {
            var _id = id && id.length > 0 ? id : "";
            if (utils.isUUID(_id)) {
                const _query0 = `SELECT um.reg_id, um.entity_id, etm.entity_name, um.reg_no, um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.pan_no,
                um.company_name, rt.reg_type_name AS registered_as, pom.org_type_name AS parent_org_type,
                COALESCE((SELECT tmp.company_name FROM user_master tmp WHERE tmp.reg_id = COALESCE(um.parent_org_id, 0)), '') AS parent_org_name,
                um.address_1, um.address_2, um.address_3, c.country_name, s.state_name, d.district_name, b.block_name, um.pin_code, um.contact_no,
                um.company_pan_no, um.gstin_no, um.cin_no, um.registration_no, um.it_80g_reg_no, um.it_12a_reg_no, um.darpan_reg_no, 
                um.mca_csr_f1_reg_no, um.fcra_no_with_status, um.fcra_no_status, um.fin_audit_rpt_filed, um.form_static_fields_json
                FROM user_master um LEFT OUTER JOIN entity_reg_type_mast rt ON um.registered_as_id = rt.reg_type_id
                LEFT OUTER JOIN parent_orgs_mast pom ON um.org_type_id = pom.org_type_id LEFT OUTER JOIN entity_type etm ON um.entity_id = etm.entity_id
                LEFT OUTER JOIN countries c ON um.country_id = c.country_id LEFT OUTER JOIN states s ON um.state_id = s.state_id 
                LEFT OUTER JOIN districts d ON um.district_id = d.district_id LEFT OUTER JOIN blocks b ON um.block_id = b.block_id
                WHERE um.unique_id = ? AND um.is_deleted = false`;
                const row0 = await db.sequelize.query(_query0, { replacements: [_id], type: QueryTypes.SELECT });
                if (!row0 || row0.length <= 0) {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Entity registration details not found, Please try again.", null));
                }
                var form_static_fields = {};
                if (row0[0].form_static_fields_json && row0[0].form_static_fields_json.length > 0) {
                    try {
                        form_static_fields = JSON.parse(row0[0].form_static_fields_json);
                    } catch (_) {
                        form_static_fields = await registrationModule.registration_static_fields(row0[0].entity_id);
                    }
                } else {
                    form_static_fields = await registrationModule.registration_static_fields(row0[0].entity_id);
                }

                var expertise_area = await entityDataModule.expertise_area_names(row0[0].reg_id);

                var documents = [];
                const _query2 = `SELECT ud.doc_file_id, dm.doc_name, ud.original_file_name, ud.new_file_name, ud.uploaded_date
                FROM user_document ud INNER JOIN document_mast dm ON ud.document_id = dm.document_id
                WHERE ud.reg_id = ? AND ud.is_deleted = false`;
                const row2 = await db.sequelize.query(_query2, { replacements: [row0[0].reg_id], type: QueryTypes.SELECT });
                for (let i = 0; row2 && i < row2.length; i++) {
                    documents.push({
                        file_id: row2[i].doc_file_id,
                        doc_name: row2[i].doc_name,
                        file_name: row2[i].original_file_name,
                        new_name: row2[i].new_file_name,
                    });
                }
                var services = [];
                const _query3 = `SELECT h.head_name, c.category_name, sc.sub_cat_name, us.range_size, us.price 
                FROM user_services us INNER JOIN services_sub_cat sc ON us.sub_cat_id = sc.sub_cat_id
                LEFT OUTER JOIN services_category c ON sc.category_id = c.category_id
                LEFT OUTER JOIN services_head h ON c.head_id = h.head_id
                WHERE us.reg_id = ? AND us.is_deleted = false`;
                const row3 = await db.sequelize.query(_query3, { replacements: [row0[0].reg_id], type: QueryTypes.SELECT });
                for (let i = 0; row3 && i < row3.length; i++) {
                    const serEle = row3[i];
                    const price = serEle.price != null && validator.isNumeric(serEle.price) ? parseFloat(serEle.price) : 0;
                    services.push({
                        head: serEle.head_name,
                        category: serEle.category_name,
                        sub_cat: serEle.sub_cat_name,
                        range_size: serEle.range_size,
                        price: price,
                    });
                }

                const bankAccounts = await entityDataModule.bank_accounts(row0[0].reg_id);

                var user_accounts = [];
                const _queryUserAcc = `SELECT ua.first_name, ua.middle_name, ua.last_name, ua.email_id, ua.mobile_no, dm.design_name
                FROM user_account ua LEFT OUTER JOIN designation_mast dm ON ua.design_id = dm.design_id
                WHERE ua.reg_id = ? AND ua.is_deleted = false`;
                const rowUserAcc = await db.sequelize.query(_queryUserAcc, { replacements: [row0[0].reg_id], type: QueryTypes.SELECT });
                for (let i = 0; rowUserAcc && i < rowUserAcc.length; i++) {
                    const eleUserAcc = rowUserAcc[i];
                    user_accounts.push({
                        first_name: eleUserAcc.first_name,
                        middle_name: eleUserAcc.middle_name,
                        last_name: eleUserAcc.last_name,
                        email_id: eleUserAcc.email_id,
                        mobile_no: eleUserAcc.mobile_no,
                        designation: eleUserAcc.design_name,
                    });
                }

                const results = {
                    entity_id: row0[0].entity_id,
                    entity_name: row0[0].entity_name,
                    reg_no: (row0[0].reg_no ? row0[0].reg_no : ""),
                    first_name: (row0[0].first_name ? row0[0].first_name : ""),
                    middle_name: (row0[0].middle_name ? row0[0].middle_name : ""),
                    last_name: (row0[0].last_name ? row0[0].last_name : ""),
                    email_id: (row0[0].email_id ? row0[0].email_id : ""),
                    mobile_no: (row0[0].mobile_no ? row0[0].mobile_no : ""),
                    pan_no: (row0[0].pan_no ? row0[0].pan_no : ""),
                    company_name: (row0[0].company_name ? row0[0].company_name : ""),
                    registered_as: (row0[0].registered_as ? row0[0].registered_as : ""),
                    parent_org_type: (row0[0].parent_org_type ? row0[0].parent_org_type : ""),
                    parent_org_name: (row0[0].parent_org_name ? row0[0].parent_org_name : ""),
                    address_1: (row0[0].address_1 ? row0[0].address_1 : ""),
                    address_2: (row0[0].address_2 ? row0[0].address_2 : ""),
                    address_3: (row0[0].address_3 ? row0[0].address_3 : ""),
                    country_name: (row0[0].country_name ? row0[0].country_name : ""),
                    state_name: (row0[0].state_name ? row0[0].state_name : ""),
                    district_name: (row0[0].district_name ? row0[0].district_name : ""),
                    block_name: (row0[0].block_name ? row0[0].block_name : ""),
                    pin_code: (row0[0].pin_code ? row0[0].pin_code : ""),
                    contact_no: (row0[0].contact_no ? row0[0].contact_no : ""),
                    company_pan_no: (row0[0].company_pan_no ? row0[0].company_pan_no : ""),
                    gstin_no: (row0[0].gstin_no ? row0[0].gstin_no : ""),
                    cin_no: (row0[0].cin_no ? row0[0].cin_no : ""),
                    registration_no: (row0[0].registration_no ? row0[0].registration_no : ""),
                    it_80g_reg_no: (row0[0].it_80g_reg_no ? row0[0].it_80g_reg_no : ""),
                    it_12a_reg_no: (row0[0].it_12a_reg_no ? row0[0].it_12a_reg_no : ""),
                    darpan_reg_no: (row0[0].darpan_reg_no ? row0[0].darpan_reg_no : ""),
                    mca_csr_f1_reg_no: (row0[0].mca_csr_f1_reg_no ? row0[0].mca_csr_f1_reg_no : ""),
                    fcra_no_with_status: (row0[0].fcra_no_with_status ? row0[0].fcra_no_with_status : ""),
                    fcra_no_status: (row0[0].fcra_no_status ? row0[0].fcra_no_status : false),
                    fin_audit_rpt_filed: (row0[0].fin_audit_rpt_filed ? row0[0].fin_audit_rpt_filed : false),
                    expertise_area: expertise_area,
                    documents: documents,
                    services: services,
                    bank_accounts: bankAccounts,
                    user_accounts: user_accounts,
                    form_static_fields: form_static_fields,
                };
                return res.status(200).json(success(true, res.statusCode, "Success.", results));
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid entity id, Please try again.", null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/
const project_image_upload_param_name = 'project_image';
const project_image_upload_file_size = 500; // IN Kb
const project_image_symbol_file_allowed = ['.jpg', '.jpeg', '.png', '.bmp'];

const project_monitoring_upload_file_size = 1000; // IN Kb
const project_monitoring_upload_file_allowed = ['.jpg', '.jpeg', '.png', '.bmp'];


const project_create_form_data = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0) {
                if (utils.isUUID(_project_id)) {
                    const _querySelProj = `SELECT project_id, reg_id, is_floated,
                    project_no, project_name, project_cost, start_date, end_date, purpose_id, funding_option_id, thematic_id, proj_objective,
                    proj_summary, beneficiary_detail, mapped_under, sdg_goals, esg_objective, country_id, state_id, district_id, block_id, pin_code,
                    incharge_full_name, incharge_designation, incharge_email_id, incharge_mobile_ccc, incharge_mobile_no, visible_to_all_ia, visible_ia_list,
                    proj_img_file_name, proj_img_new_name, proj_img_file_path
                    FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                    const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                    if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                        if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                            return res.status(200).json(success(false, res.statusCode, 'Can not edit floated project.', null));
                        }
                        oldProjData = rowSelProj[0];
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid project selected to edit.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid project selected to edit.', null));
                }
            }

            const purpose_ignore = await entityDataModule.project_purpose_ignore_list(row[0].entity_id);

            var project_purpose = [];
            for (let i = 0; constants.project_purpose && i < constants.project_purpose.length; i++) {
                var can_ignore = false;
                for (let p = 0; purpose_ignore && p < purpose_ignore.length; p++) {
                    if (purpose_ignore[p].toString() == constants.project_purpose[i].id.toString()) {
                        can_ignore = true; break;
                    }
                }
                if (!can_ignore) {
                    project_purpose.push({
                        id: constants.project_purpose[i].id,
                        name: constants.project_purpose[i].name,
                        document: [],
                    });
                }
            }
            for (let o = 0; project_purpose && o < project_purpose.length; o++) {
                const documents = await commonModule.project_rfp_document_list(project_purpose[o].id);
                project_purpose[o].document = documents;
            }
            var funding_option_list = constants.project_funding_option;
            const thematic_area = await commonModule.project_thematic_area_list();
            var mapped_under_list = constants.project_mapped_under;
            const sdg_goals_list = await commonModule.project_sdg_goals_list();

            var countries = await commonModule.country_dropdown();
            var my_country_id = 0; var my_state_id = 0; var my_district_id = 0; var my_block_id = 0;
            if (oldProjData != null) {
                my_country_id = (oldProjData.country_id && validator.isNumeric(oldProjData.country_id.toString())) ? BigInt(oldProjData.country_id) : 0;
                my_state_id = (oldProjData.state_id && validator.isNumeric(oldProjData.state_id.toString())) ? BigInt(oldProjData.state_id) : 0;
                my_district_id = (oldProjData.district_id && validator.isNumeric(oldProjData.district_id.toString())) ? BigInt(oldProjData.district_id) : 0;
                my_block_id = (oldProjData.block_id && validator.isNumeric(oldProjData.block_id.toString())) ? BigInt(oldProjData.block_id) : 0;
            }
            var default_country_id = 0;
            if (my_country_id > 0) {
                default_country_id = my_country_id;
                for (let i = 0; countries && i < countries.length; i++) {
                    if (countries[i].is_default && countries[i].is_default == true) { countries[i].is_default = false; }
                    if (countries[i].country_id.toString() == my_country_id.toString()) { countries[i].is_default = true; }
                }
            } else {
                for (let i = 0; countries && i < countries.length; i++) {
                    if (countries[i].is_default && countries[i].is_default == true) { default_country_id = countries[i].country_id; break; }
                }
            }
            var states = []; if (default_country_id > 0) { states = await commonModule.state_dropdown(default_country_id); }
            var default_state_id = 0;
            for (let i = 0; states && i < states.length; i++) {
                if (states[i].state_id.toString() == my_state_id.toString()) { default_state_id = my_state_id; break; }
            }
            var districts = []; if (default_state_id > 0) { districts = await commonModule.district_dropdown(default_state_id); }
            var default_district_id = 0;
            for (let i = 0; districts && i < districts.length; i++) {
                if (districts[i].district_id.toString() == my_district_id.toString()) { default_district_id = my_district_id; break; }
            }
            var blocks = []; if (default_district_id > 0) { blocks = await commonModule.block_dropdown(default_district_id); }

            var my_scope_of_work = [];
            if (oldProjData != null) {
                my_scope_of_work = await entityDataModule.project_scope_of_work_data(oldProjData.project_id);
            }
            var questionnaire = [];
            if (oldProjData != null) {
                questionnaire = await entityDataModule.project_questionnaire_data(oldProjData.project_id);
                for (let i = 0; questionnaire && i < questionnaire.length; i++) {
                    try { questionnaire[i].max_score = parseFloat(questionnaire[i].max_score).toString(); } catch (_) { }
                    try { questionnaire[i].weightage = parseFloat(questionnaire[i].weightage).toString(); } catch (_) { }
                }
            }
            var document_uploaded = [];
            if (oldProjData != null) {
                document_uploaded = await entityDataModule.project_document_uploaded(oldProjData.project_id);
            }
            var visible_to_all_ia = true; var visible_to_ia_list = [];
            if (oldProjData != null) {
                visible_to_all_ia = oldProjData.visible_to_all_ia && oldProjData.visible_to_all_ia == true ? true : false;
                if (!visible_to_all_ia && oldProjData.visible_ia_list && oldProjData.visible_ia_list.length > 0) {
                    visible_to_ia_list = await entityDataModule.project_visible_to_ia_list(oldProjData.visible_ia_list);
                }
            }

            const mobile_ccc = await commonModule.country_calling_code();

            var dynamic_form_fields = await commonModule.project_dynamic_field_form();
            if (oldProjData != null) {
                const dyn_form_user_value = await commonModule.project_dynamic_field_values(oldProjData.project_id);
                for (let i = 0; dyn_form_user_value && i < dyn_form_user_value.length; i++) {
                    const eleVal = dyn_form_user_value[i];
                    for (let j = 0; dynamic_form_fields && j < dynamic_form_fields.length; j++) {
                        const eleFrm = dynamic_form_fields[j];
                        if (eleFrm.field_id.toString() == eleVal.field_id.toString()) {
                            eleFrm.user_value = eleVal.user_value;
                            break;
                        }
                    }
                }
            }

            for (let jj = 0; jj < dynamic_form_fields.length; jj++) {
                dynamic_form_fields[jj].user_value = '';
            }


            const results = {
                project_no: (oldProjData != null ? oldProjData.project_no : ""),
                project_name: (oldProjData != null ? oldProjData.project_name : ""),
                project_cost: (oldProjData != null ? (parseFloat(oldProjData.project_cost)).toString() : ""),
                proj_img_file_name: (oldProjData != null ? oldProjData.proj_img_file_name : ""),
                proj_img_new_name: (oldProjData != null ? oldProjData.proj_img_new_name : ""),
                proj_img_file_path: (oldProjData != null ? oldProjData.proj_img_file_path : ""),
                start_date: (oldProjData != null && oldProjData.start_date ? dateFormat(constants.textbox_date_api_format, oldProjData.start_date) : ""),
                end_date: (oldProjData != null && oldProjData.end_date ? dateFormat(constants.textbox_date_api_format, oldProjData.end_date) : ""),
                purpose_id: (oldProjData != null ? oldProjData.purpose_id : (project_purpose[0].id)),
                purpose_list: project_purpose,
                funding_option_id: (oldProjData != null ? oldProjData.funding_option_id : (funding_option_list[0].id)),
                funding_option_list: funding_option_list,
                thematic_id: (oldProjData != null ? oldProjData.thematic_id : 0),
                thematic_area: thematic_area,
                proj_objective: (oldProjData != null ? oldProjData.proj_objective : ""),
                proj_summary: (oldProjData != null ? oldProjData.proj_summary : ""),
                beneficiary_detail: (oldProjData != null ? oldProjData.beneficiary_detail : ""),
                mapped_under_id: (oldProjData != null ? oldProjData.mapped_under : (mapped_under_list[0].id)),
                mapped_under_list: mapped_under_list,
                sdg_goals_selected: (oldProjData != null && oldProjData.sdg_goals && oldProjData.sdg_goals.length > 0 ? oldProjData.sdg_goals : []),
                sdg_goals_list: sdg_goals_list,
                esg_objective: (oldProjData != null ? oldProjData.esg_objective : ""),
                country_id: default_country_id,
                country_list: countries,
                state_id: default_state_id,
                state_list: states,
                district_id: default_district_id,
                district_list: districts,
                block_id: my_block_id,
                block_list: blocks,
                pin_code: (oldProjData != null ? oldProjData.pin_code : ""),

                incharge_full_name: (oldProjData != null ? oldProjData.incharge_full_name : ""),
                incharge_designation: (oldProjData != null ? oldProjData.incharge_designation : ""),
                incharge_email_id: (oldProjData != null ? oldProjData.incharge_email_id : ""),
                incharge_mobile_ccc_selected: (oldProjData != null ? oldProjData.incharge_mobile_ccc : mobile_ccc[0]),
                mobile_ccc_list: mobile_ccc,
                incharge_mobile_no: (oldProjData != null ? oldProjData.incharge_mobile_no : ""),

                scope_of_work: my_scope_of_work,
                question_types: constants.project_question_types,
                questionnaire: questionnaire,
                document_uploaded: document_uploaded,
                visible_to_all_ia: visible_to_all_ia,
                visible_to_ia_list: visible_to_ia_list,

                project_image_upload_param_name: project_image_upload_param_name,
                project_image_upload_file_size: project_image_upload_file_size,
                project_image_symbol_file_allowed: project_image_symbol_file_allowed,

                dynamic_form_fields: dynamic_form_fields,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_create_search_ia = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            const _entity_id = 5;
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) {
                _sql_condition += ' AND (LOWER(um.reg_no) LIKE LOWER(:search_text) OR LOWER(um.email_id) LIKE LOWER(:search_text) OR ' +
                    ' LOWER(um.mobile_no) LIKE LOWER(:search_text) OR LOWER(um.company_name) LIKE LOWER(:search_text) OR LOWER(um.company_pan_no) LIKE LOWER(:search_text)) ';
            }
            if (_country_id > 0) { _sql_condition += ' AND um.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND um.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND um.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND um.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM user_master um WHERE um.reg_id <> :reg_id AND um.entity_id = :entity_id AND 
            um.is_deleted = false AND COALESCE(um.approve_status, 0) = 1 ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id,
                    entity_id: _entity_id,
                    search_text: '%' + _search_text + '%',
                    country_id: _country_id,
                    state_id: _state_id,
                    district_id: _district_id,
                    block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY um.reg_id DESC) AS sr_no,
            um.unique_id, um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.company_name, um.registration_no,
            rt.reg_type_name AS registered_as, c.country_name, s.state_name, d.district_name, b.block_name, um.pin_code,
            um.is_enabled, um.approve_status, um.approved_date, um.rejected_date
            FROM user_master um LEFT OUTER JOIN entity_reg_type_mast rt ON um.registered_as_id = rt.reg_type_id 
            LEFT OUTER JOIN countries c ON um.country_id = c.country_id LEFT OUTER JOIN states s ON um.state_id = s.state_id
            LEFT OUTER JOIN districts d ON um.district_id = d.district_id LEFT OUTER JOIN blocks b ON um.block_id = b.block_id
            WHERE um.reg_id <> :reg_id AND um.entity_id = :entity_id AND um.is_deleted = false AND COALESCE(um.approve_status, 0) = 1 
            ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id,
                    entity_id: _entity_id,
                    search_text: '%' + _search_text + '%',
                    country_id: _country_id,
                    state_id: _state_id,
                    district_id: _district_id,
                    block_id: _block_id,
                    page_size: parseInt(process.env.PAGINATION_SIZE),
                    page_no: _page_no,
                },
                type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    first_name: row1[i].first_name,
                    middle_name: row1[i].middle_name,
                    last_name: row1[i].last_name,
                    email_id: row1[i].email_id,
                    mobile_no: row1[i].mobile_no,
                    company_name: row1[i].company_name,
                    registered_as: row1[i].registered_as,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    registration_no: row1[i].registration_no,
                    is_enabled: row1[i].is_enabled,
                    approve_status: row1[i].approve_status,
                    approved_date: row1[i].approved_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].approved_date)) : "",
                    rejected_date: row1[i].rejected_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].rejected_date)) : "",
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_create_save_details = async (req, res, next) => {
    const {
        project_id, project_name, project_cost, start_date, end_date, purpose_id, funding_option, thematic_id, proj_objective, proj_summary,
        beneficiary_detail, mapped_under, sdg_goals, esg_objective, dynamic_values, country_id, state_id, district_id, block_id, pin_code,
        incharge_full_name, incharge_designation, incharge_email_id, incharge_mobile_ccc, incharge_mobile_no
    } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0) {
                if (utils.isUUID(_project_id)) {
                    const _querySelProj = `SELECT project_id, reg_id, proj_img_file_path, is_floated FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                    const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                    if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                        if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Can not update floated project.', null));
                        }
                        oldProjData = rowSelProj[0];
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
                }
            }
            const _project_name = (project_name && project_name.length > 0) ? project_name.trim() : "";
            if (_project_name.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter project name.", null));
            }
            if (_project_name.length > 0) {
                if (_project_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "Project name should not be less than 2 characters.", null));
                }
                if (_project_name.length > 100) {
                    return res.status(200).json(success(false, res.statusCode, "Project name should not be more than 100 characters.", null));
                }
            }
            const _queryCheProjName = `SELECT project_id FROM project_created WHERE reg_id = ? AND project_id <> ? AND LOWER(project_name) = LOWER(?) AND is_deleted = false`;
            const rowCheProjName = await db.sequelize.query(_queryCheProjName, { replacements: [row[0].reg_id, (oldProjData != null ? oldProjData.project_id : 0), _project_name], type: QueryTypes.SELECT });
            if (rowCheProjName && rowCheProjName.length > 0) {
                return res.status(200).json(success(false, res.statusCode, 'Project name is already exists.', null));
            }
            const _purpose_id = purpose_id != null && validator.isNumeric(purpose_id.toString()) ? BigInt(purpose_id) : 0;
            var valid_purpose_id = false;
            for (let i = 0; constants.project_purpose && i < constants.project_purpose.length; i++) {
                if (constants.project_purpose[i].id.toString() == _purpose_id.toString()) {
                    valid_purpose_id = true; break;
                }
            }
            if (!valid_purpose_id) {
                return res.status(200).json(success(false, res.statusCode, 'Please select purpose of project.', null));
            }
            const _funding_option = funding_option != null && validator.isNumeric(funding_option.toString()) ? BigInt(funding_option) : 0;
            var _funding_option_new = 0;
            if (_purpose_id.toString() == '2') {
                var valid_funding_option = false;
                for (let i = 0; constants.project_funding_option && i < constants.project_funding_option.length; i++) {
                    if (constants.project_funding_option[i].id.toString() == _funding_option.toString()) {
                        valid_funding_option = true; break;
                    }
                }
                if (!valid_funding_option) {
                    return res.status(200).json(success(false, res.statusCode, 'Please select project funding option.', null));
                }
                _funding_option_new = _funding_option;
            }
            const _thematic_id = thematic_id != null && validator.isNumeric(thematic_id.toString()) ? BigInt(thematic_id) : 0;
            if (_thematic_id <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please select thematic area.', null));
            }
            var valid_thematic_id = false;
            const db_thematic_areas = await commonModule.project_thematic_area_list();
            for (let i = 0; db_thematic_areas && i < db_thematic_areas.length; i++) {
                if (db_thematic_areas[i].id.toString() == _thematic_id.toString()) {
                    valid_thematic_id = true; break;
                }
            }
            if (!valid_thematic_id) {
                return res.status(200).json(success(false, res.statusCode, 'Invalid thematic area selected.', null));
            }
            const _project_cost = project_cost != null && validator.isNumeric(project_cost.toString()) ? parseFloat(parseFloat(project_cost).toFixed(2)) : 0;
            if (_project_cost <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please enter estimated project cost.', null));
            }
            var proj_img_file_required = true;
            if (oldProjData != null && oldProjData.proj_img_file_path != null && oldProjData.proj_img_file_path.length > 0) {
                proj_img_file_required = false;
            }
            var is_proj_img_exists = false; var proj_img_file_json = null;
            for (let j = 0; req.files && j < req.files.length; j++) {
                if (req.files[j].fieldname == project_image_upload_param_name) {
                    proj_img_file_json = req.files[j]; is_proj_img_exists = true; break;
                }
            }
            if (proj_img_file_required && !is_proj_img_exists) {
                return res.status(200).json(success(false, res.statusCode, "Please upload project image/symbol.", null));
            }
            if (is_proj_img_exists) {
                const ext = proj_img_file_json.originalname.substr(proj_img_file_json.originalname.lastIndexOf('.')).toLowerCase();
                if (!utils.check_in_array(ext, project_image_symbol_file_allowed)) {
                    return res.status(200).json(success(false, res.statusCode, "Please check file format for project image/symbol.<br><br>Supported formats are: " + project_image_symbol_file_allowed.join(', '), null));
                }
                const file_size_in_kb = proj_img_file_json.size / 1024;
                if (file_size_in_kb > project_image_upload_file_size) {
                    const readable = utils.bytes_to_readable(project_image_upload_file_size * 1024);
                    return res.status(200).json(success(false, res.statusCode, "Please check file size for project image/symbol.<br><br>Maximum file size limit is " + readable, null));
                }
            }
            const _start_date = utils.parse_api_date_string(start_date);
            if (_start_date == null) {
                return res.status(200).json(success(false, res.statusCode, 'Please select start date of project.', null));
            }
            if (oldProjData != null) {

            } else {
                if (_start_date < new Date((new Date().getFullYear()), (new Date().getMonth()), (new Date().getDate()))) {
                    return res.status(200).json(success(false, res.statusCode, 'Please select correct start date.', null));
                }
            }
            const _end_date = utils.parse_api_date_string(end_date);
            if (_end_date == null) {
                return res.status(200).json(success(false, res.statusCode, 'Please select end date of project.', null));
            }
            if (_end_date < _start_date) {
                return res.status(200).json(success(false, res.statusCode, 'Please select correct end date.', null));
            }
            const _proj_objective = (proj_objective && proj_objective.length > 0) ? proj_objective.trim() : "";
            if (_proj_objective.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please enter project objective.', null));
            }
            const _proj_summary = (proj_summary && proj_summary.length > 0) ? proj_summary.trim() : "";
            if (_proj_summary.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please enter project summary.', null));
            }
            const _beneficiary_detail = (beneficiary_detail && beneficiary_detail.length > 0) ? beneficiary_detail.trim() : "";
            if (_beneficiary_detail.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please enter beneficiary detail.', null));
            }
            const _mapped_under = (mapped_under && mapped_under.length > 0) ? mapped_under.trim() : "";
            var valid_mapped_under = false;
            for (let i = 0; constants.project_mapped_under && i < constants.project_mapped_under.length; i++) {
                if (constants.project_mapped_under[i].id.toString() == _mapped_under.toString()) {
                    valid_mapped_under = true; break;
                }
            }
            if (!valid_mapped_under) {
                return res.status(200).json(success(false, res.statusCode, 'Please select project mapped under.', null));
            }
            var _sdg_goals_new_array = [];
            if (_mapped_under.toLowerCase() == 'SDG'.toLowerCase() || _mapped_under.toLowerCase() == 'Both'.toLowerCase()) {
                const db_sdg_goals = await commonModule.project_sdg_goals_list();
                var _sdg_goals = [];
                if (sdg_goals != null) {
                    if (sdg_goals.constructor == String) {
                        try { _sdg_goals = JSON.parse(sdg_goals); } catch (_) { }
                    } else {
                        if (sdg_goals.constructor == Array) { _sdg_goals = sdg_goals; }
                    }
                }
                for (let i = 0; _sdg_goals && i < _sdg_goals.length; i++) {
                    const _tmpGoalID = _sdg_goals[i] != null && validator.isNumeric(_sdg_goals[i].toString()) ? BigInt(_sdg_goals[i]) : 0;
                    if (_tmpGoalID > 0) {
                        var is_exists = false;
                        for (let j = 0; db_sdg_goals && j < db_sdg_goals.length; j++) {
                            if (db_sdg_goals[j].id.toString() == _tmpGoalID.toString()) {
                                is_exists = true; break;
                            }
                        }
                        if (!is_exists) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid SDG goal selected.', null));
                        }
                        _sdg_goals_new_array.push(_tmpGoalID);
                    }
                }
                if (_sdg_goals_new_array.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Please select SDG goals.', null));
                }
            }
            var _esg_objective_new = '';
            if (_mapped_under.toLowerCase() == 'ESG'.toLowerCase() || _mapped_under.toLowerCase() == 'Both'.toLowerCase()) {
                const _esg_objective = (esg_objective && esg_objective.length > 0) ? esg_objective.trim() : "";
                if (_esg_objective.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Please enter ESG programme objective.', null));
                }
                _esg_objective_new = _esg_objective;
            }
            /**************************************************************************************************/
            var dynamic_form_fields = await commonModule.project_dynamic_field_form();
            var _dynamic_values = []; var _dynamic_values_new_array = [];
            if (dynamic_values != null) {
                if (dynamic_values.constructor == String) {
                    try { _dynamic_values = JSON.parse(dynamic_values); } catch (_) { }
                } else {
                    if (dynamic_values.constructor == Array) { _dynamic_values = dynamic_values; }
                }
            }
            for (let i = 0; dynamic_form_fields && i < dynamic_form_fields.length; i++) {
                const eleFld = dynamic_form_fields[i]; var fieldData = null;
                for (let j = 0; _dynamic_values && j < _dynamic_values.length; j++) {
                    if (_dynamic_values[j].field_id.toString() == eleFld.field_id.toString()) {
                        fieldData = _dynamic_values[j]; break;
                    }
                }
                if (fieldData != null) {
                    const _user_value = fieldData.user_value != null && fieldData.user_value.length > 0 ? fieldData.user_value.trim() : "";
                    const validation_result = utils.check_field_validations(eleFld.validations, _user_value, eleFld.field_type, eleFld.field_values, eleFld.lable_name);
                    if (validation_result.has_error) {
                        return res.status(200).json(success(false, res.statusCode, validation_result.error_msg, null));
                    }
                    _dynamic_values_new_array.push({
                        field_id: eleFld.field_id,
                        user_value: _user_value,
                    });
                } else {
                    var is_required = false;
                    for (let v = 0; eleFld.validations && v < eleFld.validations.length; v++) {
                        if (eleFld.validations[v].vld_type_id.toString() == validationTypes.REQUIRED.toString()) {
                            is_required = true; break;
                        }
                    }
                    if (is_required) {
                        return res.status(200).json(success(false, res.statusCode, utils.capabilities_first_letter(eleFld.lable_name) + ' is mandatory.', null));
                    }
                }
            }
            /**************************************************************************************************/
            const _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            if (_country_id <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please select country.', null));
            }
            const _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            if (_state_id <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please select state/UT.', null));
            }
            const _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            if (_district_id <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please select district.', null));
            }
            const _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;
            if (_block_id <= 0) {
                return res.status(200).json(success(false, res.statusCode, 'Please select block/taluka.', null));
            }
            const _pin_code = (pin_code && pin_code.length > 0) ? pin_code.trim() : "";
            if (_pin_code.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter pin code.", null));
            }
            if (_pin_code.length > 0) {
                if (!utils.is_pin_code(_pin_code)) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter correct pin code.", null));
                }
            }
            /**************************************************************************************************/
            const _incharge_full_name = (incharge_full_name && incharge_full_name.length > 0) ? incharge_full_name.trim() : "";
            if (_incharge_full_name.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge full name.", null));
            }
            if (_incharge_full_name.length > 0) {
                if (_incharge_full_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "Project in-charge full name should not be less than 2 characters.", null));
                }
                if (_incharge_full_name.length > 60) {
                    return res.status(200).json(success(false, res.statusCode, "Project in-charge full name should not be more than 60 characters.", null));
                }
            }
            const _incharge_designation = (incharge_designation && incharge_designation.length > 0) ? incharge_designation.trim() : "";
            if (_incharge_designation.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge designation.", null));
            }
            if (_incharge_designation.length > 0) {
                if (_incharge_designation.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "Project in-charge designation should not be less than 2 characters.", null));
                }
                if (_incharge_designation.length > 60) {
                    return res.status(200).json(success(false, res.statusCode, "Project in-charge designation should not be more than 60 characters.", null));
                }
            }
            const _incharge_email_id = (incharge_email_id && incharge_email_id.length > 0) ? incharge_email_id.trim() : "";
            if (_incharge_email_id.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge email id.", null));
            }
            if (!validator.isEmail(_incharge_email_id)) {
                return res.status(200).json(success(false, res.statusCode, "Please enter correct project in-charge email id.", null));
            }
            const _incharge_mobile_ccc = (incharge_mobile_ccc && incharge_mobile_ccc.length > 0) ? incharge_mobile_ccc.trim() : "";
            if (_incharge_mobile_ccc.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please select project in-charge mobile country code.", null));
            }
            var valid_incharge_mobile_ccc = false; const db_mobile_ccc = await commonModule.country_calling_code();
            for (let i = 0; db_mobile_ccc && i < db_mobile_ccc.length; i++) {
                if (db_mobile_ccc[i].toString().toLocaleLowerCase() == _incharge_mobile_ccc.toString().toLocaleLowerCase()) {
                    valid_incharge_mobile_ccc = true; break;
                }
            }
            if (!valid_incharge_mobile_ccc) {
                return res.status(200).json(success(false, res.statusCode, "Invalid project in-charge mobile country code.", null));
            }
            const _incharge_mobile_no = (incharge_mobile_no && incharge_mobile_no.length > 0) ? incharge_mobile_no.trim() : "";
            if (_incharge_mobile_no.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge mobile no.", null));
            }
            if (!utils.is_mobile_no(_incharge_mobile_no)) {
                return res.status(200).json(success(false, res.statusCode, "Please enter correct project in-charge mobile no.", null));
            }
            /**************************************************************************************************/
            // Uploading project image to GCP
            var project_img_new_file_added = false; var proj_img_file_name = ''; var proj_img_new_name = ''; var proj_img_file_path = ''; var proj_img_gcp_resp = '';
            if (is_proj_img_exists) {
                try {
                    const gcp_file_path = 'temp/' + proj_img_file_json.filename;
                    const gcpResp = await cloudStorageModule.UploadFile(proj_img_file_json.path, gcp_file_path);
                    proj_img_file_name = proj_img_file_json.originalname; proj_img_new_name = proj_img_file_json.filename;
                    proj_img_file_path = gcp_file_path; proj_img_gcp_resp = JSON.stringify(gcpResp);
                    project_img_new_file_added = true;
                }
                catch (gErr) {
                    try { _logger.error(gErr.stack); } catch (_) { }
                    return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + proj_img_file_json.originalname, null));
                }
            }
            /**************************************************************************************************/
            var retrived_id = 0;
            if (oldProjData != null) {
                const _queryUpProj = `UPDATE project_created SET modify_by = ?, modify_date = ?, project_name = ?, project_cost = ?,
                start_date = ?, end_date = ?, purpose_id = ?, funding_option_id = ?, thematic_id = ?, proj_objective = ?, proj_summary = ?,
                beneficiary_detail = ?, mapped_under = ?, sdg_goals = ARRAY[?]::bigint[], esg_objective = ?, country_id = ?, state_id = ?,
                district_id = ?, block_id = ?, pin_code = ?, incharge_full_name = ?, incharge_designation = ?, incharge_email_id = ?,
                incharge_mobile_ccc = ?, incharge_mobile_no = ? WHERE project_id = ?`;
                const _replUpProj = [req.token_data.account_id, new Date(), _project_name, _project_cost,
                    _start_date, _end_date, _purpose_id, _funding_option_new, _thematic_id, _proj_objective, _proj_summary,
                    _beneficiary_detail, _mapped_under, _sdg_goals_new_array, _esg_objective_new, _country_id, _state_id,
                    _district_id, _block_id, _pin_code, _incharge_full_name, _incharge_designation, _incharge_email_id,
                    _incharge_mobile_ccc, _incharge_mobile_no, oldProjData.project_id];
                const [, updated_count] = await db.sequelize.query(_queryUpProj, { replacements: _replUpProj, type: QueryTypes.UPDATE });
                if (updated_count > 0) {
                    retrived_id = BigInt(oldProjData.project_id.toString());
                }
            } else {
                const _queryInProj = `INSERT INTO project_created(reg_id, account_id, user_id, added_by, added_date,
                    project_name, project_cost, start_date, end_date, purpose_id, funding_option_id, thematic_id, proj_objective,
                    proj_summary, beneficiary_detail, mapped_under, sdg_goals, esg_objective, country_id, state_id, district_id,
                    block_id, pin_code, incharge_full_name, incharge_designation, incharge_email_id, incharge_mobile_ccc, 
                    incharge_mobile_no)
                    VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ARRAY[?]::bigint[], ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    RETURNING "project_id", "unique_id"`;
                const _replInProj = [row[0].reg_id, req.token_data.account_id, req.token_data.user_id, req.token_data.account_id, new Date(),
                    _project_name, _project_cost, _start_date, _end_date, _purpose_id, _funding_option_new, _thematic_id, _proj_objective,
                    _proj_summary, _beneficiary_detail, _mapped_under, _sdg_goals_new_array, _esg_objective_new, _country_id, _state_id, _district_id,
                    _block_id, _pin_code, _incharge_full_name, _incharge_designation, _incharge_email_id, _incharge_mobile_ccc,
                    _incharge_mobile_no];
                const [rowInProj] = await db.sequelize.query(_queryInProj, { replacements: _replInProj, type: QueryTypes.INSERT, returning: true });
                const added_id = (rowInProj && rowInProj.length > 0 && rowInProj[0] ? rowInProj[0].project_id : 0);
                if (added_id > 0) {
                    retrived_id = BigInt(added_id.toString());
                }
            }
            if (retrived_id > 0) {
                // SAVE DYNAMIC VALUES
                var updatedFieldToDB = [];
                for (let dv = 0; _dynamic_values_new_array && dv < _dynamic_values_new_array.length; dv++) {
                    const eleVal = _dynamic_values_new_array[dv];
                    const _queryChkField = `SELECT field_id FROM project_field_value WHERE project_id = ? AND field_id = ?`;
                    const rowChkField = await db.sequelize.query(_queryChkField, { replacements: [retrived_id, eleVal.field_id], type: QueryTypes.SELECT });
                    if (rowChkField && rowChkField.length > 0) {
                        const _queryFieldUp = `UPDATE project_field_value SET user_value = ? WHERE project_id = ? AND field_id = ?`;
                        await db.sequelize.query(_queryFieldUp, { replacements: [eleVal.user_value, retrived_id, eleVal.field_id], type: QueryTypes.UPDATE });
                    } else {
                        const _queryFieldIn = `INSERT INTO project_field_value(project_id, field_id, user_value) VALUES(?, ?, ?)`;
                        await db.sequelize.query(_queryFieldIn, { replacements: [retrived_id, eleVal.field_id, eleVal.user_value], type: QueryTypes.INSERT });
                    }
                    updatedFieldToDB.push(eleVal.field_id);
                }
                const _queryFieldDel = `DELETE FROM project_field_value WHERE project_id = ? ${(updatedFieldToDB.length > 0 ? 'AND field_id NOT IN (?)' : '')}`;
                var _replFieldDel = [retrived_id]; if (updatedFieldToDB.length > 0) { _replFieldDel.push(updatedFieldToDB); }
                await db.sequelize.query(_queryFieldDel, { replacements: _replFieldDel, type: QueryTypes.DELETE });

                // PROJECT IMAGE
                if (project_img_new_file_added) {
                    var _img_updated_path = proj_img_file_path; var _img_updated_resp = proj_img_gcp_resp;
                    try {
                        const _newGcpPath = 'project/' + retrived_id.toString() + '/' + proj_img_new_name;
                        const moveRsp = await cloudStorageModule.MoveFile(proj_img_file_path, _newGcpPath);
                        _img_updated_path = _newGcpPath; _img_updated_resp = JSON.stringify(moveRsp);
                    } catch (_) {
                    }
                    const _queryUpImg = `UPDATE project_created SET proj_img_file_name = ?, proj_img_new_name = ?, proj_img_file_path = ?, proj_img_gcp_resp = ? WHERE project_id = ?`;
                    const _replUpImg = [proj_img_file_name, proj_img_new_name, _img_updated_path, _img_updated_resp, retrived_id];
                    await db.sequelize.query(_queryUpImg, { replacements: _replUpImg, type: QueryTypes.UPDATE });
                }


                const _querySelProjNew = `SELECT unique_id, proj_img_file_name, proj_img_new_name, proj_img_file_path FROM project_created WHERE project_id = ?`;
                const rowSelProjNew = await db.sequelize.query(_querySelProjNew, { replacements: [retrived_id], type: QueryTypes.SELECT });
                const results = {
                    project_id: rowSelProjNew[0].unique_id,
                    proj_img_file_name: rowSelProjNew[0].proj_img_file_name,
                    proj_img_new_name: rowSelProjNew[0].proj_img_new_name,
                    proj_img_file_path: rowSelProjNew[0].proj_img_file_path,
                };
                return res.status(200).json(success(true, res.statusCode, "Saved successfully.", results));
            } else {
                if (proj_img_file_path && proj_img_file_path.length > 0) {
                    try { await cloudStorageModule.DeleteFile(proj_img_file_path); } catch (_) { }
                }
                return res.status(200).json(success(false, res.statusCode, "Unable to " + (oldProjData != null ? "update" : "add") + " record, Please try again.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_create_save_milestones = async (req, res, next) => {
    const { project_id, scope_of_work } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT project_id, reg_id, proj_img_file_path, is_floated FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                    if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Can not update floated project.', null));
                    }
                    oldProjData = rowSelProj[0];
                    /**************************************************************************************************/
                    var _scope_of_work = []; var _scope_of_work_new_array = [];
                    if (scope_of_work != null) {
                        if (scope_of_work.constructor == String) {
                            try { _scope_of_work = JSON.parse(scope_of_work); } catch (_) { }
                        } else {
                            if (scope_of_work.constructor == Array) { _scope_of_work = scope_of_work; }
                        }
                    }
                    if (!Array.isArray(_scope_of_work)) {
                        return res.status(200).json(success(false, res.statusCode, "Please add project scope of work.", null));
                    }
                    if (_scope_of_work.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please add project scope of work.", null));
                    }
                    for (let i = 0; _scope_of_work && i < _scope_of_work.length; i++) {
                        const eleSow = _scope_of_work[i];
                        const _milestone_id = eleSow.milestone_id != null && validator.isNumeric(eleSow.milestone_id.toString()) ? BigInt(eleSow.milestone_id) : 0;
                        const _milestone_name = (eleSow.milestone_name != null && eleSow.milestone_name.length > 0) ? eleSow.milestone_name.trim() : "";
                        if (_milestone_name.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter milestone name for scope of work.", null));
                        }
                        var is_cm_dup = false;
                        for (let cm = 0; cm < _scope_of_work_new_array.length; cm++) {
                            if (_scope_of_work_new_array[cm].milestone_name.trim().toLowerCase() == _milestone_name.trim().toLowerCase()) {
                                is_cm_dup = true; break;
                            }
                        }
                        if (is_cm_dup) {
                            return res.status(200).json(success(false, res.statusCode, "Duplicate milestone name found in scope of work.", null));
                        }
                        if (eleSow.delivery && Array.isArray(eleSow.delivery) && eleSow.delivery.length > 0) {
                            var new_delivery = [];
                            for (let j = 0; j < eleSow.delivery.length; j++) {
                                const eleDel = eleSow.delivery[j];
                                const _delivery_id = eleDel.delivery_id != null && validator.isNumeric(eleDel.delivery_id.toString()) ? BigInt(eleDel.delivery_id) : 0;
                                const _delivery_name = (eleDel.delivery_name != null && eleDel.delivery_name.length > 0) ? eleDel.delivery_name.trim() : "";
                                if (_delivery_name.length <= 0) {
                                    return res.status(200).json(success(false, res.statusCode, "Please enter delivery name for milestone.", null));
                                }
                                var is_cd_dup = false;
                                for (let cd = 0; new_delivery && cd < new_delivery.length; cd++) {
                                    if (new_delivery[cd].delivery_name.trim().toLowerCase() == _delivery_name.trim().toLowerCase()) {
                                        is_cd_dup = true; break;
                                    }
                                }
                                if (is_cd_dup) {
                                    return res.status(200).json(success(false, res.statusCode, "Duplicate delivery name found in milestone.<br>Milestone name: " + _milestone_name + ".", null));
                                }
                                if (eleDel.activity && Array.isArray(eleDel.activity) && eleDel.activity.length > 0) {
                                    var new_activity = [];
                                    for (let k = 0; k < eleDel.activity.length; k++) {
                                        const eleAct = eleDel.activity[k];
                                        const _activity_id = eleAct.activity_id != null && validator.isNumeric(eleAct.activity_id.toString()) ? BigInt(eleAct.activity_id) : 0;
                                        const _activity_name = (eleAct.activity_name != null && eleAct.activity_name.length > 0) ? eleAct.activity_name.trim() : "";
                                        if (_activity_name.length <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, "Please enter activity name for delivery.", null));
                                        }
                                        var is_ac_dup = false;
                                        for (let ca = 0; ca < new_activity.length; ca++) {
                                            if (new_activity[ca].activity_name.trim().toLowerCase() == _activity_name.trim().toLowerCase()) {
                                                is_ac_dup = true; break;
                                            }
                                        }
                                        if (is_ac_dup) {
                                            return res.status(200).json(success(false, res.statusCode, "Duplicate activity name found in delivery.<br>Milestone name: " + _milestone_name + "(" + _delivery_name + ").", null));
                                        }
                                        new_activity.push({
                                            activity_id: _activity_id,
                                            activity_name: _activity_name,
                                            sort_order: (k + 1),
                                        });
                                    }
                                    new_delivery.push({
                                        delivery_id: _delivery_id,
                                        delivery_name: _delivery_name,
                                        activity: new_activity,
                                        sort_order: (j + 1),
                                    });
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, "Please add activity for delivery<br>" + _delivery_name + ".", null));
                                }
                            }
                            _scope_of_work_new_array.push({
                                milestone_id: _milestone_id,
                                milestone_name: _milestone_name,
                                delivery: new_delivery,
                                sort_order: (i + 1),
                            });
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Please add delivery for milestone<br>" + _milestone_name + ".", null));
                        }
                    }
                    if (_scope_of_work_new_array.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please add project scope of work.", null));
                    }
                    const retrived_id = oldProjData.project_id;
                    /**************************************************************************************************/
                    var db_updated_milestone = []; var db_updated_delivery = []; var db_updated_activity = [];
                    for (let smi = 0; _scope_of_work_new_array && smi < _scope_of_work_new_array.length; smi++) {
                        const eleMil = _scope_of_work_new_array[smi]; var tmp_milestone_id = 0;
                        if (eleMil.milestone_id > 0) {
                            const _queryUpMil = `UPDATE project_milestone SET milestone_name = ?, sort_order = ?, modify_by = ?, modify_date = ? WHERE milestone_id = ? AND project_id = ?`;
                            const _replUpMil = [eleMil.milestone_name, eleMil.sort_order, req.token_data.account_id, new Date(), eleMil.milestone_id, retrived_id];
                            const [, mir] = await db.sequelize.query(_queryUpMil, { replacements: _replUpMil, type: QueryTypes.UPDATE });
                            if (mir > 0) {
                                db_updated_milestone.push(eleMil.milestone_id); tmp_milestone_id = eleMil.milestone_id;
                            }
                        } else {
                            const _queryInMil = `INSERT INTO project_milestone(project_id, milestone_name, sort_order, added_by, added_date) VALUES(?, ?, ?, ?, ?) RETURNING "milestone_id"`;
                            const _replInMil = [retrived_id, eleMil.milestone_name, eleMil.sort_order, req.token_data.account_id, new Date()];
                            const [rowInMil] = await db.sequelize.query(_queryInMil, { replacements: _replInMil, type: QueryTypes.INSERT, returning: true });
                            const new_mil = (rowInMil && rowInMil.length > 0 && rowInMil[0] ? rowInMil[0].milestone_id : 0);
                            if (new_mil > 0) {
                                db_updated_milestone.push(new_mil); tmp_milestone_id = new_mil;
                            }
                        }
                        if (tmp_milestone_id > 0) {
                            for (let sdi = 0; eleMil.delivery && sdi < eleMil.delivery.length; sdi++) {
                                const eleDel = eleMil.delivery[sdi]; var tmp_delivery_id_id = 0;
                                if (eleDel.delivery_id > 0) {
                                    const _queryUpDil = `UPDATE project_delivery SET delivery_name = ?, sort_order = ?, modify_by = ?, modify_date = ? WHERE delivery_id = ? AND milestone_id = ?`;
                                    const _replUpDil = [eleDel.delivery_name, eleDel.sort_order, req.token_data.account_id, new Date(), eleDel.delivery_id, tmp_milestone_id];
                                    const [, dir] = await db.sequelize.query(_queryUpDil, { replacements: _replUpDil, type: QueryTypes.UPDATE });
                                    if (dir > 0) {
                                        db_updated_delivery.push(eleDel.delivery_id); tmp_delivery_id_id = eleDel.delivery_id;
                                    }
                                } else {
                                    const _queryInDil = `INSERT INTO project_delivery(project_id, milestone_id, delivery_name, sort_order, added_by, added_date) VALUES(?, ?, ?, ?, ?, ?) RETURNING "delivery_id"`;
                                    const _replInDil = [retrived_id, tmp_milestone_id, eleDel.delivery_name, eleDel.sort_order, req.token_data.account_id, new Date()];
                                    const [rowInDil] = await db.sequelize.query(_queryInDil, { replacements: _replInDil, type: QueryTypes.INSERT, returning: true });
                                    const new_dil = (rowInDil && rowInDil.length > 0 && rowInDil[0] ? rowInDil[0].delivery_id : 0);
                                    if (new_dil > 0) {
                                        db_updated_delivery.push(new_dil); tmp_delivery_id_id = new_dil;
                                    }
                                }
                                if (tmp_delivery_id_id > 0) {
                                    for (let sai = 0; eleDel.activity && sai < eleDel.activity.length; sai++) {
                                        const eleAct = eleDel.activity[sai];
                                        if (eleAct.activity_id > 0) {
                                            const _queryUpAct = `UPDATE project_activity SET activity_name = ?, sort_order = ?, modify_by = ?, modify_date = ? WHERE activity_id = ? AND delivery_id = ?`;
                                            const _replUpAct = [eleAct.activity_name, eleAct.sort_order, req.token_data.account_id, new Date(), eleAct.activity_id, tmp_delivery_id_id];
                                            const [, air] = await db.sequelize.query(_queryUpAct, { replacements: _replUpAct, type: QueryTypes.UPDATE });
                                            if (air > 0) {
                                                db_updated_activity.push(eleAct.activity_id);
                                            }
                                        } else {
                                            const _queryInAct = `INSERT INTO project_activity(project_id, milestone_id, delivery_id, activity_name, sort_order, added_by, added_date) VALUES(?, ?, ?, ?, ?, ?, ?) RETURNING "activity_id"`;
                                            const _replInAct = [retrived_id, tmp_milestone_id, tmp_delivery_id_id, eleAct.activity_name, eleAct.sort_order, req.token_data.account_id, new Date()];
                                            const [rowInAct] = await db.sequelize.query(_queryInAct, { replacements: _replInAct, type: QueryTypes.INSERT, returning: true });
                                            const new_act = (rowInAct && rowInAct.length > 0 && rowInAct[0] ? rowInAct[0].activity_id : 0);
                                            if (new_act > 0) {
                                                db_updated_activity.push(new_act);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (db_updated_activity.length > 0) {
                        await db.sequelize.query(`UPDATE project_activity SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ? AND activity_id NOT IN (?)`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id, db_updated_activity], type: QueryTypes.DELETE }
                        );
                    } else {
                        await db.sequelize.query(`UPDATE project_activity SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ?`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id], type: QueryTypes.DELETE }
                        );
                    }
                    if (db_updated_delivery.length > 0) {
                        await db.sequelize.query(`UPDATE project_delivery SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ? AND delivery_id NOT IN (?)`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id, db_updated_delivery], type: QueryTypes.DELETE }
                        );
                    } else {
                        await db.sequelize.query(`UPDATE project_delivery SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ?`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id], type: QueryTypes.DELETE }
                        );
                    }
                    if (db_updated_milestone.length > 0) {
                        await db.sequelize.query(`UPDATE project_milestone SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ? AND milestone_id NOT IN (?)`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id, db_updated_milestone], type: QueryTypes.DELETE }
                        );
                    } else {
                        await db.sequelize.query(`UPDATE project_milestone SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ?`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id], type: QueryTypes.DELETE }
                        );
                    }

                    await db.sequelize.query(`CALL project_milestone_update_ids(?)`,
                        { replacements: [retrived_id], type: QueryTypes.UPDATE }
                    );

                    const results = await entityDataModule.project_scope_of_work_data(retrived_id);

                    return res.status(200).json(success(true, res.statusCode, "Saved successfully.", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_create_save_questionnaire = async (req, res, next) => {
    const { project_id, questionnaire, } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT project_id, reg_id, purpose_id, proj_img_file_path, is_floated FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                    if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Can not update floated project.', null));
                    }
                    oldProjData = rowSelProj[0];
                    /**************************************************************************************************/
                    var _questionnaire_new_array = []; var _total_weightage = 0;
                    if (oldProjData.purpose_id.toString() == '1') {
                        var _questionnaire = []; const que_types = constants.project_question_types;
                        if (questionnaire != null) {
                            if (questionnaire.constructor == Array) {
                                _questionnaire = questionnaire;
                            }
                            else if (questionnaire.constructor == String) {
                                try { _questionnaire = JSON.parse(questionnaire); } catch (_) { }
                            }
                        }
                        if (!Array.isArray(_questionnaire)) {
                            return res.status(200).json(success(false, res.statusCode, "Please add project questionnaire.", null));
                        }
                        if (_questionnaire.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please add project questionnaire.", null));
                        }
                        for (let i = 0; _questionnaire && i < _questionnaire.length; i++) {
                            const eleQue = _questionnaire[i];
                            const _que_id = eleQue.que_id != null && validator.isNumeric(eleQue.que_id.toString()) ? BigInt(eleQue.que_id) : 0;
                            const _que_text = (eleQue.que_text != null && eleQue.que_text.length > 0) ? eleQue.que_text.trim() : "";
                            if (_que_text.length <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please enter question text at sr. no. " + (i + 1), null));
                            }
                            const _type_id = eleQue.type_id != null && validator.isNumeric(eleQue.type_id.toString()) ? parseInt(eleQue.type_id) : 0;
                            if (_type_id <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Invalid question type at sr. no. " + (i + 1), null));
                            }
                            var valid_que_type_id = false;
                            for (let cq = 0; que_types && cq < que_types.length; cq++) {
                                if (que_types[cq].id.toString() == _type_id.toString()) {
                                    valid_que_type_id = true; break;
                                }
                            }
                            if (!valid_que_type_id) {
                                return res.status(200).json(success(false, res.statusCode, "Invalid question type at sr. no. " + (i + 1), null));
                            }
                            var que_options = [];
                            if (_type_id.toString() == '1' || _type_id.toString() == '2') {
                                if (eleQue.options && Array.isArray(eleQue.options) && eleQue.options.length > 0) {
                                    for (let pI = 0; pI < eleQue.options.length; pI++) {
                                        const _options_text = (eleQue.options[pI].text != null && eleQue.options[pI].text.length > 0) ? eleQue.options[pI].text.trim() : "";
                                        if (_options_text.length <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, "Please enter option text for question at sr. no. " + (i + 1), null));
                                        }
                                        que_options.push({
                                            sr_no: (pI + 1),
                                            text: _options_text,
                                            checked: false,
                                        });
                                    }
                                }
                                if (que_options.length <= 0) {
                                    return res.status(200).json(success(false, res.statusCode, "Please add options for question at sr. no. " + (i + 1), null));
                                }
                                if (que_options.length > 10) {
                                    return res.status(200).json(success(false, res.statusCode, "You can add upto 10 options only. check question at sr. no. " + (i + 1), null));
                                }
                            }
                            var scale_start_point = 0; var scale_end_point = 0; var scale_start_text = ''; var scale_end_text = '';
                            if (_type_id.toString() == '5') {
                                scale_start_point = eleQue.scale_start_point != null && validator.isNumeric(eleQue.scale_start_point.toString()) ? parseInt(eleQue.scale_start_point) : 0;
                                if (!utils.check_in_array(scale_start_point, [0, 1])) {
                                    return res.status(200).json(success(false, res.statusCode, "Invalid linear scale value for question at sr. no. " + (i + 1), null));
                                }
                                scale_end_point = eleQue.scale_end_point != null && validator.isNumeric(eleQue.scale_end_point.toString()) ? parseInt(eleQue.scale_end_point) : 0;
                                if (!utils.check_in_array(scale_end_point, [2, 3, 4, 5, 6, 7, 8, 9, 10])) {
                                    return res.status(200).json(success(false, res.statusCode, "Invalid linear scale value for question at sr. no. " + (i + 1), null));
                                }
                                scale_start_text = (eleQue.scale_start_text != null && eleQue.scale_start_text.length > 0) ? eleQue.scale_start_text.trim() : "";
                                scale_end_text = (eleQue.scale_end_text != null && eleQue.scale_end_text.length > 0) ? eleQue.scale_end_text.trim() : "";
                            }
                            const _scoring_parameters = (eleQue.scoring_parameters != null && eleQue.scoring_parameters.length > 0) ? eleQue.scoring_parameters.trim() : "";
                            if (_scoring_parameters.length <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please enter scoring parameters for question at sr. no. " + (i + 1), null));
                            }
                            const _max_score = eleQue.max_score != null && validator.isNumeric(eleQue.max_score.toString()) ? parseFloat(parseFloat(eleQue.max_score).toFixed(2)) : 0;
                            if (_max_score <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please enter maximum score for question at sr. no. " + (i + 1), null));
                            }
                            const _weightage = eleQue.weightage != null && validator.isNumeric(eleQue.weightage.toString()) ? parseFloat(parseFloat(eleQue.weightage).toFixed(2)) : 0;
                            if (_weightage <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please enter weightage for question at sr. no. " + (i + 1), null));
                            }
                            _total_weightage = _total_weightage + _weightage;
                            const _order = eleQue.sort_order != null && validator.isNumeric(eleQue.sort_order.toString()) ? BigInt(eleQue.sort_order) : 0;
                            if (_order <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please select order for question at sr. no. " + (i + 1), null));
                            }
                            _questionnaire_new_array.push({
                                que_id: _que_id, que_text: _que_text, type_id: _type_id, options: que_options, scale_start_point: scale_start_point,
                                scale_end_point: scale_end_point, scale_start_text: scale_start_text, scale_end_text: scale_end_text,
                                scoring_parameters: _scoring_parameters, max_score: _max_score, weightage: _weightage, sort_order: _order,
                            });
                        }
                        if (_questionnaire_new_array.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please add project questionnaire.", null));
                        }
                        if (_total_weightage != 100) {
                            return res.status(200).json(success(false, res.statusCode, "Total weightage percentage needs to be 100%.", null));
                        }
                    }
                    /**************************************************************************************************/
                    const retrived_id = oldProjData.project_id;
                    var db_updated_questionnaire = [];
                    for (let qli = 0; _questionnaire_new_array && qli < _questionnaire_new_array.length; qli++) {
                        const eleQue = _questionnaire_new_array[qli];
                        if (eleQue.que_id > 0) {
                            const _queryUpQue = `UPDATE project_question SET type_id = ?, que_text = ?, que_options = ?, scale_start_point = ?, scale_end_point = ?,
                            scale_start_text = ?, scale_end_text = ?, scoring_parameters = ?, max_score = ?, weightage = ?, sort_order = ?, modify_by = ?, modify_date = ?
                            WHERE que_id = ? AND project_id = ?`;
                            const _replUpQue = [eleQue.type_id, eleQue.que_text, JSON.stringify(eleQue.options), eleQue.scale_start_point, eleQue.scale_end_point,
                            eleQue.scale_start_text, eleQue.scale_end_text, eleQue.scoring_parameters, eleQue.max_score, eleQue.weightage, eleQue.sort_order,
                            req.token_data.account_id, new Date(), eleQue.que_id, retrived_id];
                            const [, uqid] = await db.sequelize.query(_queryUpQue, { replacements: _replUpQue, type: QueryTypes.UPDATE });
                            if (uqid > 0) { db_updated_questionnaire.push(eleQue.que_id); }
                        } else {
                            const _queryInQue = `INSERT INTO project_question(project_id, type_id, que_text, que_options, scale_start_point, scale_end_point,
                                scale_start_text, scale_end_text, scoring_parameters, max_score, weightage, sort_order, added_by, added_date) 
                                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "que_id"`;
                            const _replInQue = [retrived_id, eleQue.type_id, eleQue.que_text, JSON.stringify(eleQue.options), eleQue.scale_start_point, eleQue.scale_end_point,
                                eleQue.scale_start_text, eleQue.scale_end_text, eleQue.scoring_parameters, eleQue.max_score, eleQue.weightage, eleQue.sort_order,
                                req.token_data.account_id, new Date()];
                            const [rowInQue] = await db.sequelize.query(_queryInQue, { replacements: _replInQue, type: QueryTypes.INSERT, returning: true });
                            const new_qid = (rowInQue && rowInQue.length > 0 && rowInQue[0] ? rowInQue[0].que_id : 0);
                            if (new_qid > 0) { db_updated_questionnaire.push(new_qid); }
                        }
                    }
                    if (db_updated_questionnaire.length > 0) {
                        await db.sequelize.query(`UPDATE project_question SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ? AND que_id NOT IN (?)`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id, db_updated_questionnaire], type: QueryTypes.DELETE }
                        );
                    } else {
                        await db.sequelize.query(`UPDATE project_question SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ?`,
                            { replacements: [req.token_data.account_id, new Date(), retrived_id], type: QueryTypes.DELETE }
                        );
                    }
                    /**************************************************************************************************/
                    const results = await entityDataModule.project_questionnaire_data(retrived_id);

                    return res.status(200).json(success(true, res.statusCode, "Saved successfully.", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_create_save_rfp_details = async (req, res, next) => {
    const { project_id, rfp_docs_to_delete, visible_to_all_ia, visible_to_ia_list } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT project_id, reg_id, purpose_id, proj_img_file_path, is_floated FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                    if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Can not update floated project.', null));
                    }
                    oldProjData = rowSelProj[0];
                    /**************************************************************************************************/
                    var _rfp_docs_to_delete = [];
                    if (rfp_docs_to_delete != null) {
                        var tmp_docs = [];
                        if (rfp_docs_to_delete.constructor == String) { try { tmp_docs = JSON.parse(rfp_docs_to_delete); } catch (_) { } }
                        else { if (rfp_docs_to_delete.constructor == Array) { tmp_docs = rfp_docs_to_delete; } }
                        for (let i = 0; tmp_docs && i < tmp_docs.length; i++) {
                            var _ai = tmp_docs[i] != null && validator.isNumeric(tmp_docs[i].toString()) ? BigInt(tmp_docs[i]) : 0;
                            if (_ai > 0) { _rfp_docs_to_delete.push(_ai); }
                        }
                    }
                    var document_uploaded = []; if (oldProjData != null) { document_uploaded = await entityDataModule.project_document_uploaded(oldProjData.project_id); }
                    const document_required = await commonModule.project_rfp_document_list(oldProjData.purpose_id);
                    for (let i = 0; document_required && i < document_required.length; i++) {
                        const file_name_to_check = 'doc_' + document_required[i].document_id.toString();
                        var is_file_exists = false; var file_json_data = null; var is_already_up = false; var is_doc_to_delete = false;
                        for (let j = 0; req.files && j < req.files.length; j++) {
                            if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                file_json_data = req.files[j]; is_file_exists = true; break;
                            }
                        }
                        for (let dd = 0; _rfp_docs_to_delete && dd < _rfp_docs_to_delete.length; dd++) {
                            if (_rfp_docs_to_delete[dd].toString() == document_required[i].document_id.toString()) {
                                is_doc_to_delete = true; break;
                            }
                        }
                        for (let ht = 0; document_uploaded && ht < document_uploaded.length; ht++) {
                            if (document_uploaded[ht].document_id.toString() == document_required[i].document_id.toString()) {
                                is_already_up = true; break;
                            }
                        }
                        if (document_required[i].is_required && !is_file_exists && is_already_up && is_doc_to_delete) {
                            return res.status(200).json(success(false, res.statusCode, "Please upload required RFP document.<br><br>" + document_required[i].doc_name, null));
                        }
                        if (document_required[i].is_required && !is_file_exists && !is_already_up) {
                            return res.status(200).json(success(false, res.statusCode, "Please upload required RFP document.<br><br>" + document_required[i].doc_name, null));
                        }
                        if (is_file_exists) {
                            const ext = file_json_data.originalname.substr(file_json_data.originalname.lastIndexOf('.')).toLowerCase();
                            if (!utils.check_in_array(ext, document_required[i].file_type_allowed)) {
                                return res.status(200).json(success(false, res.statusCode, "Please check file format for document<br>\"" + document_required[i].doc_name + "\"<br><br>Supported formats are: " + document_required[i].file_type_allowed.join(', '), null));
                            }
                            const file_size_in_kb = file_json_data.size / 1024;
                            if (file_size_in_kb > document_required[i].file_max_size) {
                                const readable = utils.bytes_to_readable(document_required[i].file_max_size * 1024);
                                return res.status(200).json(success(false, res.statusCode, "Please check file size for document<br>\"" + document_required[i].doc_name + "\"<br><br>Maximum file size limit is " + readable, null));
                            }
                        }
                    }
                    /**************************************************************************************************/
                    var _visible_to_all_ia_new = false; var _specific_ia_ids = [];
                    if (oldProjData.purpose_id.toString() == '1') {
                        const _visible_to_all_ia = (visible_to_all_ia != null && visible_to_all_ia.toString().toLowerCase().trim() == 'true') ? true : false;
                        _visible_to_all_ia_new = _visible_to_all_ia; var _specific_ia_list = []; var _specific_ia_list_new_array = [];
                        console.log('********', visible_to_ia_list);
                        if (visible_to_ia_list != null) {
                            if (visible_to_ia_list.constructor == String) {
                                try { _specific_ia_list = JSON.parse(visible_to_ia_list); } catch (_) { }
                            } else {
                                if (visible_to_ia_list.constructor == Array) { _specific_ia_list = visible_to_ia_list; }
                            }
                        }
                        if (!_visible_to_all_ia) {
                            if (!Array.isArray(_specific_ia_list)) {
                                return res.status(200).json(success(false, res.statusCode, "Please search and select IA whom visible this project.", null));
                            }
                            if (_specific_ia_list.length <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please search and select IA whom visible this project.", null));
                            }
                            for (let i = 0; _specific_ia_list && i < _specific_ia_list.length; i++) {
                                const _ia_id = (_specific_ia_list[i] != null && _specific_ia_list[i].length > 0) ? _specific_ia_list[i].trim() : "";
                                if (utils.isUUID(_ia_id)) {
                                    _specific_ia_list_new_array.push(_ia_id);
                                }
                            }
                            if (_specific_ia_list_new_array.length <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please search and select IA whom visible this project.", null));
                            }
                            const _queryGetIAs = `SELECT reg_id FROM user_master WHERE unique_id IN (?)`;
                            const rowGetIAs = await db.sequelize.query(_queryGetIAs, { replacements: [_specific_ia_list_new_array], type: QueryTypes.SELECT });
                            for (let iy = 0; rowGetIAs && iy < rowGetIAs.length; iy++) {
                                _specific_ia_ids.push(rowGetIAs[iy].reg_id);
                            }
                            if (_specific_ia_list_new_array.length != _specific_ia_ids.length) {
                                return res.status(200).json(success(false, res.statusCode, "Some invalid IA found in request.", null));
                            }
                        }
                    }
                    /**************************************************************************************************/
                    // Uploading documents to GCP
                    var rfpDocsModified = [];
                    for (let i = 0; document_required && i < document_required.length; i++) {
                        const file_name_to_check = 'doc_' + document_required[i].document_id.toString();
                        var is_file_exists = false; var file_json_data = null;
                        for (let j = 0; req.files && j < req.files.length; j++) {
                            if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                file_json_data = req.files[j]; is_file_exists = true; break;
                            }
                        }
                        if (is_file_exists) {
                            try {
                                const gcp_file_path = 'temp/' + file_json_data.filename;
                                const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                rfpDocsModified.push({
                                    document_id: document_required[i].document_id,
                                    original_file_name: file_json_data.originalname,
                                    new_file_name: file_json_data.filename,
                                    gcp_file_path: gcp_file_path,
                                    gcp_response_data: JSON.stringify(gcpResp),
                                    to_delete: false,
                                });
                            }
                            catch (gErr) {
                                try { _logger.error(gErr.stack); } catch (_) { }
                                for (let dd = 0; rfpDocsModified && dd < rfpDocsModified.length; dd++) {
                                    try { await cloudStorageModule.DeleteFile(rfpDocsModified[dd].gcp_file_path); } catch (_) { }
                                }
                                return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, null));
                            }
                        } else {
                            var is_doc_to_delete = false;
                            for (let dd = 0; _rfp_docs_to_delete && dd < _rfp_docs_to_delete.length; dd++) {
                                if (_rfp_docs_to_delete[dd].toString() == document_required[i].document_id.toString()) {
                                    is_doc_to_delete = true; break;
                                }
                            }
                            for (let td = 0; document_uploaded && td < document_uploaded.length; td++) {
                                if (document_uploaded[td].document_id.toString() == document_required[i].document_id.toString()) {
                                    if (is_doc_to_delete) {
                                        rfpDocsModified.push({
                                            document_id: document_uploaded[td].document_id,
                                            original_file_name: document_uploaded[td].file_name,
                                            new_file_name: document_uploaded[td].new_name,
                                            gcp_file_path: document_uploaded[td].file_path,
                                            gcp_response_data: '',
                                            to_delete: true,
                                        });
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    /**************************************************************************************************/
                    var retrived_id = oldProjData.project_id;
                    const _queryUpProj = `UPDATE project_created SET modify_by = ?, modify_date = ?, visible_to_all_ia = ?, 
                    visible_ia_list = ARRAY[?]::bigint[] WHERE project_id = ?`;
                    const _replUpProj = [req.token_data.account_id, new Date(), _visible_to_all_ia_new, _specific_ia_ids, retrived_id];
                    const [, updated_count] = await db.sequelize.query(_queryUpProj, { replacements: _replUpProj, type: QueryTypes.UPDATE });
                    if (updated_count > 0) {
                        for (let aqw = 0; rfpDocsModified && aqw < rfpDocsModified.length; aqw++) {
                            const eleDoc = rfpDocsModified[aqw];
                            if (eleDoc.to_delete) {
                                const _queryDocDel = `UPDATE project_document SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ? AND document_id = ? AND is_deleted = false`;
                                await db.sequelize.query(_queryDocDel, { replacements: [req.token_data.account_id, new Date(), retrived_id, eleDoc.document_id], type: QueryTypes.UPDATE });
                            } else {
                                var movedGcpPath = eleDoc.gcp_file_path; var movedGcpResp = eleDoc.gcp_response_data;
                                try {
                                    const _newGcpPath = 'project/' + retrived_id.toString() + '/' + eleDoc.new_file_name;
                                    const moveRsp = await cloudStorageModule.CopyFile(eleDoc.gcp_file_path, _newGcpPath);
                                    movedGcpPath = _newGcpPath; movedGcpResp = JSON.stringify(moveRsp);
                                } catch (_) {
                                }
                                const _queryDocSel = `SELECT doc_file_id FROM project_document WHERE project_id = ? AND document_id = ? AND is_deleted = false`;
                                const rowDocSel = await db.sequelize.query(_queryDocSel, { replacements: [retrived_id, eleDoc.document_id], type: QueryTypes.SELECT });
                                if (rowDocSel && rowDocSel.length > 0) {
                                    const _queryDocUp = `UPDATE project_document SET original_file_name = ?, new_file_name = ?, gcp_file_path = ?, gcp_response_data = ?,
                                    modify_by = ?, modify_date = ? WHERE doc_file_id = ?`;
                                    await db.sequelize.query(_queryDocUp, {
                                        replacements: [eleDoc.original_file_name, eleDoc.new_file_name, movedGcpPath, movedGcpResp,
                                        req.token_data.account_id, new Date(), rowDocSel[0].doc_file_id], type: QueryTypes.UPDATE
                                    });
                                } else {
                                    const _queryDocIn = `INSERT INTO project_document(project_id, document_id, original_file_name, new_file_name, gcp_file_path,
                                        gcp_response_data, uploaded_by, uploaded_date) VALUES(?, ?, ?, ?, ?, ?, ?, ?)`;
                                    await db.sequelize.query(_queryDocIn, {
                                        replacements: [retrived_id, eleDoc.document_id, eleDoc.original_file_name, eleDoc.new_file_name, movedGcpPath,
                                            movedGcpResp, req.token_data.account_id, new Date()], type: QueryTypes.INSERT
                                    });
                                }
                            }
                        }

                        const results = await entityDataModule.project_document_uploaded(retrived_id);

                        return res.status(200).json(success(true, res.statusCode, "Saved successfully.", results));
                    } else {
                        for (let dd = 0; rfpDocsModified && dd < rfpDocsModified.length; dd++) {
                            try { await cloudStorageModule.DeleteFile(rfpDocsModified[dd].gcp_file_path); } catch (_) { }
                        }
                        return res.status(200).json(success(false, res.statusCode, "Unable to update record, Please try again.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_float_for_discovery = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT project_id, reg_id, project_name, project_cost, start_date, end_date, purpose_id, funding_option_id,
                thematic_id, proj_objective, proj_summary, beneficiary_detail, mapped_under, sdg_goals, esg_objective, country_id, state_id, district_id,
                block_id, pin_code, incharge_full_name, incharge_designation, incharge_email_id, incharge_mobile_ccc, incharge_mobile_no, 
                visible_to_all_ia, visible_ia_list, proj_img_file_path, is_floated FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                    if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Can not update floated project.', null));
                    }
                    oldProjData = rowSelProj[0];
                    const _project_name = (oldProjData.project_name && oldProjData.project_name.length > 0) ? oldProjData.project_name.trim() : "";
                    if (_project_name.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter project name.", { tab: 1, }));
                    }
                    const _project_cost = oldProjData.project_cost != null && validator.isNumeric(oldProjData.project_cost.toString()) ? parseFloat(parseFloat(oldProjData.project_cost).toFixed(2)) : 0;
                    if (_project_cost <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please enter estimated project cost.', { tab: 1, }));
                    }
                    const _proj_img_file_path = (oldProjData.proj_img_file_path && oldProjData.proj_img_file_path.length > 0) ? oldProjData.proj_img_file_path.trim() : "";
                    if (_proj_img_file_path.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload project image/symbol.", { tab: 1, }));
                    }
                    const _purpose_id = oldProjData.purpose_id != null && validator.isNumeric(oldProjData.purpose_id.toString()) ? BigInt(oldProjData.purpose_id) : 0;
                    var valid_purpose_id = false;
                    for (let i = 0; constants.project_purpose && i < constants.project_purpose.length; i++) {
                        if (constants.project_purpose[i].id.toString() == _purpose_id.toString()) {
                            valid_purpose_id = true; break;
                        }
                    }
                    if (!valid_purpose_id) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select purpose of project.', { tab: 1, }));
                    }
                    if (_purpose_id.toString() == '2') {
                        var valid_funding_option = false;
                        const _funding_option = oldProjData.funding_option_id != null && validator.isNumeric(oldProjData.funding_option_id.toString()) ? BigInt(oldProjData.funding_option_id) : 0;
                        for (let i = 0; constants.project_funding_option && i < constants.project_funding_option.length; i++) {
                            if (constants.project_funding_option[i].id.toString() == _funding_option.toString()) {
                                valid_funding_option = true; break;
                            }
                        }
                        if (!valid_funding_option) {
                            return res.status(200).json(success(false, res.statusCode, 'Please select project funding option.', { tab: 1, }));
                        }
                    }
                    const _thematic_id = oldProjData.thematic_id != null && validator.isNumeric(oldProjData.thematic_id.toString()) ? BigInt(oldProjData.thematic_id) : 0;
                    if (_thematic_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select thematic area.', { tab: 1, }));
                    }
                    var valid_thematic_id = false;
                    const db_thematic_areas = await commonModule.project_thematic_area_list();
                    for (let i = 0; db_thematic_areas && i < db_thematic_areas.length; i++) {
                        if (db_thematic_areas[i].id.toString() == _thematic_id.toString()) {
                            valid_thematic_id = true; break;
                        }
                    }
                    if (!valid_thematic_id) {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid thematic area selected.', { tab: 1, }));
                    }
                    const _proj_objective = (oldProjData.proj_objective && oldProjData.proj_objective.length > 0) ? oldProjData.proj_objective.trim() : "";
                    if (_proj_objective.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please enter project objective.', { tab: 1, }));
                    }
                    const _proj_summary = (oldProjData.proj_summary && oldProjData.proj_summary.length > 0) ? oldProjData.proj_summary.trim() : "";
                    if (_proj_summary.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please enter project summary.', { tab: 1, }));
                    }
                    const _beneficiary_detail = (oldProjData.beneficiary_detail && oldProjData.beneficiary_detail.length > 0) ? oldProjData.beneficiary_detail.trim() : "";
                    if (_beneficiary_detail.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please enter beneficiary detail.', { tab: 1, }));
                    }
                    const _mapped_under = oldProjData.mapped_under;
                    var valid_mapped_under = false;
                    for (let i = 0; constants.project_mapped_under && i < constants.project_mapped_under.length; i++) {
                        if (constants.project_mapped_under[i].id.toString() == _mapped_under.toString()) {
                            valid_mapped_under = true; break;
                        }
                    }
                    if (!valid_mapped_under) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select project mapped under.', { tab: 1, }));
                    }
                    if (_mapped_under.toLowerCase() == 'SDG'.toLowerCase() || _mapped_under.toLowerCase() == 'Both'.toLowerCase()) {
                        var _sdg_goals = oldProjData.sdg_goals != null && oldProjData.sdg_goals.length > 0 ? oldProjData.sdg_goals : [];
                        if (_sdg_goals.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please select SDG goals.', { tab: 1, }));
                        }
                        var _sdg_goals_new_array = [];
                        const db_sdg_goals = await commonModule.project_sdg_goals_list();
                        for (let i = 0; _sdg_goals && i < _sdg_goals.length; i++) {
                            const _tmpGoalID = _sdg_goals[i] != null && validator.isNumeric(_sdg_goals[i].toString()) ? BigInt(_sdg_goals[i]) : 0;
                            if (_tmpGoalID > 0) {
                                var is_exists = false;
                                for (let j = 0; db_sdg_goals && j < db_sdg_goals.length; j++) {
                                    if (db_sdg_goals[j].id.toString() == _tmpGoalID.toString()) {
                                        is_exists = true; break;
                                    }
                                }
                                if (!is_exists) {
                                    return res.status(200).json(success(false, res.statusCode, 'Invalid SDG goal selected.', { tab: 1, }));
                                }
                                _sdg_goals_new_array.push(_tmpGoalID);
                            }
                        }
                        if (_sdg_goals_new_array.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please select SDG goals.', { tab: 1, }));
                        }
                    }
                    if (_mapped_under.toLowerCase() == 'ESG'.toLowerCase() || _mapped_under.toLowerCase() == 'Both'.toLowerCase()) {
                        const _esg_objective = (oldProjData.esg_objective && oldProjData.esg_objective.length > 0) ? oldProjData.esg_objective.trim() : "";
                        if (_esg_objective.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter ESG programme objective.', { tab: 1, }));
                        }
                    }
                    const _country_id = oldProjData.country_id != null && validator.isNumeric(oldProjData.country_id.toString()) ? BigInt(oldProjData.country_id) : 0;
                    if (_country_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select country.', { tab: 1, }));
                    }
                    const _state_id = oldProjData.state_id != null && validator.isNumeric(oldProjData.state_id.toString()) ? BigInt(oldProjData.state_id) : 0;
                    if (_state_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select state/UT.', { tab: 1, }));
                    }
                    const _district_id = oldProjData.district_id != null && validator.isNumeric(oldProjData.district_id.toString()) ? BigInt(oldProjData.district_id) : 0;
                    if (_district_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select district.', { tab: 1, }));
                    }
                    const _block_id = oldProjData.block_id != null && validator.isNumeric(oldProjData.block_id.toString()) ? BigInt(oldProjData.block_id) : 0;
                    if (_block_id <= 0) {
                        return res.status(200).json(success(false, res.statusCode, 'Please select block/taluka.', { tab: 1, }));
                    }
                    const _pin_code = (oldProjData.pin_code && oldProjData.pin_code.length > 0) ? oldProjData.pin_code.trim() : "";
                    if (_pin_code.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter pin code.", { tab: 1, }));
                    }
                    if (_pin_code.length > 0) {
                        if (!utils.is_pin_code(_pin_code)) {
                            return res.status(200).json(success(false, res.statusCode, "Please enter correct pin code.", { tab: 1, }));
                        }
                    }
                    const _incharge_full_name = (oldProjData.incharge_full_name && oldProjData.incharge_full_name.length > 0) ? oldProjData.incharge_full_name.trim() : "";
                    if (_incharge_full_name.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge full name.", { tab: 1, }));
                    }
                    const _incharge_designation = (oldProjData.incharge_designation && oldProjData.incharge_designation.length > 0) ? oldProjData.incharge_designation.trim() : "";
                    if (_incharge_designation.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge designation.", { tab: 1, }));
                    }
                    const _incharge_email_id = (oldProjData.incharge_email_id && oldProjData.incharge_email_id.length > 0) ? oldProjData.incharge_email_id.trim() : "";
                    if (_incharge_email_id.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge email id.", { tab: 1, }));
                    }
                    if (!validator.isEmail(_incharge_email_id)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct project in-charge email id.", { tab: 1, }));
                    }
                    const _incharge_mobile_ccc = (oldProjData.incharge_mobile_ccc && oldProjData.incharge_mobile_ccc.length > 0) ? oldProjData.incharge_mobile_ccc.trim() : "";
                    if (_incharge_mobile_ccc.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please select project in-charge mobile country code.", { tab: 1, }));
                    }
                    var valid_incharge_mobile_ccc = false; const db_mobile_ccc = await commonModule.country_calling_code();
                    for (let i = 0; db_mobile_ccc && i < db_mobile_ccc.length; i++) {
                        if (db_mobile_ccc[i].toString().toLowerCase() == _incharge_mobile_ccc.toString().toLowerCase()) {
                            valid_incharge_mobile_ccc = true; break;
                        }
                    }
                    if (!valid_incharge_mobile_ccc) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid project in-charge mobile country code.", { tab: 1, }));
                    }
                    const _incharge_mobile_no = (oldProjData.incharge_mobile_no && oldProjData.incharge_mobile_no.length > 0) ? oldProjData.incharge_mobile_no.trim() : "";
                    if (_incharge_mobile_no.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter project in-charge mobile no.", { tab: 1, }));
                    }
                    if (!utils.is_mobile_no(_incharge_mobile_no)) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter correct project in-charge mobile no.", { tab: 1, }));
                    }
                    const my_scope_of_work = await entityDataModule.project_scope_of_work_data(oldProjData.project_id);
                    if (!my_scope_of_work || my_scope_of_work.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please add project scope of work.", { tab: 2, }));
                    }
                    if (_purpose_id.toString() == '1') {
                        const questionnaire = await entityDataModule.project_questionnaire_data(oldProjData.project_id);
                        if (!questionnaire || questionnaire.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, "Please add project questionnaire.", { tab: 3, }));
                        }
                    }
                    if (_purpose_id.toString() == '1') {
                        const document_uploaded = await entityDataModule.project_document_uploaded(oldProjData.project_id);
                        const document_required = await commonModule.project_rfp_document_list(_purpose_id);
                        for (let i = 0; document_required && i < document_required.length; i++) {
                            if (document_required[i].is_required) {
                                var exists = false;
                                for (let k = 0; document_uploaded && k < document_uploaded.length; k++) {
                                    if (document_uploaded[k].document_id.toString() == document_required[i].document_id.toString()) {
                                        exists = true; break;
                                    }
                                }
                                if (!exists) {
                                    return res.status(200).json(success(false, res.statusCode, "Please upload required RFP document.<br><br>" + document_required[i].doc_name, { tab: 4, }));
                                }
                            }
                        }
                        const _visible_to_all_ia = (oldProjData.visible_to_all_ia && oldProjData.visible_to_all_ia == true) ? true : false;
                        if (!_visible_to_all_ia) {
                            const _specific_ia_list_new_array = (oldProjData.visible_ia_list && oldProjData.visible_ia_list.length > 0) ? oldProjData.visible_ia_list : [];
                            if (_specific_ia_list_new_array.length <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please search and select IA whom visible this project.", { tab: 4, }));
                            }
                        }
                    }

                    const _queryUpProj = `UPDATE project_created SET is_floated = true, floated_by = ?, floated_date = ? WHERE project_id = ?`;
                    const _replUpProj = [req.token_data.account_id, new Date(), oldProjData.project_id];
                    const [, updated_count] = await db.sequelize.query(_queryUpProj, { replacements: _replUpProj, type: QueryTypes.UPDATE });
                    if (updated_count > 0) {
                        return res.status(200).json(success(true, res.statusCode, "Project floated successfully.", null));
                    } else {
                        return res.status(200).json(success(false, res.statusCode, "Unable to update record, Please try again.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You are trying to update invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_created_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM project_created pc 
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = false            
            ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                    state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
            pc.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
            c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code, pc.added_date, pc.modify_date
            FROM project_created pc LEFT OUTER JOIN countries c ON pc.country_id = c.country_id LEFT OUTER JOIN states s ON pc.state_id = s.state_id
            LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = false            
            ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = []; const purpose_list = constants.project_purpose;
            for (let i = 0; row1 && i < row1.length; i++) {
                var purpose = '';
                for (let k = 0; purpose_list && k < purpose_list.length; k++) {
                    if (purpose_list[k].id.toString() == row1[i].purpose_id.toString()) {
                        purpose = purpose_list[k].name; break;
                    }
                }
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    project_cost: row1[i].project_cost,
                    start_date: row1[i].start_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].end_date)) : "",
                    purpose: purpose,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    added_date: row1[i].added_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].added_date)) : "",
                    modify_date: row1[i].modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].modify_date)) : "",
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_created_delete = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CREATE_PROJECT, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : ""; var oldProjData = null;
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT project_id, reg_id, is_floated FROM project_created WHERE unique_id = ? AND is_deleted = false`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && rowSelProj[0].reg_id.toString() == row[0].reg_id.toString()) {
                    if (rowSelProj[0].is_floated && rowSelProj[0].is_floated == true) {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Can not update floated project.', null));
                    }
                    oldProjData = rowSelProj[0];


                    const _queryUpProj = `UPDATE project_created SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE project_id = ?`;
                    const _replUpProj = [req.token_data.account_id, new Date(), oldProjData.project_id];
                    const [, updated_count] = await db.sequelize.query(_queryUpProj, { replacements: _replUpProj, type: QueryTypes.UPDATE });
                    if (updated_count > 0) {
                        return res.status(200).json(success(true, res.statusCode, "Project deleted successfully.", null));
                    } else {
                        return res.status(200).json(success(false, res.statusCode, "Unable to update record, Please try again.", null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'You are trying to update invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'You are trying to update invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_ia_selection_floated_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_IA_SELECTION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM project_created pc 
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true AND pc.is_accepted_by_ia = false 
            AND pc.purpose_id = 1 ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                    state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
            pc.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
            c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code, pc.added_date, pc.modify_date,
            COALESCE((SELECT COUNT(1) FROM project_appl_mast ii WHERE ii.project_id = pc.project_id), 0) AS appl_count
            FROM project_created pc LEFT OUTER JOIN countries c ON pc.country_id = c.country_id LEFT OUTER JOIN states s ON pc.state_id = s.state_id
            LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true AND pc.is_accepted_by_ia = false
            AND pc.purpose_id = 1 ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = []; const purpose_list = constants.project_purpose;
            for (let i = 0; row1 && i < row1.length; i++) {
                var purpose = '';
                for (let k = 0; purpose_list && k < purpose_list.length; k++) {
                    if (purpose_list[k].id.toString() == row1[i].purpose_id.toString()) {
                        purpose = purpose_list[k].name; break;
                    }
                }
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    project_cost: row1[i].project_cost,
                    start_date: row1[i].start_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].end_date)) : "",
                    purpose: purpose,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    added_date: row1[i].added_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].added_date)) : "",
                    modify_date: row1[i].modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].modify_date)) : "",
                    appl_count: row1[i].appl_count,
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_ia_selection_appl_list = async (req, res, next) => {
    const { project_id, page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_IA_SELECTION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.project_no, pc.project_name, pc.reg_id FROM project_created pc 
                WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 1 `;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {

                    var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
                    var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
                    var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
                    var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
                    var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
                    var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

                    var _sql_condition = '';
                    if (_search_text.length > 0) {
                        _sql_condition += ' AND (LOWER(um.reg_no) LIKE LOWER(:search_text) OR LOWER(um.email_id) LIKE LOWER(:search_text) ' +
                            ' OR LOWER(um.mobile_no) LIKE LOWER(:search_text) OR LOWER(um.company_name) LIKE LOWER(:search_text) OR LOWER(um.company_pan_no) LIKE LOWER(:search_text)) ';
                    }
                    if (_country_id > 0) { _sql_condition += ' AND um.country_id = :country_id '; }
                    if (_state_id > 0) { _sql_condition += ' AND um.state_id = :state_id '; }
                    if (_district_id > 0) { _sql_condition += ' AND um.district_id = :district_id '; }
                    if (_block_id > 0) { _sql_condition += ' AND um.block_id = :block_id '; }

                    const _query0 = `SELECT count(1) AS total_record FROM project_appl_mast ap INNER JOIN user_master um ON ap.reg_id = um.reg_id
                    WHERE ap.project_id = :project_id ${_sql_condition}`;
                    const row0 = await db.sequelize.query(_query0, {
                        replacements: {
                            project_id: rowSelProj[0].project_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                            state_id: _state_id, district_id: _district_id, block_id: _block_id,
                        }, type: QueryTypes.SELECT
                    });
                    var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

                    const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY ap.apply_id DESC) AS sr_no,
                    ap.unique_id, ap.apply_date,
                    um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.company_name,
                    c.country_name, s.state_name, d.district_name, b.block_name, um.pin_code,
                    ap.total_score AS total_score                   
                    FROM project_appl_mast ap INNER JOIN user_master um ON ap.reg_id = um.reg_id
                    LEFT OUTER JOIN countries c ON um.country_id = c.country_id LEFT OUTER JOIN states s ON um.state_id = s.state_id
                    LEFT OUTER JOIN districts d ON um.district_id = d.district_id LEFT OUTER JOIN blocks b ON um.block_id = b.block_id
                    WHERE ap.project_id = :project_id ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
                    const row1 = await db.sequelize.query(_query1, {
                        replacements: {
                            project_id: rowSelProj[0].project_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                            district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                        }, type: QueryTypes.SELECT
                    });
                    var list = [];
                    for (let i = 0; row1 && i < row1.length; i++) {
                        const _total_score = row1[i].total_score != null && validator.isNumeric(row1[i].total_score.toString()) ? parseFloat(row1[i].total_score) : 0;
                        list.push({
                            sr_no: row1[i].sr_no,
                            id: row1[i].unique_id,
                            first_name: row1[i].first_name,
                            middle_name: row1[i].middle_name,
                            last_name: row1[i].last_name,
                            email_id: row1[i].email_id,
                            mobile_no: row1[i].mobile_no,
                            company_name: row1[i].company_name,
                            country_name: row1[i].country_name,
                            state_name: row1[i].state_name,
                            district_name: row1[i].district_name,
                            block_name: row1[i].block_name,
                            pin_code: row1[i].pin_code,
                            apply_date: row1[i].apply_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].apply_date)) : "",
                            total_score: _total_score,
                        });
                    }
                    const results = {
                        current_page: _page_no,
                        total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                        total_record: total_record,
                        data: list,
                        project_no: rowSelProj[0].project_no,
                        project_name: rowSelProj[0].project_name,
                    };
                    return res.status(200).json(success(true, res.statusCode, "Success", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_ia_selection_appl_view = async (req, res, next) => {
    const { apply_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_IA_SELECTION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _apply_id = (apply_id && apply_id.length > 0) ? apply_id.trim() : "";
            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                const _querySelApply = `SELECT pc.unique_id AS project_unique_id, am.apply_id, pc.reg_id AS owner_reg_id, um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no,
                um.company_name, am.apply_date, am.total_score, am.apply_status, am.modify_date, am.awarded_remark, am.awarded_date, am.rejected_remark, 
                am.rejected_date FROM project_appl_mast am INNER JOIN project_created pc ON am.project_id = pc.project_id INNER JOIN user_master um ON 
                am.reg_id = um.reg_id WHERE am.unique_id = ?`;
                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [_apply_id], type: QueryTypes.SELECT });
                if (rowSelApply && rowSelApply.length > 0 && row[0].reg_id.toString() == rowSelApply[0].owner_reg_id.toString()) {
                    const rowData = rowSelApply[0];
                    const _total_score = rowData.total_score != null && validator.isNumeric(rowData.total_score.toString()) ? parseFloat(rowData.total_score) : 0;

                    var _questionnaire = await entityDataModule.project_appl_questionnaire_data(rowData.apply_id);
                    var proposalDocsUp = await entityDataModule.project_appl_proposal_docs_data(rowData.apply_id);
                    var appl_stats_list = await entityDataModule.project_appl_stats_list(rowData.apply_id);

                    const results = {
                        project_id: rowData.project_unique_id,
                        applicant: {
                            first_name: rowData.first_name,
                            middle_name: rowData.middle_name,
                            last_name: rowData.last_name,
                            email_id: rowData.email_id,
                            mobile_no: rowData.mobile_no,
                            company_name: rowData.company_name,
                        },
                        total_score: _total_score,
                        apply_date: rowData.apply_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(rowData.apply_date)) : "",
                        apply_status: rowData.apply_status,
                        modify_date: rowData.modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(rowData.modify_date)) : "",
                        awarded_remark: (rowData.awarded_remark ? rowData.awarded_remark : ""),
                        awarded_date: rowData.awarded_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(rowData.awarded_date)) : "",
                        rejected_remark: (rowData.rejected_remark ? rowData.rejected_remark : ""),
                        rejected_date: rowData.rejected_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(rowData.rejected_date)) : "",
                        questionnaire: _questionnaire,
                        proposal_documents: proposalDocsUp,
                        appl_stats_list: appl_stats_list,
                    };
                    return res.status(200).json(success(true, res.statusCode, 'Application Details.', results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid application view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid application view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_ia_selection_appl_reject = async (req, res, next) => {
    const { apply_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_IA_SELECTION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _apply_id = (apply_id != null && apply_id.length > 0) ? apply_id.trim() : "";
            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                const _querySelApply = `SELECT am.apply_id, pc.reg_id AS owner_reg_id, am.apply_status, am.project_id
                FROM project_appl_mast am INNER JOIN project_created pc ON am.project_id = pc.project_id WHERE am.unique_id = ?`;
                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [_apply_id], type: QueryTypes.SELECT });
                if (rowSelApply && rowSelApply.length > 0 && row[0].reg_id.toString() == rowSelApply[0].owner_reg_id.toString()) {
                    if (rowSelApply[0].apply_status.toString() == '0') {
                        const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                        if (_remark.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter reason to reject.', null));
                        }
                        if (_remark.length < 10) {
                            return res.status(200).json(success(false, res.statusCode, 'Reason should not be less than 10 character.', null));
                        }
                        const currDate = new Date();
                        const _queryApplyUp = `UPDATE project_appl_mast SET apply_status = 2, rejected_by = ?, rejected_date = ?, rejected_remark = ? WHERE apply_id = ? AND apply_status = 0`;
                        const _replApplyUp = [req.token_data.account_id, currDate, _remark, rowSelApply[0].apply_id];
                        const [, uqid] = await db.sequelize.query(_queryApplyUp, { replacements: _replApplyUp, type: QueryTypes.UPDATE });
                        if (uqid > 0) {
                            await entityDataModule.project_appl_stats_add(rowSelApply[0].apply_id, 2, _remark, req.token_data.account_id, currDate);

                            return res.status(200).json(success(true, res.statusCode, 'Rejected successfully.', null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to update record, Please try again.', null));
                        }
                    } else {
                        var status_text = utils.project_apply_status_text(rowSelApply[0].apply_status);
                        return res.status(200).json(success(false, res.statusCode, "Application request is already " + status_text.toLowerCase() + ".", null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_ia_selection_appl_award = async (req, res, next) => {
    const { apply_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_IA_SELECTION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _apply_id = (apply_id != null && apply_id.length > 0) ? apply_id.trim() : "";
            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                const _querySelApply = `SELECT am.apply_id, pc.reg_id AS owner_reg_id, am.apply_status, am.project_id
                FROM project_appl_mast am INNER JOIN project_created pc ON am.project_id = pc.project_id WHERE am.unique_id = ?`;
                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [_apply_id], type: QueryTypes.SELECT });
                if (rowSelApply && rowSelApply.length > 0 && row[0].reg_id.toString() == rowSelApply[0].owner_reg_id.toString()) {
                    if (rowSelApply[0].apply_status.toString() == '0') {
                        const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";

                        const _queryChkAwd = `SELECT apply_id FROM project_appl_mast WHERE project_id = ? AND apply_status IN (1)`;
                        const rowChkAwd = await db.sequelize.query(_queryChkAwd, { replacements: [rowSelApply[0].project_id], type: QueryTypes.SELECT });
                        if (rowChkAwd && rowChkAwd.length > 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Project is already awarded.', null));
                        }

                        const _queryChkAcpt = `SELECT apply_id FROM project_appl_mast WHERE project_id = ? AND apply_status IN (3)`;
                        const rowChkAcpt = await db.sequelize.query(_queryChkAcpt, { replacements: [rowSelApply[0].project_id], type: QueryTypes.SELECT });
                        if (rowChkAcpt && rowChkAcpt.length > 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Project is already accepted by IA.', null));
                        }

                        const currDate = new Date();
                        const _queryApplyUp = `UPDATE project_appl_mast SET apply_status = 1, awarded_by = ?, awarded_date = ?, awarded_remark = ? WHERE apply_id = ? AND apply_status = 0`;
                        const _replApplyUp = [req.token_data.account_id, currDate, _remark, rowSelApply[0].apply_id];
                        const [, uqid] = await db.sequelize.query(_queryApplyUp, { replacements: _replApplyUp, type: QueryTypes.UPDATE });
                        if (uqid > 0) {
                            await entityDataModule.project_appl_stats_add(rowSelApply[0].apply_id, 1, _remark, req.token_data.account_id, currDate);

                            return res.status(200).json(success(true, res.statusCode, 'Awarded successfully.', null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to update record, Please try again.', null));
                        }
                    } else {
                        var status_text = utils.project_apply_status_text(rowSelApply[0].apply_status);
                        return res.status(200).json(success(false, res.statusCode, "Application request is already " + status_text.toLowerCase() + ".", null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_crowd_funding_view_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CROWD_FUNDING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM project_created pc 
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true
            AND pc.purpose_id = 2 ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                    state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
            pc.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.funding_option_id, 
            c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code, pc.added_date, pc.modify_date,
            0 AS fund_raised
            FROM project_created pc LEFT OUTER JOIN countries c ON pc.country_id = c.country_id LEFT OUTER JOIN states s ON pc.state_id = s.state_id
            LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true
            AND pc.purpose_id = 2 ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = []; const purpose_list = constants.project_funding_option;
            for (let i = 0; row1 && i < row1.length; i++) {
                var purpose = '';
                for (let k = 0; purpose_list && k < purpose_list.length; k++) {
                    if (purpose_list[k].id.toString() == row1[i].funding_option_id.toString()) {
                        purpose = purpose_list[k].short_name; break;
                    }
                }
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    project_cost: row1[i].project_cost,
                    start_date: row1[i].start_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].end_date)) : "",
                    funding_option: purpose,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    added_date: row1[i].added_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].added_date)) : "",
                    modify_date: row1[i].modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].modify_date)) : "",
                    fund_raised: row1[i].fund_raised,
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_crowd_funding_view_details = async (req, res, next) => {
    const { project_id, page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_CROWD_FUNDING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id != null && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _query2 = `SELECT project_id, reg_id, project_no, project_name, funding_option_id, project_cost FROM project_created 
                WHERE unique_id = ? AND is_deleted = false AND is_floated = true AND purpose_id = 2`;
                const row2 = await db.sequelize.query(_query2, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (row2 && row2.length > 0 && row2[0].reg_id.toString() == row[0].reg_id.toString()) {
                    var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
                    var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
                    var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
                    var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
                    var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
                    var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

                    var _sql_condition = '';
                    if (_search_text.length > 0) {
                        _sql_condition += '  AND (LOWER(u.email_id) LIKE LOWER(:search_text) OR LOWER(u.mobile_no) LIKE LOWER(:search_text) OR ' +
                            ' LOWER(u.company_name) LIKE LOWER(:search_text) OR LOWER(u.company_pan_no) LIKE LOWER(:search_text)) ';
                    }
                    if (_country_id > 0) { _sql_condition += ' AND u.country_id = :country_id '; }
                    if (_state_id > 0) { _sql_condition += ' AND u.state_id = :state_id '; }
                    if (_district_id > 0) { _sql_condition += ' AND u.district_id = :district_id '; }
                    if (_block_id > 0) { _sql_condition += ' AND u.block_id = :block_id '; }

                    const _query0 = `SELECT count(1) AS total_record
                    FROM project_payment_fund p LEFT OUTER JOIN user_master u ON p.paid_by_reg_id = u.reg_id 
                    WHERE p.project_id = :project_id AND p.is_success = true ${_sql_condition}`;
                    const row0 = await db.sequelize.query(_query0, {
                        replacements: {
                            project_id: row2[0].project_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                            state_id: _state_id, district_id: _district_id, block_id: _block_id,
                        }, type: QueryTypes.SELECT
                    });
                    var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

                    const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY p.payment_id DESC) AS sr_no,
                    p.unique_id, p.payment_date, p.total_amount, p.pg_charges, p.protean_fees, p.tax_amount, p.net_amount, p.order_id, p.bank_ref_no, 
                    p.transactionid, u.reg_no, u.first_name, u.middle_name, u.last_name, u.email_id, u.mobile_no, u.company_name
                    FROM project_payment_fund p LEFT OUTER JOIN user_master u ON p.paid_by_reg_id = u.reg_id
                    WHERE p.project_id = :project_id AND p.is_success = true ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
                    const row1 = await db.sequelize.query(_query1, {
                        replacements: {
                            project_id: row2[0].project_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                            district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                        }, type: QueryTypes.SELECT
                    });
                    var list = [];
                    for (let i = 0; row1 && i < row1.length; i++) {
                        const _total_amount = row1[i].total_amount != null && validator.isNumeric(row1[i].total_amount.toString()) ? parseFloat(row1[i].total_amount) : 0;
                        const _pg_charges = row1[i].pg_charges != null && validator.isNumeric(row1[i].pg_charges.toString()) ? parseFloat(row1[i].pg_charges) : 0;
                        const _protean_fees = row1[i].protean_fees != null && validator.isNumeric(row1[i].protean_fees.toString()) ? parseFloat(row1[i].protean_fees) : 0;
                        const _tax_amount = row1[i].tax_amount != null && validator.isNumeric(row1[i].tax_amount.toString()) ? parseFloat(row1[i].tax_amount) : 0;
                        const _net_amount = row1[i].net_amount != null && validator.isNumeric(row1[i].net_amount.toString()) ? parseFloat(row1[i].net_amount) : 0;
                        var full_name = [];
                        if (row1[i].first_name && row1[i].first_name.length > 0) { full_name.push(row1[i].first_name); }
                        if (row1[i].middle_name && row1[i].middle_name.length > 0) { full_name.push(row1[i].middle_name); }
                        if (row1[i].last_name && row1[i].last_name.length > 0) { full_name.push(row1[i].last_name); }

                        list.push({
                            sr_no: row1[i].sr_no,
                            payment_id: row1[i].unique_id,
                            payment_date: row1[i].payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].payment_date)) : "",
                            total_amount: _total_amount,
                            pg_charges: _pg_charges,
                            protean_fees: _protean_fees,
                            tax_amount: _tax_amount,
                            net_amount: _net_amount,
                            order_id: row1[i].order_id,
                            bank_ref_no: row1[i].bank_ref_no,
                            transactionid: row1[i].transactionid,
                            reg_no: row1[i].reg_no,
                            full_name: full_name.join(' '),
                            email_id: row1[i].email_id,
                            mobile_no: row1[i].mobile_no,
                            company_name: row1[i].company_name,
                        });
                    }
                    var funding_option = ''; const project_funding_option = constants.project_funding_option;
                    for (let k = 0; project_funding_option && k < project_funding_option.length; k++) {
                        if (project_funding_option[k].id.toString() == row2[0].funding_option_id.toString()) {
                            funding_option = project_funding_option[k].short_name; break;
                        }
                    }
                    const _project_cost = row2[0].project_cost != null && validator.isNumeric(row2[0].project_cost.toString()) ? parseFloat(row2[0].project_cost) : 0;
                    const fund_raised = await entityDataModule.project_total_fund_raised(row2[0].project_id);

                    const results = {
                        project_no: row2[0].project_no,
                        project_name: row2[0].project_name,
                        funding_option: funding_option,
                        project_cost: _project_cost,
                        fund_raised: fund_raised,
                        current_page: _page_no,
                        total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                        total_record: total_record,
                        data: list,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                }
                else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_fund_transfer_agency_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) {
                _sql_condition += '  AND (LOWER(um.email_id) LIKE LOWER(:search_text) OR LOWER(um.mobile_no) LIKE LOWER(:search_text) OR ' +
                    ' LOWER(um.company_name) LIKE LOWER(:search_text) OR LOWER(um.company_pan_no) LIKE LOWER(:search_text)) ';
            }
            if (_country_id > 0) { _sql_condition += ' AND um.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND um.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND um.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND um.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM user_master um 
            WHERE um.reg_id IN (SELECT DISTINCT ia_reg_id FROM project_accepted WHERE owner_reg_id = :owner_reg_id) ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    owner_reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                    state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY um.company_name) AS sr_no,
            um.unique_id, um.reg_no, um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.company_name,
            c.country_name, s.state_name, d.district_name, b.block_name, um.pin_code
            FROM user_master um LEFT OUTER JOIN countries c ON um.country_id = c.country_id LEFT OUTER JOIN states s ON um.state_id = s.state_id
            LEFT OUTER JOIN districts d ON um.district_id = d.district_id LEFT OUTER JOIN blocks b ON um.block_id = b.block_id
            WHERE um.reg_id IN (SELECT DISTINCT ia_reg_id FROM project_accepted WHERE owner_reg_id = :owner_reg_id) ${_sql_condition}
            LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    owner_reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    reg_no: row1[i].reg_no,
                    first_name: row1[i].first_name,
                    middle_name: row1[i].middle_name,
                    last_name: row1[i].last_name,
                    email_id: row1[i].email_id,
                    mobile_no: row1[i].mobile_no,
                    company_name: row1[i].company_name,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_fund_transfer_agency_projects = async (req, res, next) => {
    const { agency_id, page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _agency_id = (agency_id != null && agency_id.length > 0) ? agency_id.trim() : "";
            if (_agency_id.length > 0 && utils.isUUID(_agency_id)) {
                const agency_reg_id = await entityDataModule.user_master_get_id(_agency_id);
                if (agency_reg_id > 0) {
                    var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
                    var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
                    var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
                    var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
                    var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
                    var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

                    var _sql_condition = '';
                    if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
                    if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
                    if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
                    if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
                    if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

                    const _query0 = `SELECT count(1) AS total_record FROM project_accepted ap INNER JOIN project_created pc ON ap.project_id = pc.project_id
                    WHERE ap.owner_reg_id = :owner_reg_id AND ap.ia_reg_id = :ia_reg_id ${_sql_condition}`;
                    const row0 = await db.sequelize.query(_query0, {
                        replacements: {
                            owner_reg_id: row[0].reg_id, ia_reg_id: agency_reg_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                            state_id: _state_id, district_id: _district_id, block_id: _block_id,
                        }, type: QueryTypes.SELECT
                    });
                    var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

                    const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
                    ap.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date,
                    c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code, ap.accepted_date,
                    COALESCE((SELECT COUNT(1) FROM project_milestone ml WHERE ml.project_id = ap.project_id AND ml.is_deleted = false), 0) AS milestones
                    FROM project_accepted ap INNER JOIN project_created pc ON ap.project_id = pc.project_id LEFT OUTER JOIN countries c ON pc.country_id = c.country_id 
                    LEFT OUTER JOIN states s ON pc.state_id = s.state_id LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id
                    WHERE ap.owner_reg_id = :owner_reg_id AND ap.ia_reg_id = :ia_reg_id ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
                    const row1 = await db.sequelize.query(_query1, {
                        replacements: {
                            owner_reg_id: row[0].reg_id, ia_reg_id: agency_reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                            district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                        }, type: QueryTypes.SELECT
                    });
                    var list = [];
                    for (let i = 0; row1 && i < row1.length; i++) {
                        list.push({
                            sr_no: row1[i].sr_no,
                            accept_id: row1[i].unique_id,
                            project_no: row1[i].project_no,
                            project_name: row1[i].project_name,
                            project_cost: row1[i].project_cost,
                            start_date: row1[i].start_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].start_date)) : "",
                            end_date: row1[i].end_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].end_date)) : "",
                            country_name: row1[i].country_name,
                            state_name: row1[i].state_name,
                            district_name: row1[i].district_name,
                            block_name: row1[i].block_name,
                            pin_code: row1[i].pin_code,
                            accepted_date: row1[i].accepted_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].accepted_date)) : "",
                            milestones: row1[i].milestones,
                        });
                    }
                    const results = {
                        current_page: _page_no,
                        total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                        total_record: total_record,
                        data: list,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid IA projects view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid IA projects view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_fund_transfer_int_milestone_list = async (req, res, next) => {
    const { accept_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id != null && accept_id.length > 0) ? accept_id.trim() : "";
            if (_accept_id.length > 0 && utils.isUUID(_accept_id)) {
                const _query1 = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pc.unique_id AS project_unique_id, pc.project_name, pc.project_no
                FROM project_accepted pa INNER JOIN project_created pc ON pa.project_id = pc.project_id WHERE pa.unique_id = ?`
                const row1 = await db.sequelize.query(_query1, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (row1 && row1.length > 0 && row1[0].owner_reg_id.toString() == row[0].reg_id.toString()) {
                    const _query2 = `SELECT pm.milestone_id, pm.milestone_no, pm.milestone_name,
                    COALESCE((SELECT COALESCE(SUM(COALESCE(ip.total_amount, 0)), 0) FROM project_payment_int ip WHERE ip.milestone_id = pm.milestone_id AND ip.accepted_id = :accepted_id AND ip.is_success = true), 0) AS paid_amount
                    FROM project_milestone pm WHERE pm.project_id = :project_id AND pm.is_deleted = false`;
                    const row2 = await db.sequelize.query(_query2, { replacements: { accepted_id: row1[0].accepted_id, project_id: row1[0].project_id }, type: QueryTypes.SELECT });
                    var milestones = [];
                    for (let i = 0; row2 && i < row2.length; i++) {
                        const paid_amount = row2[i].paid_amount != null && validator.isNumeric(row2[i].paid_amount.toString()) ? parseFloat(row2[i].paid_amount) : 0;
                        milestones.push({
                            milestone_id: row2[i].milestone_id,
                            milestone_no: row2[i].milestone_no,
                            milestone_name: row2[i].milestone_name,
                            paid_amount: paid_amount,
                            link_id: Buffer.from(JSON.stringify({ accept_id: _accept_id, milestone_id: row2[i].milestone_id })).toString('base64'),
                        });
                    }
                    const results = {
                        project_id: row1[0].project_unique_id,
                        project_name: row1[0].project_name,
                        project_no: row1[0].project_no,
                        milestones: milestones,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_fund_transfer_int_milestone_payments = async (req, res, next) => {
    const { link_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var linkData = null; var accept_id = ''; var milestone_id = '';
            try {
                linkData = JSON.parse(Buffer.from(link_id, 'base64'));
                if (linkData != null) {
                    accept_id = linkData.accept_id;
                    milestone_id = linkData.milestone_id;
                }
            } catch (_) {
            }

            const _accept_id = (accept_id != null && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0;

            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _query1 = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pc.unique_id AS project_unique_id, pc.project_name, pc.project_no
                FROM project_accepted pa INNER JOIN project_created pc ON pa.project_id = pc.project_id WHERE pa.unique_id = ?`
                const row1 = await db.sequelize.query(_query1, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (row1 && row1.length > 0 && row1[0].owner_reg_id.toString() == row[0].reg_id.toString()) {
                    const _query2 = `SELECT milestone_id, milestone_no, milestone_name FROM project_milestone WHERE project_id = ? AND milestone_id = ? AND is_deleted = false`;
                    const row2 = await db.sequelize.query(_query2, { replacements: [row1[0].project_id, _milestone_id], type: QueryTypes.SELECT });
                    if (row2 && row2.length > 0) {
                        const _queryHis = `SELECT p.unique_id, p.payment_date, p.total_amount, p.pg_charges, p.protean_fees, p.tax_amount, p.net_amount
                        FROM project_payment_int p WHERE p.accepted_id = ? AND p.milestone_id = ? AND p.is_success = true ORDER BY p.payment_id DESC`;
                        const rowHis = await db.sequelize.query(_queryHis, { replacements: [row1[0].accepted_id, row2[0].milestone_id], type: QueryTypes.SELECT });
                        var pay_history = [];
                        for (let i = 0; rowHis && i < rowHis.length; i++) {
                            const eleHis = rowHis[i];
                            const _total_amount = eleHis.total_amount != null && validator.isNumeric(eleHis.total_amount.toString()) ? parseFloat(eleHis.total_amount) : 0;
                            const _pg_charges = eleHis.pg_charges != null && validator.isNumeric(eleHis.pg_charges.toString()) ? parseFloat(eleHis.pg_charges) : 0;
                            const _protean_fees = eleHis.protean_fees != null && validator.isNumeric(eleHis.protean_fees.toString()) ? parseFloat(eleHis.protean_fees) : 0;
                            const _tax_amount = eleHis.tax_amount != null && validator.isNumeric(eleHis.tax_amount.toString()) ? parseFloat(eleHis.tax_amount) : 0;
                            const _net_amount = eleHis.net_amount != null && validator.isNumeric(eleHis.net_amount.toString()) ? parseFloat(eleHis.net_amount) : 0;
                            pay_history.push({
                                payment_id: eleHis.unique_id,
                                payment_date: eleHis.payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(eleHis.payment_date)) : "",
                                total_amount: _total_amount,
                                pg_charges: _pg_charges,
                                protean_fees: _protean_fees,
                                tax_amount: _tax_amount,
                                net_amount: _net_amount,
                            });
                        }
                        const pay_charges = await commonModule.project_charges_config_data('LOOKING_IA_INT');
                        const results = {
                            accept_id: _accept_id,
                            project_id: row1[0].project_unique_id,
                            project_name: row1[0].project_name,
                            milestone_no: row2[0].milestone_no,
                            milestone_name: row2[0].milestone_name,
                            pay_charges: pay_charges,
                            pay_history: pay_history,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_fund_transfer_int_milestone_pay_get = async (req, res, next) => {
    const { link_id, total_amount, pg_charges, protean_fees, tax_amount, net_amount,
        user_agent, browser_language, browser_javascript_enabled, browser_tz, browser_color_depth, browser_java_enabled,
        browser_screen_height, browser_screen_width } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var linkData = null; var accept_id = ''; var milestone_id = '';
            try {
                linkData = JSON.parse(Buffer.from(link_id, 'base64'));
                if (linkData != null) {
                    accept_id = linkData.accept_id;
                    milestone_id = linkData.milestone_id;
                }
            } catch (_) {
            }

            const _accept_id = (accept_id != null && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0;

            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {

                const _user_agent = (user_agent != null && user_agent.length > 0) ? user_agent : "";
                const _total_amount = total_amount != null && validator.isNumeric(total_amount.toString()) ? parseFloat(parseFloat(total_amount).toFixed(2)) : 0;
                if (_total_amount <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Please enter payment amount.', null));
                }
                const _pg_charges = pg_charges != null && validator.isNumeric(pg_charges.toString()) ? parseFloat(parseFloat(pg_charges).toFixed(2)) : 0;
                const _protean_fees = protean_fees != null && validator.isNumeric(protean_fees.toString()) ? parseFloat(parseFloat(protean_fees).toFixed(2)) : 0;
                const _tax_amount = tax_amount != null && validator.isNumeric(tax_amount.toString()) ? parseFloat(parseFloat(tax_amount).toFixed(2)) : 0;
                const _net_amount = net_amount != null && validator.isNumeric(net_amount.toString()) ? parseFloat(parseFloat(net_amount).toFixed(2)) : 0;
                if (_net_amount <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Net payable amount cannot be zero.', null));
                }
                const pay_charges = await commonModule.project_charges_config_data('LOOKING_IA_INT');

                var _pg_chargesNew = 0;
                if (pay_charges.pg_amt_type.toString() == '1') {
                    _pg_chargesNew = parseFloat(parseFloat((_total_amount * pay_charges.pg_charges / 100).toString()).toFixed(2));
                } else {
                    _pg_chargesNew = parseFloat(parseFloat(pay_charges.pg_charges.toString()).toFixed(2));
                }
                if (_pg_charges != _pg_chargesNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid payment gateway charges.', null));
                }

                var _protean_feesNew = 0;
                if (pay_charges.pf_amt_type.toString() == '1') {
                    _protean_feesNew = parseFloat(parseFloat((_total_amount * pay_charges.protean_fees / 100).toString()).toFixed(2));
                } else {
                    _protean_feesNew = parseFloat(parseFloat(pay_charges.protean_fees.toString()).toFixed(2));
                }
                if (_protean_fees != _protean_feesNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid protean fees.', null));
                }

                var _tax_amountNew = 0;
                if (pay_charges.tax_amt_type.toString() == '1') {
                    _tax_amountNew = parseFloat(parseFloat((_total_amount * pay_charges.tax_charges / 100).toString()).toFixed(2));
                } else {
                    _tax_amountNew = parseFloat(parseFloat(pay_charges.tax_charges.toString()).toFixed(2));
                }
                if (_tax_amount != _tax_amountNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid taxes amount.', null));
                }

                var _net_amountNew = parseFloat((_total_amount + _pg_chargesNew + _protean_feesNew + _tax_amountNew).toFixed(2));
                if (_net_amount != _net_amountNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid net payable amount.', null));
                }

                if (_user_agent.toLowerCase().trim() != req.headers['user-agent'].toLowerCase().trim()) {
                    return res.status(200).json(success(false, res.statusCode, 'browser user agent does not matched.', null));
                }

                const _query1 = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pc.unique_id AS project_unique_id, pc.project_name, pc.project_no
                FROM project_accepted pa INNER JOIN project_created pc ON pa.project_id = pc.project_id WHERE pa.unique_id = ?`
                const row1 = await db.sequelize.query(_query1, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (row1 && row1.length > 0 && row1[0].owner_reg_id.toString() == row[0].reg_id.toString()) {
                    const _query2 = `SELECT milestone_id, milestone_no, milestone_name FROM project_milestone WHERE project_id = ? AND milestone_id = ? AND is_deleted = false`;
                    const row2 = await db.sequelize.query(_query2, { replacements: [row1[0].project_id, _milestone_id], type: QueryTypes.SELECT });
                    if (row2 && row2.length > 0) {

                        const temp_id = await commonModule.payment_order_id_new(); const currDate = new Date();
                        if (temp_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to create order id, Please try again.', null));
                        }

                        const order_id = constants.proj_payment_order_id_int_prefix + temp_id.toString(); const order_date = dateFormat(constants.payment_api_order_date_format, currDate);
                        var ip = ''; try { const clientIp = requestIp.getClientIp(req); ip = clientIp; } catch { }
                        const _traceid = crypto.randomUUID().toString().replaceAll('-', ''); const _timestamp = currDate.getTime().toString();
                        const _browser_javascript_enabled = browser_javascript_enabled && browser_javascript_enabled.toString().toLowerCase() == 'true' ? true : false;

                        var deviceObj = {
                            accept_header: 'text/html', init_channel: 'internet', ip: ip,
                            user_agent: user_agent, browser_language: browser_language,
                            browser_javascript_enabled: _browser_javascript_enabled,
                        }
                        if (_browser_javascript_enabled) {
                            deviceObj['browser_tz'] = browser_tz;
                            deviceObj['browser_color_depth'] = browser_color_depth;
                            deviceObj['browser_java_enabled'] = browser_java_enabled;
                            deviceObj['browser_screen_height'] = browser_screen_height;
                            deviceObj['browser_screen_width'] = browser_screen_width;
                        }
                        const returnUrl = `${process.env.APIS_BASE_URL}bill_desk_response`;

                        const payment_raw_object = JSON.stringify({
                            orderid: order_id,
                            mercid: process.env.BILL_DESK_MERCID,
                            order_date: order_date,
                            amount: _net_amount.toFixed(2),
                            currency: '356',
                            ru: returnUrl,
                            itemcode: 'DIRECT',
                            device: deviceObj,
                        });

                        const req_signature = billDeskModule.jws_hmac(payment_raw_object);

                        const kvm_response = await billDeskModule.create_order(payment_raw_object, req_signature, _traceid, _timestamp);

                        if (kvm_response.status == 200) {
                            const success_text = await kvm_response.text();
                            const is_verified = jws.verify(success_text, "HS256", process.env.BILL_DESK_SECRETKEY);
                            if (is_verified) {
                                const success_data = jws.decode(success_text);
                                if (success_data != null) {
                                    const payloadData = JSON.parse(success_data.payload);
                                    var _authToken = '';
                                    for (let pl = 0; pl < payloadData.links.length; pl++) {
                                        if (payloadData.links[pl].rel == payloadData.next_step) {
                                            _authToken = payloadData.links[pl].headers.authorization;
                                        }
                                    }

                                    const _queryPayIn = `INSERT INTO project_payment_int(accepted_id, project_id, milestone_id, payment_date, total_amount, pg_charges,
                                        protean_fees, tax_amount, net_amount, added_by, order_id, order_date, ip_address, bd_traceid, bd_timestamp, create_order_payload_object,
                                        create_order_payload_signature, create_order_resp_signature, create_order_resp_object) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                        ?, ?, ?, ?) RETURNING "payment_id", "unique_id"`;
                                    const _replPayIn = [row1[0].accepted_id, row1[0].project_id, _milestone_id, currDate, _total_amount, _pg_charges,
                                        _protean_fees, _tax_amount, _net_amount, req.token_data.account_id, order_id, order_date, ip, _traceid, _timestamp, payment_raw_object,
                                        req_signature, success_text, JSON.stringify(success_data)];
                                    const [rowPayIn] = await db.sequelize.query(_queryPayIn, { replacements: _replPayIn, returning: true });
                                    const _new_pay_id = (rowPayIn && rowPayIn.length > 0 && rowPayIn[0] ? rowPayIn[0].payment_id : 0);
                                    const _new_unique_id = (rowPayIn && rowPayIn.length > 0 && rowPayIn[0] ? rowPayIn[0].unique_id : 0);
                                    if (_new_pay_id > 0) {
                                        var flow_config = {
                                            merchantLogo: process.env.MERCHANT_LOGO,
                                            merchantId: payloadData.mercid,
                                            bdOrderId: payloadData.bdorderid,
                                            authToken: _authToken,
                                            childWindow: true,
                                            returnUrl: "",
                                            retryCount: constants.proj_payment_retry_count,
                                            prefs: billDeskModule.preferences,
                                            netBanking: billDeskModule.net_banking,
                                            payment_id: _new_unique_id,
                                        };

                                        const logData = {
                                            base_url: process.env.BILL_DESK_URL, traceid: _traceid, order_id: order_id,
                                            payload: payment_raw_object, signature: req_signature
                                        };
                                        paymentService.log_bill_desk_payment('info', ip, 'Order Created & Ready For Payment', logData);

                                        return res.status(200).json(success(true, res.statusCode, '', flow_config));
                                    } else {
                                        return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                                    }
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Payment gateway response decoding failed.', null));
                                }
                            } else {
                                return res.status(200).json(success(false, res.statusCode, 'Payment gateway response verification failed.', null));
                            }
                        } else {
                            var error_msg = ''; var error_data = null;
                            try {
                                const error_text = await kvm_response.text();
                                const is_verified = jws.verify(error_text, "HS256", process.env.BILL_DESK_SECRETKEY);
                                if (is_verified) {
                                    error_data = jws.decode(error_text);
                                    if (error_data != null) {
                                        const payloadData = JSON.parse(error_data.payload);
                                        error_msg = payloadData != null && payloadData.message != null && payloadData.message.length > 0 ? payloadData.message : '';
                                    }
                                }
                            } catch (_) {
                            }
                            if (error_msg.length <= 0) {
                                error_msg = kvm_response.statusText;
                            }

                            const logData = {
                                base_url: process.env.BILL_DESK_URL, traceid: _traceid, order_id: order_id,
                                payload: payment_raw_object, signature: req_signature
                            };
                            paymentService.log_bill_desk_payment('error', ip, 'Gateway Error: ' + error_msg, logData);

                            return res.status(200).json(success(false, res.statusCode, 'Payment gateway error.<br>"' + error_msg + '".', null));
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_fund_transfer_int_milestone_pay_chk = async (req, res, next) => {
    const { payment_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _payment_id = (payment_id != null && payment_id.length > 0) ? payment_id.trim() : "";
        if (_payment_id.length > 0 && utils.isUUID(_payment_id)) {

            const _query = `SELECT is_success, bank_ref_no, transactionid, payment_date FROM project_payment_int WHERE unique_id = ?`;
            const row = await db.sequelize.query(_query, { replacements: [_payment_id], type: QueryTypes.SELECT });
            if (row && row.length > 0) {
                const is_success = (row[0].is_success && row[0].is_success == true ? true : false);
                const results = {
                    is_success: is_success,
                    bank_ref_no: row[0].bank_ref_no,
                    transactionid: row[0].transactionid,
                    payment_date: row[0].payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row[0].payment_date)) : "",
                };
                return res.status(200).json(success(true, res.statusCode, '', results));
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid payment id.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, 'Invalid payment id.', null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};


const project_fund_transfer_ext_payments = async (req, res, next) => {
    const { agency_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _agency_id = (agency_id != null && agency_id.length > 0) ? agency_id.trim() : "";
            if (_agency_id.length > 0 && utils.isUUID(_agency_id)) {

                const _queryAgency = `SELECT reg_id, company_name FROM user_master WHERE unique_id = ?`;
                const rowAgency = await db.sequelize.query(_queryAgency, { replacements: [_agency_id], type: QueryTypes.SELECT });
                if (rowAgency && rowAgency.length > 0) {
                    const _query1 = `SELECT accepted_id FROM project_accepted WHERE owner_reg_id = ? AND ia_reg_id = ?`;
                    const row1 = await db.sequelize.query(_query1, { replacements: [row[0].reg_id, rowAgency[0].reg_id], type: QueryTypes.SELECT });
                    if (row1 && row1.length > 0) {

                        const _queryHis = `SELECT p.unique_id, p.project_name, p.milestone_name, p.payment_date, p.total_amount, p.pg_charges, p.protean_fees, 
                        p.tax_amount, p.net_amount FROM project_payment_ext p WHERE p.paid_by_reg_id = ? AND p.paid_to_reg_id = ? AND p.is_success = true ORDER BY p.payment_id DESC`;
                        const rowHis = await db.sequelize.query(_queryHis, { replacements: [row[0].reg_id, rowAgency[0].reg_id], type: QueryTypes.SELECT });
                        var pay_history = [];
                        for (let i = 0; rowHis && i < rowHis.length; i++) {
                            const eleHis = rowHis[i];
                            const _total_amount = eleHis.total_amount != null && validator.isNumeric(eleHis.total_amount.toString()) ? parseFloat(eleHis.total_amount) : 0;
                            const _pg_charges = eleHis.pg_charges != null && validator.isNumeric(eleHis.pg_charges.toString()) ? parseFloat(eleHis.pg_charges) : 0;
                            const _protean_fees = eleHis.protean_fees != null && validator.isNumeric(eleHis.protean_fees.toString()) ? parseFloat(eleHis.protean_fees) : 0;
                            const _tax_amount = eleHis.tax_amount != null && validator.isNumeric(eleHis.tax_amount.toString()) ? parseFloat(eleHis.tax_amount) : 0;
                            const _net_amount = eleHis.net_amount != null && validator.isNumeric(eleHis.net_amount.toString()) ? parseFloat(eleHis.net_amount) : 0;

                            pay_history.push({
                                payment_id: eleHis.unique_id,
                                project_name: eleHis.project_name,
                                milestone_name: eleHis.milestone_name,
                                payment_date: eleHis.payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(eleHis.payment_date)) : "",
                                total_amount: _total_amount,
                                pg_charges: _pg_charges,
                                protean_fees: _protean_fees,
                                tax_amount: _tax_amount,
                                net_amount: _net_amount,
                            });
                        }

                        const pay_charges = await commonModule.project_charges_config_data('LOOKING_IA_EXT');
                        const results = {
                            company_name: rowAgency[0].company_name,
                            pay_charges: pay_charges,
                            pay_history: pay_history,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));

                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid agency payments view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid agency payments view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid agency payments view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_fund_transfer_ext_pay_get = async (req, res, next) => {
    const { agency_id, project_name, milestone_name,
        total_amount, pg_charges, protean_fees, tax_amount, net_amount,
        user_agent, browser_language, browser_javascript_enabled, browser_tz, browser_color_depth, browser_java_enabled,
        browser_screen_height, browser_screen_width } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {

            const _agency_id = (agency_id != null && agency_id.length > 0) ? agency_id.trim() : "";
            if (_agency_id.length > 0 && utils.isUUID(_agency_id)) {

                const _project_name = (project_name != null && project_name.length > 0) ? project_name.trim() : "";
                if (_project_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Please enter project name.', null));
                }
                const _milestone_name = (milestone_name != null && milestone_name.length > 0) ? milestone_name.trim() : "";
                if (_milestone_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Please enter milestone name.', null));
                }
                const _user_agent = (user_agent != null && user_agent.length > 0) ? user_agent : "";
                const _total_amount = total_amount != null && validator.isNumeric(total_amount.toString()) ? parseFloat(parseFloat(total_amount).toFixed(2)) : 0;
                if (_total_amount <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Please enter payment amount.', null));
                }
                const _pg_charges = pg_charges != null && validator.isNumeric(pg_charges.toString()) ? parseFloat(parseFloat(pg_charges).toFixed(2)) : 0;
                const _protean_fees = protean_fees != null && validator.isNumeric(protean_fees.toString()) ? parseFloat(parseFloat(protean_fees).toFixed(2)) : 0;
                const _tax_amount = tax_amount != null && validator.isNumeric(tax_amount.toString()) ? parseFloat(parseFloat(tax_amount).toFixed(2)) : 0;
                const _net_amount = net_amount != null && validator.isNumeric(net_amount.toString()) ? parseFloat(parseFloat(net_amount).toFixed(2)) : 0;
                if (_net_amount <= 0) {
                    return res.status(200).json(success(false, res.statusCode, 'Net payable amount cannot be zero.', null));
                }
                const pay_charges = await commonModule.project_charges_config_data('LOOKING_IA_EXT');
                var _pg_chargesNew = 0;
                if (pay_charges.pg_amt_type.toString() == '1') {
                    _pg_chargesNew = parseFloat(parseFloat((_total_amount * pay_charges.pg_charges / 100).toString()).toFixed(2));
                } else {
                    _pg_chargesNew = parseFloat(parseFloat(pay_charges.pg_charges.toString()).toFixed(2));
                }
                if (_pg_charges != _pg_chargesNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid payment gateway charges.', null));
                }

                var _protean_feesNew = 0;
                if (pay_charges.pf_amt_type.toString() == '1') {
                    _protean_feesNew = parseFloat(parseFloat((_total_amount * pay_charges.protean_fees / 100).toString()).toFixed(2));
                } else {
                    _protean_feesNew = parseFloat(parseFloat(pay_charges.protean_fees.toString()).toFixed(2));
                }
                if (_protean_fees != _protean_feesNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid protean fees.', null));
                }

                var _tax_amountNew = 0;
                if (pay_charges.tax_amt_type.toString() == '1') {
                    _tax_amountNew = parseFloat(parseFloat((_total_amount * pay_charges.tax_charges / 100).toString()).toFixed(2));
                } else {
                    _tax_amountNew = parseFloat(parseFloat(pay_charges.tax_charges.toString()).toFixed(2));
                }
                if (_tax_amount != _tax_amountNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid taxes amount.', null));
                }

                var _net_amountNew = parseFloat((_total_amount + _pg_chargesNew + _protean_feesNew + _tax_amountNew).toFixed(2));
                if (_net_amount != _net_amountNew) {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid net payable amount.', null));
                }

                if (_user_agent.toLowerCase().trim() != req.headers['user-agent'].toLowerCase().trim()) {
                    return res.status(200).json(success(false, res.statusCode, 'browser user agent does not matched.', null));
                }

                const _queryAgency = `SELECT reg_id, company_name FROM user_master WHERE unique_id = ?`;
                const rowAgency = await db.sequelize.query(_queryAgency, { replacements: [_agency_id], type: QueryTypes.SELECT });
                if (rowAgency && rowAgency.length > 0) {
                    const _query1 = `SELECT accepted_id FROM project_accepted WHERE owner_reg_id = ? AND ia_reg_id = ?`;
                    const row1 = await db.sequelize.query(_query1, { replacements: [row[0].reg_id, rowAgency[0].reg_id], type: QueryTypes.SELECT });
                    if (row1 && row1.length > 0) {

                        const temp_id = await commonModule.payment_order_id_new(); const currDate = new Date();
                        if (temp_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to create order id, Please try again.', null));
                        }
                        const order_id = constants.proj_payment_order_id_ext_prefix + temp_id.toString(); const order_date = dateFormat(constants.payment_api_order_date_format, currDate);
                        var ip = ''; try { const clientIp = requestIp.getClientIp(req); ip = clientIp; } catch { }
                        const _traceid = crypto.randomUUID().toString().replaceAll('-', ''); const _timestamp = currDate.getTime().toString();
                        const _browser_javascript_enabled = browser_javascript_enabled && browser_javascript_enabled.toString().toLowerCase() == 'true' ? true : false;

                        var deviceObj = {
                            accept_header: 'text/html', init_channel: 'internet', ip: ip,
                            user_agent: user_agent, browser_language: browser_language,
                            browser_javascript_enabled: _browser_javascript_enabled,
                        }
                        if (_browser_javascript_enabled) {
                            deviceObj['browser_tz'] = browser_tz;
                            deviceObj['browser_color_depth'] = browser_color_depth;
                            deviceObj['browser_java_enabled'] = browser_java_enabled;
                            deviceObj['browser_screen_height'] = browser_screen_height;
                            deviceObj['browser_screen_width'] = browser_screen_width;
                        }
                        const returnUrl = `${process.env.APIS_BASE_URL}bill_desk_response`;

                        const payment_raw_object = JSON.stringify({
                            orderid: order_id,
                            mercid: process.env.BILL_DESK_MERCID,
                            order_date: order_date,
                            amount: _net_amount.toFixed(2),
                            currency: '356',
                            ru: returnUrl,
                            itemcode: 'DIRECT',
                            device: deviceObj,
                        });

                        const req_signature = billDeskModule.jws_hmac(payment_raw_object);

                        const kvm_response = await billDeskModule.create_order(payment_raw_object, req_signature, _traceid, _timestamp);

                        if (kvm_response.status == 200) {
                            const success_text = await kvm_response.text();
                            const is_verified = jws.verify(success_text, "HS256", process.env.BILL_DESK_SECRETKEY);
                            if (is_verified) {
                                const success_data = jws.decode(success_text);
                                if (success_data != null) {

                                    const payloadData = JSON.parse(success_data.payload);
                                    var _authToken = '';
                                    for (let pl = 0; pl < payloadData.links.length; pl++) {
                                        if (payloadData.links[pl].rel == payloadData.next_step) {
                                            _authToken = payloadData.links[pl].headers.authorization;
                                        }
                                    }


                                    const _queryPayIn = `INSERT INTO project_payment_ext(paid_by_reg_id, paid_to_reg_id, project_name, milestone_name, payment_date, total_amount, pg_charges, 
                                        protean_fees, tax_amount, net_amount, added_by, order_id, order_date, ip_address, bd_traceid, bd_timestamp, create_order_payload_object, 
                                        create_order_payload_signature, create_order_resp_signature, create_order_resp_object) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        RETURNING "payment_id", "unique_id"`;
                                    const _replPayIn = [row[0].reg_id, rowAgency[0].reg_id, _project_name, _milestone_name, currDate, _total_amount, _pg_charges,
                                        _protean_fees, _tax_amount, _net_amount, req.token_data.account_id, order_id, order_date, ip, _traceid, _timestamp, payment_raw_object,
                                        req_signature, success_text, JSON.stringify(success_data)
                                    ];
                                    const [rowPayIn] = await db.sequelize.query(_queryPayIn, { replacements: _replPayIn, returning: true });
                                    const _new_pay_id = (rowPayIn && rowPayIn.length > 0 && rowPayIn[0] ? rowPayIn[0].payment_id : 0);
                                    const _new_unique_id = (rowPayIn && rowPayIn.length > 0 && rowPayIn[0] ? rowPayIn[0].unique_id : 0);
                                    if (_new_pay_id > 0) {
                                        var flow_config = {
                                            merchantLogo: process.env.MERCHANT_LOGO,
                                            merchantId: payloadData.mercid,
                                            bdOrderId: payloadData.bdorderid,
                                            authToken: _authToken,
                                            childWindow: true,
                                            returnUrl: "",
                                            retryCount: constants.proj_payment_retry_count,
                                            prefs: billDeskModule.preferences,
                                            netBanking: billDeskModule.net_banking,
                                            payment_id: _new_unique_id,
                                        };

                                        const logData = {
                                            base_url: process.env.BILL_DESK_URL, traceid: _traceid, order_id: order_id,
                                            payload: payment_raw_object, signature: req_signature
                                        };
                                        paymentService.log_bill_desk_payment('info', ip, 'Order Created & Ready For Payment', logData);

                                        return res.status(200).json(success(true, res.statusCode, '', flow_config));
                                    } else {
                                        return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                                    }
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Payment gateway response decoding failed.', null));
                                }
                            } else {
                                return res.status(200).json(success(false, res.statusCode, 'Payment gateway response verification failed.', null));
                            }
                        } else {
                            var error_msg = ''; var error_data = null;
                            try {
                                const error_text = await kvm_response.text();
                                const is_verified = jws.verify(error_text, "HS256", process.env.BILL_DESK_SECRETKEY);
                                if (is_verified) {
                                    error_data = jws.decode(error_text);
                                    if (error_data != null) {
                                        const payloadData = JSON.parse(error_data.payload);
                                        error_msg = payloadData != null && payloadData.message != null && payloadData.message.length > 0 ? payloadData.message : '';
                                    }
                                }
                            } catch (_) {
                            }
                            if (error_msg.length <= 0) {
                                error_msg = kvm_response.statusText;
                            }

                            const logData = {
                                base_url: process.env.BILL_DESK_URL, traceid: _traceid, order_id: order_id,
                                payload: payment_raw_object, signature: req_signature
                            };
                            paymentService.log_bill_desk_payment('error', ip, 'Gateway Error: ' + error_msg, logData);

                            return res.status(200).json(success(false, res.statusCode, 'Payment gateway error.<br>"' + error_msg + '".', null));
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid agency payments view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid agency payments view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid agency payments view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    }
    catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_fund_transfer_ext_pay_chk = async (req, res, next) => {
    const { payment_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_FUND_TRANSFER, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _payment_id = (payment_id != null && payment_id.length > 0) ? payment_id.trim() : "";
        if (_payment_id.length > 0 && utils.isUUID(_payment_id)) {

            const _query = `SELECT is_success, bank_ref_no, transactionid, payment_date FROM project_payment_ext WHERE unique_id = ?`;
            const row = await db.sequelize.query(_query, { replacements: [_payment_id], type: QueryTypes.SELECT });
            if (row && row.length > 0) {
                const is_success = (row[0].is_success && row[0].is_success == true ? true : false);
                const results = {
                    is_success: is_success,
                    bank_ref_no: row[0].bank_ref_no,
                    transactionid: row[0].transactionid,
                    payment_date: row[0].payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row[0].payment_date)) : "",
                };
                return res.status(200).json(success(true, res.statusCode, '', results));
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid payment id.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, 'Invalid payment id.', null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};


const project_proposal_doc_get_url = async (req, res, next) => {
    const { id, file_id } = req.body;
    try {
        var _id = (id != null && id.length > 0 ? id : "");
        const _file_id = file_id != null && validator.isNumeric(file_id.toString()) ? BigInt(file_id) : 0;
        if (utils.isUUID(_id)) {
            const resp = await entityDataModule.project_appl_proposal_doc_signed_url(_id, _file_id);
            return res.status(200).json(success(true, res.statusCode, "", resp));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Invalid document request.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_project_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM project_accepted ap INNER JOIN project_created pc ON ap.project_id = pc.project_id
            WHERE (ap.owner_reg_id = :curr_reg_id OR ap.ia_reg_id = :curr_reg_id) ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    curr_reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id,
                    state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY ap.accepted_id DESC) AS sr_no,
            ap.unique_id, ap.owner_reg_id, ap.ia_reg_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
            pc.unique_id AS project_unique_id, c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code, pc.added_date, pc.modify_date,
            uo.company_name AS o_company_name, ui.company_name AS i_company_name
            FROM project_accepted ap INNER JOIN project_created pc ON ap.project_id = pc.project_id 
            LEFT OUTER JOIN user_master uo ON ap.owner_reg_id = uo.reg_id LEFT OUTER JOIN user_master ui ON ap.ia_reg_id = ui.reg_id            
            LEFT OUTER JOIN countries c ON pc.country_id = c.country_id 
            LEFT OUTER JOIN states s ON pc.state_id = s.state_id LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id
            WHERE (ap.owner_reg_id = :curr_reg_id OR ap.ia_reg_id = :curr_reg_id) ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    curr_reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                const is_project_owner = (row1[i].owner_reg_id.toString() == row[0].reg_id.toString() ? true : false);
                const _project_cost = row1[i].project_cost != null && validator.isNumeric(row1[i].project_cost.toString()) ? parseFloat(parseFloat(row1[i].project_cost).toFixed(2)) : 0;

                list.push({
                    sr_no: row1[i].sr_no,
                    is_project_owner: is_project_owner,
                    accept_id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    project_cost: _project_cost,
                    start_date: row1[i].start_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].end_date)) : "",
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    added_date: row1[i].added_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].added_date)) : "",
                    modify_date: row1[i].modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].modify_date)) : "",
                    owner_company_name: row1[i].o_company_name,
                    ia_company_name: row1[i].i_company_name,
                });
            }

            const is_ia_login = row[0].entity_id.toString() == '5' ? true : false;

            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
                is_ia_login: is_ia_login,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_project_view = async (req, res, next) => {
    const { accept_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            if (_accept_id.length > 0 && utils.isUUID(_accept_id)) {
                const _querySelProj = `SELECT pa.project_id, pa.apply_id, am.unique_id AS apply_unique_id, pa.accepted_date, pa.owner_reg_id, pa.ia_reg_id,
                pc.unique_id AS project_unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
                pc.funding_option_id, pc.proj_objective, pc.proj_summary, pc.beneficiary_detail, pc.mapped_under, pc.sdg_goals, pc.esg_objective,
                COALESCE((SELECT t.thematic_name FROM thematic_area t WHERE t.thematic_id = COALESCE(pc.thematic_id, 0) LIMIT 1), '') AS thematic_area,
                COALESCE((SELECT t.country_name FROM countries t WHERE t.country_id = COALESCE(pc.country_id, 0) LIMIT 1), '') AS country_name,
                COALESCE((SELECT t.state_name FROM states t WHERE t.state_id = COALESCE(pc.state_id, 0) LIMIT 1), '') AS state_name,
                COALESCE((SELECT t.district_name FROM districts t WHERE t.district_id = COALESCE(pc.district_id, 0) LIMIT 1), '') AS district_name,
                COALESCE((SELECT t.block_name FROM blocks t WHERE t.block_id = COALESCE(pc.block_id, 0) LIMIT 1), '') AS block_name, pc.pin_code,
                pc.incharge_full_name, pc.incharge_designation, pc.incharge_email_id, pc.incharge_mobile_ccc, pc.incharge_mobile_no, pc.visible_to_all_ia,
                pc.visible_ia_list,

                uo.first_name AS o_first_name, uo.middle_name AS o_middle_name, uo.last_name AS o_last_name, uo.email_id AS o_email_id, 
                uo.mobile_ccc AS o_mobile_ccc, uo.mobile_no AS o_mobile_no, uo.company_name AS o_company_name,

                ui.first_name AS i_first_name, ui.middle_name AS i_middle_name, ui.last_name AS i_last_name, ui.email_id AS i_email_id, 
                ui.mobile_ccc AS i_mobile_ccc, ui.mobile_no AS i_mobile_no, ui.company_name AS i_company_name

                FROM project_accepted pa INNER JOIN project_created pc ON pa.project_id = pc.project_id
                LEFT OUTER JOIN user_master uo ON pa.owner_reg_id = uo.reg_id
                LEFT OUTER JOIN user_master ui ON pa.ia_reg_id = ui.reg_id
                LEFT OUTER JOIN project_appl_mast am ON pa.apply_id = am.apply_id

                WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && (
                    row[0].reg_id.toString() == rowSelProj[0].owner_reg_id.toString() || row[0].reg_id.toString() == rowSelProj[0].ia_reg_id.toString()
                )) {
                    const rowData = rowSelProj[0]; var visible_to_ia_list = [];
                    const is_project_owner = (rowData.owner_reg_id.toString() == row[0].reg_id.toString() ? true : false);
                    const visible_to_all_ia = (rowData.visible_to_all_ia && rowData.visible_to_all_ia == true ? true : false);
                    if (!visible_to_all_ia && rowData.visible_ia_list && rowData.visible_ia_list.length > 0) {
                        visible_to_ia_list = await entityDataModule.project_visible_to_ia_list(rowData.visible_ia_list);
                    }

                    var purpose = '';
                    for (let p = 0; p < constants.project_purpose.length; p++) {
                        if (constants.project_purpose[p].id.toString() == rowData.purpose_id.toString()) {
                            purpose = constants.project_purpose[p].name; break;
                        }
                    }
                    var funding_option = '';
                    for (let p = 0; p < constants.project_funding_option.length; p++) {
                        if (constants.project_funding_option[p].id == rowData.funding_option_id) {
                            funding_option = constants.project_funding_option[p].name; break;
                        }
                    }
                    var mapped_under = '';
                    for (let p = 0; p < constants.project_mapped_under.length; p++) {
                        if (constants.project_mapped_under[p].id.toString().toLowerCase() == rowData.mapped_under.toString().toLowerCase()) {
                            mapped_under = constants.project_mapped_under[p].name; break;
                        }
                    }
                    var sdg_goals = [];
                    if (rowData.sdg_goals && rowData.sdg_goals.length > 0) {
                        sdg_goals = await commonModule.project_sdg_goals_get_by_ids(rowData.sdg_goals);
                    }
                    const dynamic_values = await commonModule.project_dynamic_field_data(rowData.project_id);
                    const my_scope_of_work = await entityDataModule.project_scope_of_work_view_data(rowData.project_id);
                    var questionnaire = await entityDataModule.project_questionnaire_data(rowData.project_id);
                    for (let i = 0; questionnaire && i < questionnaire.length; i++) {
                        try { questionnaire[i].max_score = parseFloat(questionnaire[i].max_score).toString(); } catch (_) { }
                        try { questionnaire[i].weightage = parseFloat(questionnaire[i].weightage).toString(); } catch (_) { }
                    }
                    const rfp_document = await entityDataModule.project_document_view_uploaded(rowData.project_id);

                    const ia_questionnaire = await entityDataModule.project_appl_questionnaire_data(rowData.apply_id);
                    const ia_proposal_docs = await entityDataModule.project_appl_proposal_docs_data(rowData.apply_id);

                    const results = {
                        project_id: rowData.project_unique_id,
                        apply_id: rowData.apply_unique_id,
                        is_project_owner: is_project_owner,
                        owner_detail: {
                            first_name: rowData.o_first_name,
                            middle_name: rowData.o_middle_name,
                            last_name: rowData.o_last_name,
                            email_id: rowData.o_email_id,
                            mobile_ccc: (rowData.o_mobile_ccc ? rowData.o_mobile_ccc : ""),
                            mobile_no: rowData.o_mobile_no,
                            company_name: rowData.o_company_name,
                        },
                        project_detail: {
                            project_no: (rowData.project_no ? rowData.project_no : ""),
                            project_name: (rowData.project_name ? rowData.project_name : ""),
                            project_cost: (rowData.project_cost ? (parseFloat(rowData.project_cost)).toString() : ""),
                            start_date: (rowData.start_date ? dateFormat(constants.textbox_date_api_format, rowData.start_date) : ""),
                            end_date: (rowData.end_date ? dateFormat(constants.textbox_date_api_format, rowData.end_date) : ""),
                            purpose: purpose,
                            funding_option: funding_option,
                            thematic_area: (rowData.thematic_area ? rowData.thematic_area : ""),
                            proj_objective: (rowData.proj_objective ? rowData.proj_objective : ""),
                            proj_summary: (rowData.proj_summary ? rowData.proj_summary : ""),
                            beneficiary_detail: (rowData.beneficiary_detail ? rowData.beneficiary_detail : ""),
                            mapped_under: mapped_under,
                            sdg_goals: sdg_goals,
                            esg_objective: (rowData.esg_objective ? rowData.esg_objective : ""),
                            country_name: (rowData.country_name ? rowData.country_name : ""),
                            state_name: (rowData.state_name ? rowData.state_name : ""),
                            district_name: (rowData.district_name ? rowData.district_name : ""),
                            block_name: (rowData.block_name ? rowData.block_name : ""),
                            pin_code: (rowData.pin_code ? rowData.pin_code : ""),
                        },
                        project_incharge: {
                            full_name: rowData.incharge_full_name,
                            designation: rowData.incharge_designation,
                            email_id: rowData.incharge_email_id,
                            mobile_ccc: rowData.incharge_mobile_ccc,
                            mobile_no: rowData.incharge_mobile_no,
                        },
                        dynamic_values: dynamic_values,
                        scope_of_work: my_scope_of_work,
                        questionnaire: questionnaire,
                        rfp_document: rfp_document,
                        ia_detail: {
                            first_name: rowData.i_first_name,
                            middle_name: rowData.i_middle_name,
                            last_name: rowData.i_last_name,
                            email_id: rowData.i_email_id,
                            mobile_ccc: rowData.i_mobile_ccc,
                            mobile_no: rowData.i_mobile_no,
                            company_name: rowData.i_company_name,
                        },
                        ia_questionnaire: ia_questionnaire,
                        ia_proposal_docs: ia_proposal_docs,
                        visible_to_all_ia: visible_to_all_ia,
                        visible_to_ia_list: visible_to_ia_list,
                    }
                    return res.status(200).json(success(true, res.statusCode, "", results));
                }
                else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_list = async (req, res, next) => {
    const { accept_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            if (_accept_id.length > 0 && utils.isUUID(_accept_id)) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.apply_id, pa.accepted_date, pa.owner_reg_id, pa.ia_reg_id,
                pc.unique_id AS project_unique_id, pc.project_no, pc.project_name
                FROM project_accepted pa INNER JOIN project_created pc ON pa.project_id = pc.project_id
                WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && (
                    row[0].reg_id.toString() == rowSelProj[0].owner_reg_id.toString() || row[0].reg_id.toString() == rowSelProj[0].ia_reg_id.toString()
                )) {
                    const rowData = rowSelProj[0]; var milestones = [];
                    const is_project_owner = (rowData.owner_reg_id.toString() == row[0].reg_id.toString() ? true : false);

                    const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, ml.milestone_no, ml.milestone_name,
                    COALESCE((SELECT SUM(COALESCE(ppi.total_amount, 0)) FROM project_payment_int ppi WHERE ppi.accepted_id = pm.accepted_id AND ppi.milestone_id = pm.milestone_id), 0) AS amount
                    FROM project_track_milestone pm INNER JOIN project_milestone ml ON pm.milestone_id = ml.milestone_id
                    WHERE pm.accepted_id = ?`;
                    const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.accepted_id], type: QueryTypes.SELECT });
                    for (let i = 0; rowMls && i < rowMls.length; i++) {
                        const eleRow = rowMls[i];
                        const amount = (eleRow.amount ? parseFloat(parseFloat(eleRow.amount).toFixed(2)) : 0);
                        const _milestone_status = eleRow.milestone_status != null && validator.isNumeric(eleRow.milestone_status.toString()) ? parseInt(eleRow.milestone_status) : 0;
                        milestones.push({
                            milestone_id: eleRow.milestone_id,
                            milestone_no: eleRow.milestone_no,
                            milestone_name: eleRow.milestone_name,
                            milestone_status: _milestone_status,
                            amount: amount,
                        });
                    }
                    const results = {
                        project_id: rowData.project_unique_id,
                        is_project_owner: is_project_owner,
                        milestones: milestones,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                }
                else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_view = async (req, res, next) => {
    const { accept_id, milestone_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.apply_id, pa.accepted_date, pa.owner_reg_id, pa.ia_reg_id,
                pc.unique_id AS project_unique_id, pc.project_no, pc.project_name
                FROM project_accepted pa INNER JOIN project_created pc ON pa.project_id = pc.project_id
                WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && (
                    row[0].reg_id.toString() == rowSelProj[0].owner_reg_id.toString() || row[0].reg_id.toString() == rowSelProj[0].ia_reg_id.toString()
                )) {
                    const rowData = rowSelProj[0];
                    const is_project_owner = (rowData.owner_reg_id.toString() == row[0].reg_id.toString() ? true : false);

                    const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status, ml.milestone_no, ml.milestone_name,
                    pm.approve_remark, pm.reject_remark, pm.approval_status_date, ml.sort_order,
                    pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                    pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                    pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                    FROM project_track_milestone pm INNER JOIN project_milestone ml ON pm.milestone_id = ml.milestone_id
                    WHERE pm.accepted_id = ? AND pm.milestone_id = ?`;
                    const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                    if (rowMls && rowMls.length > 0) {
                        const dataMil = rowMls[0]; var delivery = [];
                        const _milestone_status = dataMil.milestone_status != null && validator.isNumeric(dataMil.milestone_status.toString()) ? parseInt(dataMil.milestone_status) : 0;
                        const _approval_status = (dataMil.approval_status != null && validator.isNumeric(dataMil.approval_status.toString()) ? parseInt(dataMil.approval_status) : 0);

                        const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                        pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                        pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, dl.sort_order,
                        pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                        FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                        WHERE pd.accepted_id = ? AND pd.milestone_id = ? ORDER BY dl.sort_order`;
                        const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                        for (let i = 0; rowDel && i < rowDel.length; i++) {
                            const eleDel = rowDel[i]; var activity = [];
                            const _delivery_status = eleDel.delivery_status != null && validator.isNumeric(eleDel.delivery_status.toString()) ? parseInt(eleDel.delivery_status) : 0;
                            const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name, ac.sort_order,
                            pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                            pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                            FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                            WHERE pa.accepted_id = ? AND pa.delivery_id = ? ORDER BY ac.sort_order`;
                            const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.accepted_id, eleDel.delivery_id], type: QueryTypes.SELECT });
                            for (let j = 0; rowAct && j < rowAct.length; j++) {
                                const eleAct = rowAct[j];
                                const _activity_status = eleAct.activity_status != null && validator.isNumeric(eleAct.activity_status.toString()) ? parseInt(eleAct.activity_status) : 0;

                                activity.push({
                                    activity_id: eleAct.activity_id,
                                    activity_no: eleAct.activity_no,
                                    activity_name: eleAct.activity_name,
                                    activity_order: eleAct.sort_order,
                                    activity_status: _activity_status,
                                    completion_file_name: (eleAct.completion_file_name ? eleAct.completion_file_name : ""),
                                    completion_new_name: (eleAct.completion_new_name ? eleAct.completion_new_name : ""),
                                    other_file_name: (eleAct.other_file_name ? eleAct.other_file_name : ""),
                                    other_new_name: (eleAct.other_new_name ? eleAct.other_new_name : ""),
                                    beneficiary_file_name: (eleAct.beneficiary_file_name ? eleAct.beneficiary_file_name : ""),
                                    beneficiary_new_name: (eleAct.beneficiary_new_name ? eleAct.beneficiary_new_name : ""),
                                });
                            }

                            delivery.push({
                                delivery_id: eleDel.delivery_id,
                                delivery_no: eleDel.delivery_no,
                                delivery_name: eleDel.delivery_name,
                                delivery_order: eleDel.sort_order,
                                delivery_status: _delivery_status,
                                completion_file_name: (eleDel.completion_file_name ? eleDel.completion_file_name : ""),
                                completion_new_name: (eleDel.completion_new_name ? eleDel.completion_new_name : ""),
                                completion_to_all_activity: eleDel.completion_to_all_activity,
                                other_file_name: (eleDel.other_file_name ? eleDel.other_file_name : ""),
                                other_new_name: (eleDel.other_new_name ? eleDel.other_new_name : ""),
                                other_to_all_activity: eleDel.other_to_all_activity,
                                beneficiary_file_name: (eleDel.beneficiary_file_name ? eleDel.beneficiary_file_name : ""),
                                beneficiary_new_name: (eleDel.beneficiary_new_name ? eleDel.beneficiary_new_name : ""),
                                beneficiary_to_all_activity: eleDel.beneficiary_to_all_activity,
                                activity: activity,
                            });
                        }

                        const results = {
                            project_id: rowData.project_unique_id,
                            is_project_owner: is_project_owner,
                            milestone_id: _milestone_id,
                            milestone_no: dataMil.milestone_no,
                            milestone_name: dataMil.milestone_name,
                            milestone_order: dataMil.sort_order,
                            milestone_status: _milestone_status,
                            request_for_approve: (_approval_status.toString() == '1' ? true : false),
                            is_approved: (_approval_status.toString() == '2' ? true : false),
                            approve_remark: (dataMil.approve_remark ? dataMil.approve_remark : ""),
                            is_rejected: (_approval_status.toString() == '3' ? true : false),
                            reject_remark: (dataMil.reject_remark ? dataMil.reject_remark : ""),
                            status_date: dataMil.approval_status_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(dataMil.approval_status_date)) : "",
                            completion_file_name: (dataMil.completion_file_name ? dataMil.completion_file_name : ""),
                            completion_new_name: (dataMil.completion_new_name ? dataMil.completion_new_name : ""),
                            completion_to_all_delivery: dataMil.completion_to_all_delivery,
                            other_file_name: (dataMil.other_file_name ? dataMil.other_file_name : ""),
                            other_new_name: (dataMil.other_new_name ? dataMil.other_new_name : ""),
                            other_to_all_delivery: dataMil.other_to_all_delivery,
                            beneficiary_file_name: (dataMil.beneficiary_file_name ? dataMil.beneficiary_file_name : ""),
                            beneficiary_new_name: (dataMil.beneficiary_new_name ? dataMil.beneficiary_new_name : ""),
                            beneficiary_to_all_delivery: dataMil.beneficiary_to_all_delivery,
                            delivery: delivery,
                            upload_file_max_size: project_monitoring_upload_file_size,
                            upload_file_allowed: project_monitoring_upload_file_allowed,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                    }
                }
                else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_save = async (req, res, next) => {
    const { accept_id, milestone_id, save_form_data } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pa.ia_reg_id FROM project_accepted pa WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    if (row[0].reg_id.toString() == rowSelProj[0].ia_reg_id.toString()) {
                        const rowData = rowSelProj[0];
                        const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status,
                        pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                        pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                        pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                        FROM project_track_milestone pm WHERE pm.accepted_id = ? AND pm.milestone_id = ?`;
                        const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                        if (rowMls && rowMls.length > 0) {

                            const _approval_status = (rowMls[0].approval_status != null && validator.isNumeric(rowMls[0].approval_status.toString()) ? parseInt(rowMls[0].approval_status) : 0);
                            if (_approval_status.toString() == '1') {
                                return res.status(200).json(success(false, res.statusCode, 'Cannot edit, already sent request for approval.', null));
                            }
                            if (_approval_status.toString() == '2') {
                                return res.status(200).json(success(false, res.statusCode, 'Cannot edit, Milestone is already approved.', null));
                            }

                            var _save_form_data = [];
                            if (save_form_data) {
                                if (save_form_data.constructor == String) {
                                    try { _save_form_data = JSON.parse(save_form_data); } catch (_) { }
                                } else {
                                    if (save_form_data.constructor == Array) { _save_form_data = save_form_data; }
                                }
                            }

                            if (_save_form_data && _save_form_data.length > 0) {
                                var deliveryIDs = []; var activityIDs = []; var file_params = [];
                                const _querySelDel = `SELECT delivery_id FROM project_track_delivery WHERE accepted_id = ? AND milestone_id = ?`;
                                const rowSelDel = await db.sequelize.query(_querySelDel, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                                for (let i = 0; rowSelDel && i < rowSelDel.length; i++) {
                                    deliveryIDs.push(rowSelDel[i].delivery_id);
                                }
                                if (deliveryIDs.length > 0) {
                                    const _querySelAct = `SELECT activity_id FROM project_track_activity WHERE accepted_id = ? AND delivery_id IN (?)`;
                                    const rowSelAct = await db.sequelize.query(_querySelAct, { replacements: [rowData.accepted_id, deliveryIDs], type: QueryTypes.SELECT });
                                    for (let j = 0; rowSelAct && j < rowSelAct.length; j++) {
                                        activityIDs.push(rowSelAct[j].activity_id);
                                    }
                                }

                                // Validate posted data

                                for (let i = 0; i < _save_form_data.length; i++) {
                                    const eleData = _save_form_data[i];
                                    if (eleData.field_type && eleData.field_type.toLowerCase() == 'milestone') {
                                        if (eleData.field_id.toString() != _milestone_id.toString()) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid milestone id found in request.', null));
                                        }
                                        file_params.push('milestone_completion_' + _milestone_id.toString());
                                        file_params.push('milestone_other_' + _milestone_id.toString());
                                        file_params.push('milestone_beneficiary_' + _milestone_id.toString());
                                    }
                                    else if (eleData.field_type && eleData.field_type.toLowerCase() == 'delivery') {
                                        var exists = false;
                                        for (let j = 0; j < deliveryIDs.length; j++) {
                                            if (eleData.field_id.toString() == deliveryIDs[j].toString()) {
                                                exists = true; break;
                                            }
                                        }
                                        if (!exists) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                        }
                                        file_params.push('delivery_completion_' + eleData.field_id.toString());
                                        file_params.push('delivery_other_' + eleData.field_id.toString());
                                        file_params.push('delivery_beneficiary_' + eleData.field_id.toString());
                                    }
                                    else if (eleData.field_type && eleData.field_type.toLowerCase() == 'activity') {
                                        var exists = false;
                                        for (let j = 0; j < activityIDs.length; j++) {
                                            if (eleData.field_id.toString() == activityIDs[j].toString()) {
                                                exists = true; break;
                                            }
                                        }
                                        if (!exists) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                        }
                                        file_params.push('activity_completion_' + eleData.field_id.toString());
                                        file_params.push('activity_other_' + eleData.field_id.toString());
                                        file_params.push('activity_beneficiary_' + eleData.field_id.toString());
                                    } else {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid field_type value it should be milestone/delivery/activity.', null));
                                    }
                                }

                                // Uploading documents to GCP

                                var gcpUploadedDocs = [];
                                for (let i = 0; i < file_params.length; i++) {
                                    const file_name_to_check = file_params[i];
                                    var is_file_exists = false; var file_json_data = null;
                                    for (let j = 0; req.files && j < req.files.length; j++) {
                                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                            file_json_data = req.files[j]; is_file_exists = true; break;
                                        }
                                    }
                                    if (is_file_exists) {
                                        try {
                                            const gcp_file_path = 'monitoring/' + rowData.accepted_id.toString() + file_json_data.filename;
                                            const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                            gcpUploadedDocs.push({
                                                param_name: file_name_to_check,
                                                original_file_name: file_json_data.originalname,
                                                new_file_name: file_json_data.filename,
                                                gcp_file_path: gcp_file_path,
                                                gcp_response_data: JSON.stringify(gcpResp),
                                            });
                                        }
                                        catch (gErr) {
                                            try { _logger.error(gErr.stack); } catch (_) { }
                                            for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                                try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                            }
                                            return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, null));
                                        }
                                    }
                                }

                                // Create final data row

                                var final_data_array = [];

                                for (let i = 0; i < _save_form_data.length; i++) {
                                    const eleData = _save_form_data[i];
                                    var status = eleData.status != null && validator.isNumeric(eleData.status.toString()) ? parseInt(eleData.status) : 0;
                                    var completion_doc_delete = eleData.completion_doc_delete && eleData.completion_doc_delete == true ? true : false;
                                    var other_doc_delete = eleData.other_doc_delete && eleData.other_doc_delete == true ? true : false;
                                    var beneficiary_doc_delete = eleData.beneficiary_doc_delete && eleData.beneficiary_doc_delete == true ? true : false;
                                    var completion_file = null; var other_file = null; var beneficiary_file = null;
                                    var completion_doc_to_all = eleData.completion_doc_to_all && eleData.completion_doc_to_all == true ? true : false;
                                    var other_doc_to_all = eleData.other_doc_to_all && eleData.other_doc_to_all == true ? true : false;
                                    var beneficiary_doc_to_all = eleData.beneficiary_doc_to_all && eleData.beneficiary_doc_to_all == true ? true : false;

                                    var delete_completion_file_path = '';
                                    var delete_other_file_path = '';
                                    var delete_beneficiary_file_path = '';

                                    if (eleData.field_type.toLowerCase() == 'milestone') {
                                        completion_doc_delete = (completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 ? true : false);
                                        other_doc_delete = (other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 ? true : false);
                                        beneficiary_doc_delete = (beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 ? true : false);
                                        for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                            if (gcpUploadedDocs[j].param_name == 'milestone_completion_' + _milestone_id.toString()) {
                                                completion_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'milestone_other_' + _milestone_id.toString()) {
                                                other_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'milestone_beneficiary_' + _milestone_id.toString()) {
                                                beneficiary_file = gcpUploadedDocs[j];
                                            }
                                        }
                                        if (!completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 && completion_file != null) {
                                            completion_doc_delete = true;
                                        }
                                        if (completion_doc_delete) {
                                            delete_completion_file_path = rowMls[0].completion_gcp_path;
                                        }
                                        if (!other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 && other_file != null) {
                                            other_doc_delete = true;
                                        }
                                        if (other_doc_delete) {
                                            delete_other_file_path = rowMls[0].other_gcp_path;
                                        }
                                        if (!beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                            beneficiary_doc_delete = true;
                                        }
                                        if (beneficiary_doc_delete) {
                                            delete_beneficiary_file_path = rowMls[0].beneficiary_gcp_path;
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'delivery') {
                                        const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                                    pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                                    pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, 
                                    pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                                    FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                                    WHERE pd.accepted_id = ? AND pd.delivery_id = ?`;
                                        const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.accepted_id, eleData.field_id], type: QueryTypes.SELECT });
                                        if (rowDel && rowDel.length > 0) {
                                            completion_doc_delete = (completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 ? true : false);
                                            other_doc_delete = (other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 ? true : false);
                                            beneficiary_doc_delete = (beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 ? true : false);
                                            for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                                if (gcpUploadedDocs[j].param_name == 'delivery_completion_' + eleData.field_id.toString()) {
                                                    completion_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'delivery_other_' + eleData.field_id.toString()) {
                                                    other_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'delivery_beneficiary_' + eleData.field_id.toString()) {
                                                    beneficiary_file = gcpUploadedDocs[j];
                                                }
                                            }
                                            if (!completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 && completion_file != null) {
                                                completion_doc_delete = true;
                                            }
                                            if (completion_doc_delete) {
                                                delete_completion_file_path = rowDel[0].completion_gcp_path;
                                            }
                                            if (!other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 && other_file != null) {
                                                other_doc_delete = true;
                                            }
                                            if (other_doc_delete) {
                                                delete_other_file_path = rowDel[0].other_gcp_path;
                                            }
                                            if (!beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                                beneficiary_doc_delete = true;
                                            }
                                            if (beneficiary_doc_delete) {
                                                delete_beneficiary_file_path = rowDel[0].beneficiary_gcp_path;
                                            }
                                        } else {
                                            for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                                try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                            }
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'activity') {
                                        const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name,
                                    pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                                    pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                                    FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                                    WHERE pa.accepted_id = ? AND pa.activity_id = ?`;
                                        const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.accepted_id, eleData.field_id], type: QueryTypes.SELECT });
                                        if (rowAct && rowAct.length > 0) {
                                            completion_doc_delete = (completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 ? true : false);
                                            other_doc_delete = (other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 ? true : false);
                                            beneficiary_doc_delete = (beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 ? true : false);
                                            for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                                if (gcpUploadedDocs[j].param_name == 'activity_completion_' + eleData.field_id.toString()) {
                                                    completion_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'activity_other_' + eleData.field_id.toString()) {
                                                    other_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'activity_beneficiary_' + eleData.field_id.toString()) {
                                                    beneficiary_file = gcpUploadedDocs[j];
                                                }
                                            }
                                            if (!completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 && completion_file != null) {
                                                completion_doc_delete = true;
                                            }
                                            if (completion_doc_delete) {
                                                delete_completion_file_path = rowAct[0].completion_gcp_path;
                                            }
                                            if (!other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 && other_file != null) {
                                                other_doc_delete = true;
                                            }
                                            if (other_doc_delete) {
                                                delete_other_file_path = rowAct[0].other_gcp_path;
                                            }
                                            if (!beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                                beneficiary_doc_delete = true;
                                            }
                                            if (beneficiary_doc_delete) {
                                                delete_beneficiary_file_path = rowAct[0].beneficiary_gcp_path;
                                            }
                                        } else {
                                            for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                                try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                            }
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                        }
                                    }
                                    final_data_array.push({
                                        field_type: eleData.field_type,
                                        field_id: eleData.field_id,
                                        status: status,
                                        completion_doc_delete: completion_doc_delete,
                                        other_doc_delete: other_doc_delete,
                                        beneficiary_doc_delete: beneficiary_doc_delete,
                                        completion_file: completion_file,
                                        other_file: other_file,
                                        beneficiary_file: beneficiary_file,
                                        completion_doc_to_all: completion_doc_to_all,
                                        other_doc_to_all: other_doc_to_all,
                                        beneficiary_doc_to_all: beneficiary_doc_to_all,
                                        delete_completion_file_path: delete_completion_file_path,
                                        delete_other_file_path: delete_other_file_path,
                                        delete_beneficiary_file_path: delete_beneficiary_file_path,
                                    })
                                }

                                /**************************************************************************************************/
                                const currDate = new Date(); var gcpFilesToDelete = [];

                                for (let i = 0; i < final_data_array.length; i++) {
                                    const eleData = final_data_array[i];
                                    if (eleData.field_type.toLowerCase() == 'milestone') {
                                        var _queryMilUp_1 = `UPDATE project_track_milestone SET milestone_status = ?, modify_by = ?, modify_date = ? `;
                                        var replMilUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                        if (eleData.completion_doc_delete) {
                                            _queryMilUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_delivery = false ';
                                            gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                        }
                                        if (eleData.other_doc_delete) {
                                            _queryMilUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_delivery = false ';
                                            gcpFilesToDelete.push(eleData.delete_other_file_path);
                                        }
                                        if (eleData.beneficiary_doc_delete) {
                                            _queryMilUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_delivery = false ';
                                            gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                        }
                                        _queryMilUp_1 += ' WHERE accepted_id = ? AND milestone_id = ? '
                                        replMilUp_1.push(rowData.accepted_id); replMilUp_1.push(_milestone_id);
                                        await db.sequelize.query(_queryMilUp_1, { replacements: replMilUp_1, type: QueryTypes.UPDATE });

                                        if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                            var _queryMilUp_2 = `UPDATE project_track_milestone SET modify_by = ?, modify_date = ? `;
                                            var replMilUp_2 = [req.token_data.account_id, currDate];
                                            if (eleData.completion_file != null) {
                                                _queryMilUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_delivery = ? ';
                                                var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                                replMilUp_2.push(eleData.completion_file.original_file_name); replMilUp_2.push(eleData.completion_file.new_file_name);
                                                replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp);
                                                replMilUp_2.push(eleData.completion_doc_to_all);
                                            }
                                            if (eleData.other_file != null) {
                                                _queryMilUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_delivery = ? ';
                                                var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                                replMilUp_2.push(eleData.other_file.original_file_name); replMilUp_2.push(eleData.other_file.new_file_name);
                                                replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.other_doc_to_all);
                                            }
                                            if (eleData.beneficiary_file != null) {
                                                _queryMilUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_delivery = ? ';
                                                var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                                replMilUp_2.push(eleData.beneficiary_file.original_file_name); replMilUp_2.push(eleData.beneficiary_file.new_file_name);
                                                replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.beneficiary_doc_to_all);
                                            }
                                            _queryMilUp_2 += ' WHERE accepted_id = ? AND milestone_id = ? '
                                            replMilUp_2.push(rowData.accepted_id); replMilUp_2.push(_milestone_id);
                                            await db.sequelize.query(_queryMilUp_2, { replacements: replMilUp_2, type: QueryTypes.UPDATE });
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'delivery') {
                                        var _queryDelUp_1 = `UPDATE project_track_delivery SET delivery_status = ?, modify_by = ?, modify_date = ? `;
                                        var replDelUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                        if (eleData.completion_doc_delete) {
                                            _queryDelUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_activity = false ';
                                            gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                        }
                                        if (eleData.other_doc_delete) {
                                            _queryDelUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_activity = false ';
                                            gcpFilesToDelete.push(eleData.delete_other_file_path);
                                        }
                                        if (eleData.beneficiary_doc_delete) {
                                            _queryDelUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_activity = false ';
                                            gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                        }
                                        _queryDelUp_1 += ' WHERE accepted_id = ? AND delivery_id = ? '
                                        replDelUp_1.push(rowData.accepted_id); replDelUp_1.push(eleData.field_id);
                                        await db.sequelize.query(_queryDelUp_1, { replacements: replDelUp_1, type: QueryTypes.UPDATE });
                                        if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                            var _queryDelUp_2 = `UPDATE project_track_delivery SET modify_by = ?, modify_date = ? `;
                                            var replDelUp_2 = [req.token_data.account_id, currDate];
                                            if (eleData.completion_file != null) {
                                                _queryDelUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_activity = ? ';
                                                var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                                replDelUp_2.push(eleData.completion_file.original_file_name); replDelUp_2.push(eleData.completion_file.new_file_name);
                                                replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.completion_doc_to_all);
                                            }
                                            if (eleData.other_file != null) {
                                                _queryDelUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_activity = ? ';
                                                var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                                replDelUp_2.push(eleData.other_file.original_file_name); replDelUp_2.push(eleData.other_file.new_file_name);
                                                replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.other_doc_to_all);
                                            }
                                            if (eleData.beneficiary_file != null) {
                                                _queryDelUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_activity = ? ';
                                                var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                                replDelUp_2.push(eleData.beneficiary_file.original_file_name); replDelUp_2.push(eleData.beneficiary_file.new_file_name);
                                                replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.beneficiary_doc_to_all);
                                            }
                                            _queryDelUp_2 += ' WHERE accepted_id = ? AND delivery_id = ? '
                                            replDelUp_2.push(rowData.accepted_id); replDelUp_2.push(eleData.field_id);
                                            await db.sequelize.query(_queryDelUp_2, { replacements: replDelUp_2, type: QueryTypes.UPDATE });
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'activity') {
                                        var _queryActUp_1 = `UPDATE project_track_activity SET activity_status = ?, modify_by = ?, modify_date = ? `;
                                        var replActUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                        if (eleData.completion_doc_delete) {
                                            _queryActUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null ';
                                            gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                        }
                                        if (eleData.other_doc_delete) {
                                            _queryActUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null ';
                                            gcpFilesToDelete.push(eleData.delete_other_file_path);
                                        }
                                        if (eleData.beneficiary_doc_delete) {
                                            _queryActUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null ';
                                            gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                        }
                                        _queryActUp_1 += ' WHERE accepted_id = ? AND activity_id = ? '
                                        replActUp_1.push(rowData.accepted_id); replActUp_1.push(eleData.field_id);
                                        await db.sequelize.query(_queryActUp_1, { replacements: replActUp_1, type: QueryTypes.UPDATE });
                                        if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                            var _queryActUp_2 = `UPDATE project_track_activity SET modify_by = ?, modify_date = ? `;
                                            var replActUp_2 = [req.token_data.account_id, currDate];
                                            if (eleData.completion_file != null) {
                                                _queryActUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ? ';
                                                var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                                replActUp_2.push(eleData.completion_file.original_file_name); replActUp_2.push(eleData.completion_file.new_file_name);
                                                replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                            }
                                            if (eleData.other_file != null) {
                                                _queryActUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ? ';
                                                var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                                replActUp_2.push(eleData.other_file.original_file_name); replActUp_2.push(eleData.other_file.new_file_name);
                                                replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                            }
                                            if (eleData.beneficiary_file != null) {
                                                _queryActUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ? ';
                                                var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                                replActUp_2.push(eleData.beneficiary_file.original_file_name); replActUp_2.push(eleData.beneficiary_file.new_file_name);
                                                replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                            }
                                            _queryActUp_2 += ' WHERE accepted_id = ? AND activity_id = ? '
                                            replActUp_2.push(rowData.accepted_id); replActUp_2.push(eleData.field_id);
                                            await db.sequelize.query(_queryActUp_2, { replacements: replActUp_2, type: QueryTypes.UPDATE });
                                        }
                                    }
                                }

                                for (let dd = 0; gcpFilesToDelete && dd < gcpFilesToDelete.length; dd++) {
                                    if (gcpFilesToDelete[dd] && gcpFilesToDelete[dd].length > 0) {
                                        try { await cloudStorageModule.DeleteFile(gcpFilesToDelete[dd]); } catch (_) { }
                                    }
                                }

                                return res.status(200).json(success(true, res.statusCode, 'Saved successfully.', null));
                            } else {
                                return res.status(200).json(success(false, res.statusCode, 'No changes has been made.', null));
                            }
                        } else {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                        }
                    }
                    else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Only IA can update status and upload documents.', null));
                    }
                }
                else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_send = async (req, res, next) => {
    const { accept_id, milestone_id, save_form_data } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pa.ia_reg_id FROM project_accepted pa WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    if (row[0].reg_id.toString() == rowSelProj[0].ia_reg_id.toString()) {
                        const rowData = rowSelProj[0];
                        const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status,
                        pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                        pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                        pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                        FROM project_track_milestone pm WHERE pm.accepted_id = ? AND pm.milestone_id = ?`;
                        const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                        if (rowMls && rowMls.length > 0) {

                            const _approval_status = (rowMls[0].approval_status != null && validator.isNumeric(rowMls[0].approval_status.toString()) ? parseInt(rowMls[0].approval_status) : 0);
                            if (_approval_status.toString() == '1') {
                                return res.status(200).json(success(false, res.statusCode, 'You have already sent request for approval.', null));
                            }
                            if (_approval_status.toString() == '2') {
                                return res.status(200).json(success(false, res.statusCode, 'Milestone is already approved.', null));
                            }

                            var _save_form_data = [];
                            if (save_form_data) {
                                if (save_form_data.constructor == String) {
                                    try { _save_form_data = JSON.parse(save_form_data); } catch (_) { }
                                } else {
                                    if (save_form_data.constructor == Array) { _save_form_data = save_form_data; }
                                }
                            }

                            if (_save_form_data && _save_form_data.length > 0) {
                                var deliveryIDs = []; var activityIDs = []; var file_params = [];
                                const _querySelDel = `SELECT delivery_id FROM project_track_delivery WHERE accepted_id = ? AND milestone_id = ?`;
                                const rowSelDel = await db.sequelize.query(_querySelDel, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                                for (let i = 0; rowSelDel && i < rowSelDel.length; i++) {
                                    deliveryIDs.push(rowSelDel[i].delivery_id);
                                }
                                if (deliveryIDs.length > 0) {
                                    const _querySelAct = `SELECT activity_id FROM project_track_activity WHERE accepted_id = ? AND delivery_id IN (?)`;
                                    const rowSelAct = await db.sequelize.query(_querySelAct, { replacements: [rowData.accepted_id, deliveryIDs], type: QueryTypes.SELECT });
                                    for (let j = 0; rowSelAct && j < rowSelAct.length; j++) {
                                        activityIDs.push(rowSelAct[j].activity_id);
                                    }
                                }

                                // Validate posted data

                                for (let i = 0; i < _save_form_data.length; i++) {
                                    const eleData = _save_form_data[i];
                                    if (eleData.field_type && eleData.field_type.toLowerCase() == 'milestone') {
                                        if (eleData.field_id.toString() != _milestone_id.toString()) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid milestone id found in request.', null));
                                        }
                                        file_params.push('milestone_completion_' + _milestone_id.toString());
                                        file_params.push('milestone_other_' + _milestone_id.toString());
                                        file_params.push('milestone_beneficiary_' + _milestone_id.toString());
                                    }
                                    else if (eleData.field_type && eleData.field_type.toLowerCase() == 'delivery') {
                                        var exists = false;
                                        for (let j = 0; j < deliveryIDs.length; j++) {
                                            if (eleData.field_id.toString() == deliveryIDs[j].toString()) {
                                                exists = true; break;
                                            }
                                        }
                                        if (!exists) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                        }
                                        file_params.push('delivery_completion_' + eleData.field_id.toString());
                                        file_params.push('delivery_other_' + eleData.field_id.toString());
                                        file_params.push('delivery_beneficiary_' + eleData.field_id.toString());
                                    }
                                    else if (eleData.field_type && eleData.field_type.toLowerCase() == 'activity') {
                                        var exists = false;
                                        for (let j = 0; j < activityIDs.length; j++) {
                                            if (eleData.field_id.toString() == activityIDs[j].toString()) {
                                                exists = true; break;
                                            }
                                        }
                                        if (!exists) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                        }
                                        file_params.push('activity_completion_' + eleData.field_id.toString());
                                        file_params.push('activity_other_' + eleData.field_id.toString());
                                        file_params.push('activity_beneficiary_' + eleData.field_id.toString());
                                    } else {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid field_type value it should be milestone/delivery/activity.', null));
                                    }
                                }

                                // Uploading documents to GCP

                                var gcpUploadedDocs = [];
                                for (let i = 0; i < file_params.length; i++) {
                                    const file_name_to_check = file_params[i];
                                    var is_file_exists = false; var file_json_data = null;
                                    for (let j = 0; req.files && j < req.files.length; j++) {
                                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                            file_json_data = req.files[j]; is_file_exists = true; break;
                                        }
                                    }
                                    if (is_file_exists) {
                                        try {
                                            const gcp_file_path = 'monitoring/' + rowData.accepted_id.toString() + file_json_data.filename;
                                            const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                            gcpUploadedDocs.push({
                                                param_name: file_name_to_check,
                                                original_file_name: file_json_data.originalname,
                                                new_file_name: file_json_data.filename,
                                                gcp_file_path: gcp_file_path,
                                                gcp_response_data: JSON.stringify(gcpResp),
                                            });
                                        }
                                        catch (gErr) {
                                            try { _logger.error(gErr.stack); } catch (_) { }
                                            for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                                try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                            }
                                            return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, null));
                                        }
                                    }
                                }

                                // Create final data row

                                var final_data_array = [];

                                for (let i = 0; i < _save_form_data.length; i++) {
                                    const eleData = _save_form_data[i];
                                    var status = eleData.status != null && validator.isNumeric(eleData.status.toString()) ? parseInt(eleData.status) : 0;
                                    var completion_doc_delete = eleData.completion_doc_delete && eleData.completion_doc_delete == true ? true : false;
                                    var other_doc_delete = eleData.other_doc_delete && eleData.other_doc_delete == true ? true : false;
                                    var beneficiary_doc_delete = eleData.beneficiary_doc_delete && eleData.beneficiary_doc_delete == true ? true : false;
                                    var completion_file = null; var other_file = null; var beneficiary_file = null;
                                    var completion_doc_to_all = eleData.completion_doc_to_all && eleData.completion_doc_to_all == true ? true : false;
                                    var other_doc_to_all = eleData.other_doc_to_all && eleData.other_doc_to_all == true ? true : false;
                                    var beneficiary_doc_to_all = eleData.beneficiary_doc_to_all && eleData.beneficiary_doc_to_all == true ? true : false;

                                    var delete_completion_file_path = '';
                                    var delete_other_file_path = '';
                                    var delete_beneficiary_file_path = '';

                                    if (eleData.field_type.toLowerCase() == 'milestone') {
                                        completion_doc_delete = (completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 ? true : false);
                                        other_doc_delete = (other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 ? true : false);
                                        beneficiary_doc_delete = (beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 ? true : false);
                                        for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                            if (gcpUploadedDocs[j].param_name == 'milestone_completion_' + _milestone_id.toString()) {
                                                completion_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'milestone_other_' + _milestone_id.toString()) {
                                                other_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'milestone_beneficiary_' + _milestone_id.toString()) {
                                                beneficiary_file = gcpUploadedDocs[j];
                                            }
                                        }
                                        if (!completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 && completion_file != null) {
                                            completion_doc_delete = true;
                                        }
                                        if (completion_doc_delete) {
                                            delete_completion_file_path = rowMls[0].completion_gcp_path;
                                        }
                                        if (!other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 && other_file != null) {
                                            other_doc_delete = true;
                                        }
                                        if (other_doc_delete) {
                                            delete_other_file_path = rowMls[0].other_gcp_path;
                                        }
                                        if (!beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                            beneficiary_doc_delete = true;
                                        }
                                        if (beneficiary_doc_delete) {
                                            delete_beneficiary_file_path = rowMls[0].beneficiary_gcp_path;
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'delivery') {
                                        const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                                    pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                                    pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, 
                                    pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                                    FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                                    WHERE pd.accepted_id = ? AND pd.delivery_id = ?`;
                                        const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.accepted_id, eleData.field_id], type: QueryTypes.SELECT });
                                        if (rowDel && rowDel.length > 0) {
                                            completion_doc_delete = (completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 ? true : false);
                                            other_doc_delete = (other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 ? true : false);
                                            beneficiary_doc_delete = (beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 ? true : false);
                                            for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                                if (gcpUploadedDocs[j].param_name == 'delivery_completion_' + eleData.field_id.toString()) {
                                                    completion_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'delivery_other_' + eleData.field_id.toString()) {
                                                    other_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'delivery_beneficiary_' + eleData.field_id.toString()) {
                                                    beneficiary_file = gcpUploadedDocs[j];
                                                }
                                            }
                                            if (!completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 && completion_file != null) {
                                                completion_doc_delete = true;
                                            }
                                            if (completion_doc_delete) {
                                                delete_completion_file_path = rowDel[0].completion_gcp_path;
                                            }
                                            if (!other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 && other_file != null) {
                                                other_doc_delete = true;
                                            }
                                            if (other_doc_delete) {
                                                delete_other_file_path = rowDel[0].other_gcp_path;
                                            }
                                            if (!beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                                beneficiary_doc_delete = true;
                                            }
                                            if (beneficiary_doc_delete) {
                                                delete_beneficiary_file_path = rowDel[0].beneficiary_gcp_path;
                                            }
                                        } else {
                                            for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                                try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                            }
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'activity') {
                                        const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name,
                                    pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                                    pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                                    FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                                    WHERE pa.accepted_id = ? AND pa.activity_id = ?`;
                                        const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.accepted_id, eleData.field_id], type: QueryTypes.SELECT });
                                        if (rowAct && rowAct.length > 0) {
                                            completion_doc_delete = (completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 ? true : false);
                                            other_doc_delete = (other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 ? true : false);
                                            beneficiary_doc_delete = (beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 ? true : false);
                                            for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                                if (gcpUploadedDocs[j].param_name == 'activity_completion_' + eleData.field_id.toString()) {
                                                    completion_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'activity_other_' + eleData.field_id.toString()) {
                                                    other_file = gcpUploadedDocs[j];
                                                }
                                                if (gcpUploadedDocs[j].param_name == 'activity_beneficiary_' + eleData.field_id.toString()) {
                                                    beneficiary_file = gcpUploadedDocs[j];
                                                }
                                            }
                                            if (!completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 && completion_file != null) {
                                                completion_doc_delete = true;
                                            }
                                            if (completion_doc_delete) {
                                                delete_completion_file_path = rowAct[0].completion_gcp_path;
                                            }
                                            if (!other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 && other_file != null) {
                                                other_doc_delete = true;
                                            }
                                            if (other_doc_delete) {
                                                delete_other_file_path = rowAct[0].other_gcp_path;
                                            }
                                            if (!beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                                beneficiary_doc_delete = true;
                                            }
                                            if (beneficiary_doc_delete) {
                                                delete_beneficiary_file_path = rowAct[0].beneficiary_gcp_path;
                                            }
                                        } else {
                                            for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                                try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                            }
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                        }
                                    }
                                    final_data_array.push({
                                        field_type: eleData.field_type,
                                        field_id: eleData.field_id,
                                        status: status,
                                        completion_doc_delete: completion_doc_delete,
                                        other_doc_delete: other_doc_delete,
                                        beneficiary_doc_delete: beneficiary_doc_delete,
                                        completion_file: completion_file,
                                        other_file: other_file,
                                        beneficiary_file: beneficiary_file,
                                        completion_doc_to_all: completion_doc_to_all,
                                        other_doc_to_all: other_doc_to_all,
                                        beneficiary_doc_to_all: beneficiary_doc_to_all,
                                        delete_completion_file_path: delete_completion_file_path,
                                        delete_other_file_path: delete_other_file_path,
                                        delete_beneficiary_file_path: delete_beneficiary_file_path,
                                    })
                                }

                                /**************************************************************************************************/
                                const currDate = new Date(); var gcpFilesToDelete = [];

                                for (let i = 0; i < final_data_array.length; i++) {
                                    const eleData = final_data_array[i];
                                    if (eleData.field_type.toLowerCase() == 'milestone') {
                                        var _queryMilUp_1 = `UPDATE project_track_milestone SET milestone_status = ?, modify_by = ?, modify_date = ? `;
                                        var replMilUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                        if (eleData.completion_doc_delete) {
                                            _queryMilUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_delivery = false ';
                                            gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                        }
                                        if (eleData.other_doc_delete) {
                                            _queryMilUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_delivery = false ';
                                            gcpFilesToDelete.push(eleData.delete_other_file_path);
                                        }
                                        if (eleData.beneficiary_doc_delete) {
                                            _queryMilUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_delivery = false ';
                                            gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                        }
                                        _queryMilUp_1 += ' WHERE accepted_id = ? AND milestone_id = ? '
                                        replMilUp_1.push(rowData.accepted_id); replMilUp_1.push(_milestone_id);
                                        await db.sequelize.query(_queryMilUp_1, { replacements: replMilUp_1, type: QueryTypes.UPDATE });

                                        if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                            var _queryMilUp_2 = `UPDATE project_track_milestone SET modify_by = ?, modify_date = ? `;
                                            var replMilUp_2 = [req.token_data.account_id, currDate];
                                            if (eleData.completion_file != null) {
                                                _queryMilUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_delivery = ? ';
                                                var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                                replMilUp_2.push(eleData.completion_file.original_file_name); replMilUp_2.push(eleData.completion_file.new_file_name);
                                                replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp);
                                                replMilUp_2.push(eleData.completion_doc_to_all);
                                            }
                                            if (eleData.other_file != null) {
                                                _queryMilUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_delivery = ? ';
                                                var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                                replMilUp_2.push(eleData.other_file.original_file_name); replMilUp_2.push(eleData.other_file.new_file_name);
                                                replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.other_doc_to_all);
                                            }
                                            if (eleData.beneficiary_file != null) {
                                                _queryMilUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_delivery = ? ';
                                                var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                                replMilUp_2.push(eleData.beneficiary_file.original_file_name); replMilUp_2.push(eleData.beneficiary_file.new_file_name);
                                                replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.beneficiary_doc_to_all);
                                            }
                                            _queryMilUp_2 += ' WHERE accepted_id = ? AND milestone_id = ? '
                                            replMilUp_2.push(rowData.accepted_id); replMilUp_2.push(_milestone_id);
                                            await db.sequelize.query(_queryMilUp_2, { replacements: replMilUp_2, type: QueryTypes.UPDATE });
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'delivery') {
                                        var _queryDelUp_1 = `UPDATE project_track_delivery SET delivery_status = ?, modify_by = ?, modify_date = ? `;
                                        var replDelUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                        if (eleData.completion_doc_delete) {
                                            _queryDelUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_activity = false ';
                                            gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                        }
                                        if (eleData.other_doc_delete) {
                                            _queryDelUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_activity = false ';
                                            gcpFilesToDelete.push(eleData.delete_other_file_path);
                                        }
                                        if (eleData.beneficiary_doc_delete) {
                                            _queryDelUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_activity = false ';
                                            gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                        }
                                        _queryDelUp_1 += ' WHERE accepted_id = ? AND delivery_id = ? '
                                        replDelUp_1.push(rowData.accepted_id); replDelUp_1.push(eleData.field_id);
                                        await db.sequelize.query(_queryDelUp_1, { replacements: replDelUp_1, type: QueryTypes.UPDATE });
                                        if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                            var _queryDelUp_2 = `UPDATE project_track_delivery SET modify_by = ?, modify_date = ? `;
                                            var replDelUp_2 = [req.token_data.account_id, currDate];
                                            if (eleData.completion_file != null) {
                                                _queryDelUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_activity = ? ';
                                                var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                                replDelUp_2.push(eleData.completion_file.original_file_name); replDelUp_2.push(eleData.completion_file.new_file_name);
                                                replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.completion_doc_to_all);
                                            }
                                            if (eleData.other_file != null) {
                                                _queryDelUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_activity = ? ';
                                                var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                                replDelUp_2.push(eleData.other_file.original_file_name); replDelUp_2.push(eleData.other_file.new_file_name);
                                                replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.other_doc_to_all);
                                            }
                                            if (eleData.beneficiary_file != null) {
                                                _queryDelUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_activity = ? ';
                                                var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                                replDelUp_2.push(eleData.beneficiary_file.original_file_name); replDelUp_2.push(eleData.beneficiary_file.new_file_name);
                                                replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.beneficiary_doc_to_all);
                                            }
                                            _queryDelUp_2 += ' WHERE accepted_id = ? AND delivery_id = ? '
                                            replDelUp_2.push(rowData.accepted_id); replDelUp_2.push(eleData.field_id);
                                            await db.sequelize.query(_queryDelUp_2, { replacements: replDelUp_2, type: QueryTypes.UPDATE });
                                        }
                                    }
                                    if (eleData.field_type.toLowerCase() == 'activity') {
                                        var _queryActUp_1 = `UPDATE project_track_activity SET activity_status = ?, modify_by = ?, modify_date = ? `;
                                        var replActUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                        if (eleData.completion_doc_delete) {
                                            _queryActUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null ';
                                            gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                        }
                                        if (eleData.other_doc_delete) {
                                            _queryActUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null ';
                                            gcpFilesToDelete.push(eleData.delete_other_file_path);
                                        }
                                        if (eleData.beneficiary_doc_delete) {
                                            _queryActUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null ';
                                            gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                        }
                                        _queryActUp_1 += ' WHERE accepted_id = ? AND activity_id = ? '
                                        replActUp_1.push(rowData.accepted_id); replActUp_1.push(eleData.field_id);
                                        await db.sequelize.query(_queryActUp_1, { replacements: replActUp_1, type: QueryTypes.UPDATE });
                                        if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                            var _queryActUp_2 = `UPDATE project_track_activity SET modify_by = ?, modify_date = ? `;
                                            var replActUp_2 = [req.token_data.account_id, currDate];
                                            if (eleData.completion_file != null) {
                                                _queryActUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ? ';
                                                var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                                replActUp_2.push(eleData.completion_file.original_file_name); replActUp_2.push(eleData.completion_file.new_file_name);
                                                replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                            }
                                            if (eleData.other_file != null) {
                                                _queryActUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ? ';
                                                var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                                replActUp_2.push(eleData.other_file.original_file_name); replActUp_2.push(eleData.other_file.new_file_name);
                                                replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                            }
                                            if (eleData.beneficiary_file != null) {
                                                _queryActUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ? ';
                                                var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                                replActUp_2.push(eleData.beneficiary_file.original_file_name); replActUp_2.push(eleData.beneficiary_file.new_file_name);
                                                replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                            }
                                            _queryActUp_2 += ' WHERE accepted_id = ? AND activity_id = ? '
                                            replActUp_2.push(rowData.accepted_id); replActUp_2.push(eleData.field_id);
                                            await db.sequelize.query(_queryActUp_2, { replacements: replActUp_2, type: QueryTypes.UPDATE });
                                        }
                                    }
                                }

                                for (let dd = 0; gcpFilesToDelete && dd < gcpFilesToDelete.length; dd++) {
                                    if (gcpFilesToDelete[dd] && gcpFilesToDelete[dd].length > 0) {
                                        try { await cloudStorageModule.DeleteFile(gcpFilesToDelete[dd]); } catch (_) { }
                                    }
                                }

                                //return res.status(200).json(success(true, res.statusCode, 'Saved successfully.', null));
                            }

                            // Check criteria to send for approval

                            const _queryChkMil = `SELECT milestone_status, completion_file_name, completion_new_name, completion_to_all_delivery
                            FROM project_track_milestone WHERE accepted_id = ? AND milestone_id = ?`;
                            const rowChkMil = await db.sequelize.query(_queryChkMil, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                            if (rowChkMil && rowChkMil.length > 0) {
                                const _milestoneStatus = (rowChkMil[0].milestone_status != null && validator.isNumeric(rowChkMil[0].milestone_status.toString()) ? parseInt(rowChkMil[0].milestone_status) : 0);
                                if (_milestoneStatus <= 0) {
                                    return res.status(200).json(success(false, res.statusCode, 'Please mark milestone status as completed.', null));
                                }
                                var deliveryIdData = []; var activityIdData = [];
                                const _queryChkDel = `SELECT t.delivery_id, t.delivery_status, t.completion_file_name, t.completion_new_name, t.completion_to_all_activity
                            FROM project_track_delivery t WHERE t.accepted_id = ? AND t.milestone_id = ?`;
                                const rowChkDel = await db.sequelize.query(_queryChkDel, { replacements: [rowData.accepted_id, _milestone_id], type: QueryTypes.SELECT });
                                for (let i = 0; rowChkDel && i < rowChkDel.length; i++) {
                                    const _deliveryStatus = (rowChkDel[i].delivery_status != null && validator.isNumeric(rowChkDel[i].delivery_status.toString()) ? parseInt(rowChkDel[i].delivery_status) : 0);
                                    if (_deliveryStatus <= 0) {
                                        return res.status(200).json(success(false, res.statusCode, 'Please mark delivery status as completed.', null));
                                    }
                                    deliveryIdData.push({
                                        delivery_id: rowChkDel[i].delivery_id,
                                        completion_file_name: rowChkDel[i].completion_file_name,
                                        completion_new_name: rowChkDel[i].completion_new_name,
                                        completion_to_all_activity: rowChkDel[i].completion_to_all_activity,
                                    });
                                }
                                if (deliveryIdData.length > 0) {
                                    const tmpIds = deliveryIdData.map((itm) => { return itm.delivery_id });
                                    const _queryChkAct = `SELECT t.activity_id, a.activity_name, t.delivery_id, t.activity_status, t.completion_file_name, t.completion_new_name
                                FROM project_track_activity t LEFT OUTER JOIN project_activity a ON t.activity_id = a.activity_id WHERE t.accepted_id = ? AND t.delivery_id IN (?)`;
                                    const rowChkAct = await db.sequelize.query(_queryChkAct, { replacements: [rowData.accepted_id, tmpIds], type: QueryTypes.SELECT });
                                    for (let j = 0; rowChkAct && j < rowChkAct.length; j++) {
                                        const _activityStatus = (rowChkAct[j].activity_status != null && validator.isNumeric(rowChkAct[j].activity_status.toString()) ? parseInt(rowChkAct[j].activity_status) : 0);
                                        if (_activityStatus <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, 'Please mark activity status as completed.', null));
                                        }
                                        activityIdData.push({
                                            activity_id: rowChkAct[j].activity_id,
                                            delivery_id: rowChkAct[j].delivery_id,
                                            activity_name: rowChkAct[j].activity_name,
                                            completion_file_name: rowChkAct[j].completion_file_name,
                                            completion_new_name: rowChkAct[j].completion_new_name,
                                        })
                                    }
                                }
                                const milHasFile = (rowChkMil[0].completion_new_name && rowChkMil[0].completion_new_name.length > 0) ? true : false;
                                const milToAllDel = (rowChkMil[0].completion_to_all_delivery && rowChkMil[0].completion_to_all_delivery) ? true : false;

                                if (milHasFile && milToAllDel) {
                                    // pass to approval
                                } else {
                                    for (let k = 0; deliveryIdData && k < deliveryIdData.length; k++) {
                                        const eleDel = deliveryIdData[k];
                                        const delHasFile = (eleDel.completion_new_name && eleDel.completion_new_name.length > 0) ? true : false;
                                        const delToAllDel = (eleDel.completion_to_all_activity && eleDel.completion_to_all_activity) ? true : false;
                                        if (delHasFile && delToAllDel) {
                                            // pass to approval
                                        } else {
                                            for (let l = 0; activityIdData && l < activityIdData.length; l++) {
                                                const eleAct = activityIdData[l];
                                                if (eleAct.delivery_id.toString() == eleDel.delivery_id.toString()) {
                                                    const actHasFile = (eleAct.completion_new_name && eleAct.completion_new_name.length > 0) ? true : false;
                                                    if (actHasFile) {
                                                        // pass to approval
                                                    } else {
                                                        return res.status(200).json(success(false, res.statusCode, 'Please upload completion evidence document for activity.<br>"' + eleAct.activity_name + '".', null));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                return res.status(200).json(success(false, res.statusCode, 'Milestone details not found, Please try again.', null));
                            }

                            // Send for approval

                            const _queryAddReq = `INSERT INTO project_track_status(accepted_id, project_id, milestone_id, curr_status, status_by, status_date, status_remark, is_by_owner)
                            VALUES(?, ?, ?, ?, ?, ?, ?, ?)  RETURNING "log_id"`;
                            const _repAddReq = [rowData.accepted_id, rowData.project_id, _milestone_id, 1, req.token_data.account_id, new Date(), 'Approval request sent.', false];
                            const [rowAddReq] = await db.sequelize.query(_queryAddReq, { replacements: _repAddReq, returning: true, type: QueryTypes.INSERT });
                            const log_id = (rowAddReq && rowAddReq.length > 0 && rowAddReq[0] ? rowAddReq[0].log_id : 0);
                            if (log_id > 0) {
                                return res.status(200).json(success(true, res.statusCode, 'Sent for approval successfully.', null));
                            } else {
                                return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                            }
                        } else {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                        }
                    }
                    else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Only IA can update status and upload documents.', null));
                    }
                }
                else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_doc_get_url = async (req, res, next) => {
    const { accept_id, milestone_id, doc_type, field_type, field_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pa.ia_reg_id FROM project_accepted pa WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && (row[0].reg_id.toString() == rowSelProj[0].owner_reg_id.toString()
                    || row[0].reg_id.toString() == rowSelProj[0].ia_reg_id.toString())) {

                    const doc_type_allowed = ['completion', 'other', 'beneficiary'];
                    const field_type_allowed = ['milestone', 'delivery', 'activity'];

                    const _doc_type = (doc_type && doc_type.length > 0) ? doc_type.trim() : "";
                    if (!utils.check_in_array(_doc_type.toLowerCase(), doc_type_allowed)) {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid value for parameter : "doc_type".<br>Values should be - ' + doc_type_allowed.join(', ') + '.', null));
                    }
                    const _field_type = (field_type && field_type.length > 0) ? field_type.trim() : "";
                    if (!utils.check_in_array(_field_type.toLowerCase(), field_type_allowed)) {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid value for parameter : "field_type".<br>Values should be - ' + field_type_allowed.join(', ') + '.', null));
                    }
                    const _field_id = field_id != null && validator.isNumeric(field_id.toString()) ? BigInt(field_id) : 0;
                    const resp = await entityDataModule.monitoring_looking_ia_milestone_doc_get_url(rowSelProj[0].accepted_id, _doc_type.toLowerCase(), _field_type.toLowerCase(), _field_id);
                    return res.status(200).json(success(true, res.statusCode, "", resp));
                }
                else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_reject = async (req, res, next) => {
    const { accept_id, milestone_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pa.ia_reg_id FROM project_accepted pa WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    if (row[0].reg_id.toString() == rowSelProj[0].owner_reg_id.toString()) {
                        const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                        if (_remark.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter reason to reject.', null));
                        }
                        if (_remark.length < 10) {
                            return res.status(200).json(success(false, res.statusCode, 'Reason should not be less than 10 character.', null));
                        }
                        const _queryChkMil = `SELECT approval_status FROM project_track_milestone WHERE accepted_id = ? AND milestone_id = ?`
                        const rowChkMil = await db.sequelize.query(_queryChkMil, { replacements: [rowSelProj[0].accepted_id, _milestone_id], type: QueryTypes.SELECT });
                        if (rowChkMil && rowChkMil.length > 0) {
                            const _approvalStatus = rowChkMil[0].approval_status != null && validator.isNumeric(rowChkMil[0].approval_status.toString()) ? parseInt(rowChkMil[0].approval_status.toString()) : 0;
                            if (_approvalStatus.toString() == '1') {
                                const _queryAddReq = `INSERT INTO project_track_status(accepted_id, project_id, milestone_id, curr_status, status_by, status_date, status_remark, is_by_owner)
                                VALUES(?, ?, ?, ?, ?, ?, ?, ?)  RETURNING "log_id"`;
                                const _repAddReq = [rowSelProj[0].accepted_id, rowSelProj[0].project_id, _milestone_id, 3, req.token_data.account_id, new Date(), _remark, true];
                                const [rowAddReq] = await db.sequelize.query(_queryAddReq, { replacements: _repAddReq, returning: true, type: QueryTypes.INSERT });

                                const log_id = (rowAddReq && rowAddReq.length > 0 && rowAddReq[0] ? rowAddReq[0].log_id : 0);
                                if (log_id > 0) {

                                    const _queryBackUp = `SELECT 'milestone' AS field_type, milestone_id AS field_id, milestone_status AS status, 
                                    completion_file_name AS c_file_name, completion_new_name AS c_new_name, completion_gcp_path AS c_gcp_path, completion_to_all_delivery AS c_to_all,
                                    other_file_name AS o_file_name, other_new_name AS o_new_name, other_gcp_path AS o_gcp_path, other_to_all_delivery AS o_to_all,
                                    beneficiary_file_name AS b_file_name, beneficiary_new_name AS b_new_name, beneficiary_gcp_path AS b_gcp_path, beneficiary_to_all_delivery AS b_to_all
                                    FROM project_track_milestone WHERE accepted_id = :accepted_id AND milestone_id = :milestone_id
                                    UNION ALL
                                    SELECT 'delivery' AS field_type, delivery_id AS field_id, delivery_status AS status, 
                                    completion_file_name AS c_file_name, completion_new_name AS c_new_name, completion_gcp_path AS c_gcp_path, completion_to_all_activity AS c_to_all,
                                    other_file_name AS o_file_name, other_new_name AS o_new_name, other_gcp_path AS o_gcp_path, other_to_all_activity AS o_to_all,
                                    beneficiary_file_name AS b_file_name, beneficiary_new_name AS b_new_name, beneficiary_gcp_path AS b_gcp_path, beneficiary_to_all_activity AS b_to_all
                                    FROM project_track_delivery WHERE accepted_id = :accepted_id AND milestone_id = :milestone_id
                                    UNION ALL
                                    SELECT 'activity' AS field_type, activity_id AS field_id, activity_status AS status, 
                                    completion_file_name AS c_file_name, completion_new_name AS c_new_name, completion_gcp_path AS c_gcp_path, false AS c_to_all,
                                    other_file_name AS o_file_name, other_new_name AS o_new_name, other_gcp_path AS o_gcp_path, false AS o_to_all,
                                    beneficiary_file_name AS b_file_name, beneficiary_new_name AS b_new_name, beneficiary_gcp_path AS b_gcp_path, false AS b_to_all
                                    FROM project_track_activity WHERE accepted_id = :accepted_id AND delivery_id IN (
                                        SELECT delivery_id FROM project_track_delivery WHERE accepted_id = :accepted_id AND milestone_id = :milestone_id
                                    )`;
                                    const rowBackUp = await db.sequelize.query(_queryBackUp, { replacements: { accepted_id: rowSelProj[0].accepted_id, milestone_id: _milestone_id }, type: QueryTypes.SELECT });
                                    var backupArray = [];
                                    for (let bi = 0; rowBackUp && bi < rowBackUp.length; bi++) {
                                        const eleBak = rowBackUp[bi];
                                        var c_gcp_path = (eleBak.c_gcp_path && eleBak.c_gcp_path.length > 0 ? eleBak.c_gcp_path : "");
                                        if (c_gcp_path.length > 0) {
                                            const c_gcp_path_new = 'monitoring/back/' + rowSelProj[0].accepted_id.toString() + eleBak.c_new_name;
                                            try {
                                                await cloudStorageModule.CopyFile(c_gcp_path, c_gcp_path_new);
                                                c_gcp_path = c_gcp_path_new;
                                            } catch (_) {
                                            }
                                        }
                                        var o_gcp_path = (eleBak.o_gcp_path && eleBak.o_gcp_path.length > 0 ? eleBak.o_gcp_path : "");
                                        if (o_gcp_path.length > 0) {
                                            const o_gcp_path_new = 'monitoring/back/' + rowSelProj[0].accepted_id.toString() + eleBak.o_new_name;
                                            try {
                                                await cloudStorageModule.CopyFile(o_gcp_path, o_gcp_path_new);
                                                o_gcp_path = o_gcp_path_new;
                                            } catch (_) {
                                            }
                                        }
                                        var b_gcp_path = (eleBak.b_gcp_path && eleBak.b_gcp_path.length > 0 ? eleBak.b_gcp_path : "");
                                        if (b_gcp_path.length > 0) {
                                            const b_gcp_path_new = 'monitoring/back/' + rowSelProj[0].accepted_id.toString() + eleBak.b_new_name;
                                            try {
                                                await cloudStorageModule.CopyFile(b_gcp_path, b_gcp_path_new);
                                                b_gcp_path = b_gcp_path_new;
                                            } catch (_) {
                                            }
                                        }

                                        backupArray.push({
                                            field_type: eleBak.field_type,
                                            field_id: eleBak.field_id,
                                            status: eleBak.status,
                                            c_file_name: eleBak.c_file_name,
                                            c_new_name: eleBak.c_new_name,
                                            c_gcp_path: c_gcp_path,
                                            c_to_all: eleBak.c_to_all,
                                            o_file_name: eleBak.o_file_name,
                                            o_new_name: eleBak.o_new_name,
                                            o_gcp_path: o_gcp_path,
                                            o_to_all: eleBak.o_to_all,
                                            b_file_name: eleBak.b_file_name,
                                            b_new_name: eleBak.b_new_name,
                                            b_gcp_path: b_gcp_path,
                                            b_to_all: eleBak.b_to_all,
                                        });
                                    }

                                    const _queryBackIn = `INSERT INTO project_track_reject_data(log_id, log_data) VALUES(?, ?)`;
                                    await db.sequelize.query(_queryBackIn, { replacements: [log_id, JSON.stringify(backupArray)], type: QueryTypes.INSERT });

                                    return res.status(200).json(success(true, res.statusCode, 'Rejected successfully.', null));
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                                }
                            } else {
                                return res.status(200).json(success(false, apiStatus.RELOAD_PAGE, 'Status has been already changed.', null));
                            }
                        }
                        else {
                            return res.status(200).json(success(false, res.statusCode, 'Milestone detail not found, Please try again.', null));
                        }
                    }
                    else {
                        return res.status(200).json(success(false, res.statusCode, 'Only project owner can reject request.', null));
                    }
                }
                else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_looking_ia_milestone_accept = async (req, res, next) => {
    const { accept_id, milestone_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _accept_id = (accept_id && accept_id.length > 0) ? accept_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_accept_id.length > 0 && utils.isUUID(_accept_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pa.accepted_id, pa.project_id, pa.owner_reg_id, pa.ia_reg_id FROM project_accepted pa WHERE pa.unique_id = ?`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_accept_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    if (row[0].reg_id.toString() == rowSelProj[0].owner_reg_id.toString()) {
                        const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                        if (_remark.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter remark to accept.', null));
                        }
                        if (_remark.length < 10) {
                            return res.status(200).json(success(false, res.statusCode, 'Remark should not be less than 10 character.', null));
                        }

                        const _queryChkMil = `SELECT approval_status FROM project_track_milestone WHERE accepted_id = ? AND milestone_id = ?`
                        const rowChkMil = await db.sequelize.query(_queryChkMil, { replacements: [rowSelProj[0].accepted_id, _milestone_id], type: QueryTypes.SELECT });
                        if (rowChkMil && rowChkMil.length > 0) {
                            const _approvalStatus = rowChkMil[0].approval_status != null && validator.isNumeric(rowChkMil[0].approval_status.toString()) ? parseInt(rowChkMil[0].approval_status.toString()) : 0;
                            if (_approvalStatus.toString() == '1') {
                                const _queryAddReq = `INSERT INTO project_track_status(accepted_id, project_id, milestone_id, curr_status, status_by, status_date, status_remark, is_by_owner)
                                VALUES(?, ?, ?, ?, ?, ?, ?, ?)  RETURNING "log_id"`;
                                const _repAddReq = [rowSelProj[0].accepted_id, rowSelProj[0].project_id, _milestone_id, 2, req.token_data.account_id, new Date(), _remark, true];
                                const [rowAddReq] = await db.sequelize.query(_queryAddReq, { replacements: _repAddReq, returning: true, type: QueryTypes.INSERT });

                                const log_id = (rowAddReq && rowAddReq.length > 0 && rowAddReq[0] ? rowAddReq[0].log_id : 0);
                                if (log_id > 0) {
                                    return res.status(200).json(success(true, res.statusCode, 'Accepted successfully.', null));
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                                }
                            } else {
                                return res.status(200).json(success(false, apiStatus.RELOAD_PAGE, 'Status has been already changed.', null));
                            }
                        }
                        else {
                            return res.status(200).json(success(false, res.statusCode, 'Milestone detail not found, Please try again.', null));
                        }
                    }
                    else {
                        return res.status(200).json(success(false, res.statusCode, 'Only project owner can approve request.', null));
                    }
                }
                else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_project_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM project_created pc 
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2 ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%',
                    country_id: _country_id, state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
            pc.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.floated_date, pc.funding_option_id,
            c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code
            FROM project_created pc LEFT OUTER JOIN countries c ON pc.country_id = c.country_id LEFT OUTER JOIN states s ON pc.state_id = s.state_id
            LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id                      
            WHERE pc.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2 ${_sql_condition}
            LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                var funding_option = '';
                for (let p = 0; p < constants.project_funding_option.length; p++) {
                    if (constants.project_funding_option[p].id.toString() == row1[i].funding_option_id.toString()) {
                        funding_option = constants.project_funding_option[p].short_name; break;
                    }
                }
                const _project_cost = row1[i].project_cost != null && validator.isNumeric(row1[i].project_cost.toString()) ? parseFloat(parseFloat(row1[i].project_cost).toFixed(2)) : 0;

                list.push({
                    sr_no: row1[i].sr_no,
                    project_id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    funding_option: funding_option,
                    project_cost: _project_cost,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    start_date: row1[i].start_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].end_date)) : "",
                    floated_date: row1[i].floated_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].floated_date)) : "",
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_project_view = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
                pc.funding_option_id, pc.proj_objective, pc.proj_summary, pc.beneficiary_detail, pc.mapped_under, pc.sdg_goals, pc.esg_objective,
                COALESCE((SELECT t.thematic_name FROM thematic_area t WHERE t.thematic_id = COALESCE(pc.thematic_id, 0) LIMIT 1), '') AS thematic_area,
                COALESCE((SELECT t.country_name FROM countries t WHERE t.country_id = COALESCE(pc.country_id, 0) LIMIT 1), '') AS country_name,
                COALESCE((SELECT t.state_name FROM states t WHERE t.state_id = COALESCE(pc.state_id, 0) LIMIT 1), '') AS state_name,
                COALESCE((SELECT t.district_name FROM districts t WHERE t.district_id = COALESCE(pc.district_id, 0) LIMIT 1), '') AS district_name,
                COALESCE((SELECT t.block_name FROM blocks t WHERE t.block_id = COALESCE(pc.block_id, 0) LIMIT 1), '') AS block_name, pc.pin_code,
                pc.incharge_full_name, pc.incharge_designation, pc.incharge_email_id, pc.incharge_mobile_ccc, pc.incharge_mobile_no,  
                um.first_name AS c_first_name, um.middle_name AS c_middle_name, um.last_name AS c_last_name, um.email_id AS c_email_id, 
                um.mobile_ccc AS c_mobile_ccc, um.mobile_no AS c_mobile_no, um.company_name AS c_company_name
                FROM project_created pc INNER JOIN user_master um ON pc.reg_id = um.reg_id 
                WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {
                    const rowData = rowSelProj[0];
                    var purpose = '';
                    for (let p = 0; p < constants.project_purpose.length; p++) {
                        if (constants.project_purpose[p].id.toString() == rowData.purpose_id.toString()) {
                            purpose = constants.project_purpose[p].name; break;
                        }
                    }
                    var funding_option = '';
                    for (let p = 0; p < constants.project_funding_option.length; p++) {
                        if (constants.project_funding_option[p].id.toString() == rowData.funding_option_id.toString()) {
                            funding_option = constants.project_funding_option[p].name; break;
                        }
                    }
                    var mapped_under = '';
                    for (let p = 0; p < constants.project_mapped_under.length; p++) {
                        if (constants.project_mapped_under[p].id.toString().toLowerCase() == rowData.mapped_under.toString().toLowerCase()) {
                            mapped_under = constants.project_mapped_under[p].name; break;
                        }
                    }
                    var sdg_goals = [];
                    if (rowData.sdg_goals && rowData.sdg_goals.length > 0) {
                        sdg_goals = await commonModule.project_sdg_goals_get_by_ids(rowData.sdg_goals);
                    }
                    var my_scope_of_work = await entityDataModule.project_scope_of_work_view_data(rowData.project_id);
                    const dynamic_values = await commonModule.project_dynamic_field_data(rowData.project_id);
                    const _project_cost = rowData.project_cost != null && validator.isNumeric(rowData.project_cost.toString()) ? parseFloat(parseFloat(rowData.project_cost).toFixed(2)) : 0;

                    const results = {
                        project_detail: {
                            project_no: (rowData.project_no ? rowData.project_no : ""),
                            project_name: (rowData.project_name ? rowData.project_name : ""),
                            project_cost: _project_cost,
                            start_date: (rowData.start_date ? dateFormat(constants.textbox_date_api_format, rowData.start_date) : ""),
                            end_date: (rowData.end_date ? dateFormat(constants.textbox_date_api_format, rowData.end_date) : ""),
                            purpose: purpose,
                            funding_option: funding_option,
                            thematic_area: (rowData.thematic_area ? rowData.thematic_area : ""),
                            proj_objective: (rowData.proj_objective ? rowData.proj_objective : ""),
                            proj_summary: (rowData.proj_summary ? rowData.proj_summary : ""),
                            beneficiary_detail: (rowData.beneficiary_detail ? rowData.beneficiary_detail : ""),
                            mapped_under: mapped_under,
                            sdg_goals: sdg_goals,
                            esg_objective: (rowData.esg_objective ? rowData.esg_objective : ""),
                            country_name: (rowData.country_name ? rowData.country_name : ""),
                            state_name: (rowData.state_name ? rowData.state_name : ""),
                            district_name: (rowData.district_name ? rowData.district_name : ""),
                            block_name: (rowData.block_name ? rowData.block_name : ""),
                            pin_code: (rowData.pin_code ? rowData.pin_code : ""),
                        },
                        project_incharge: {
                            full_name: rowData.incharge_full_name,
                            designation: rowData.incharge_designation,
                            email_id: rowData.incharge_email_id,
                            mobile_ccc: rowData.incharge_mobile_ccc,
                            mobile_no: rowData.incharge_mobile_no,
                        },
                        dynamic_values: dynamic_values,
                        scope_of_work: my_scope_of_work,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_milestone_list = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {
                    const rowData = rowSelProj[0]; var milestones = [];

                    await db.sequelize.query(`CALL project_track_crowd_fund_update_data_if_not_exists(?)`,
                        { replacements: [rowData.project_id], type: QueryTypes.UPDATE });

                    const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, ml.milestone_no, ml.milestone_name
                    FROM project_track_milestone pm INNER JOIN project_milestone ml ON pm.milestone_id = ml.milestone_id
                    WHERE pm.project_id = ?`;
                    const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.project_id], type: QueryTypes.SELECT });

                    for (let i = 0; rowMls && i < rowMls.length; i++) {
                        const eleRow = rowMls[i];
                        const _milestone_status = eleRow.milestone_status != null && validator.isNumeric(eleRow.milestone_status.toString()) ? parseInt(eleRow.milestone_status) : 0;
                        milestones.push({
                            milestone_id: eleRow.milestone_id,
                            milestone_no: eleRow.milestone_no,
                            milestone_name: eleRow.milestone_name,
                            milestone_status: _milestone_status,
                        });
                    }

                    const _project_cost = rowData.project_cost != null && validator.isNumeric(rowData.project_cost.toString()) ? parseFloat(parseFloat(rowData.project_cost).toFixed(2)) : 0;
                    const fund_raised = await entityDataModule.project_total_fund_raised(rowData.project_id);

                    const results = {
                        project_id: rowData.project_unique_id,
                        project_no: rowData.project_no,
                        project_name: rowData.project_name,
                        project_cost: _project_cost,
                        fund_raised: fund_raised,
                        milestones: milestones,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_milestone_view = async (req, res, next) => {
    const { project_id, milestone_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_project_id.length > 0 && utils.isUUID(_project_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {
                    const rowData = rowSelProj[0];

                    const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status, ml.milestone_no, ml.milestone_name,
                    pm.approve_remark, pm.reject_remark, pm.approval_status_date, ml.sort_order,
                    pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                    pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                    pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                    FROM project_track_milestone pm INNER JOIN project_milestone ml ON pm.milestone_id = ml.milestone_id
                    WHERE pm.project_id = ? AND pm.milestone_id = ?`;
                    const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                    if (rowMls && rowMls.length > 0) {
                        const dataMil = rowMls[0]; var delivery = [];
                        const _milestone_status = dataMil.milestone_status != null && validator.isNumeric(dataMil.milestone_status.toString()) ? parseInt(dataMil.milestone_status) : 0;
                        const _approval_status = (dataMil.approval_status != null && validator.isNumeric(dataMil.approval_status.toString()) ? parseInt(dataMil.approval_status) : 0);

                        const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                        pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                        pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, dl.sort_order,
                        pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                        FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                        WHERE pd.project_id = ? AND pd.milestone_id = ? ORDER BY dl.sort_order`;
                        const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                        for (let i = 0; rowDel && i < rowDel.length; i++) {
                            const eleDel = rowDel[i]; var activity = [];
                            const _delivery_status = eleDel.delivery_status != null && validator.isNumeric(eleDel.delivery_status.toString()) ? parseInt(eleDel.delivery_status) : 0;

                            const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name, ac.sort_order,
                            pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                            pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                            FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                            WHERE pa.project_id = ? AND pa.delivery_id = ? ORDER BY ac.sort_order`;
                            const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.project_id, eleDel.delivery_id], type: QueryTypes.SELECT });
                            for (let j = 0; rowAct && j < rowAct.length; j++) {
                                const eleAct = rowAct[j];
                                const _activity_status = eleAct.activity_status != null && validator.isNumeric(eleAct.activity_status.toString()) ? parseInt(eleAct.activity_status) : 0;

                                activity.push({
                                    activity_id: eleAct.activity_id,
                                    activity_no: eleAct.activity_no,
                                    activity_name: eleAct.activity_name,
                                    activity_order: eleAct.sort_order,
                                    activity_status: _activity_status,
                                    completion_file_name: (eleAct.completion_file_name ? eleAct.completion_file_name : ""),
                                    completion_new_name: (eleAct.completion_new_name ? eleAct.completion_new_name : ""),
                                    other_file_name: (eleAct.other_file_name ? eleAct.other_file_name : ""),
                                    other_new_name: (eleAct.other_new_name ? eleAct.other_new_name : ""),
                                    beneficiary_file_name: (eleAct.beneficiary_file_name ? eleAct.beneficiary_file_name : ""),
                                    beneficiary_new_name: (eleAct.beneficiary_new_name ? eleAct.beneficiary_new_name : ""),
                                });
                            }

                            delivery.push({
                                delivery_id: eleDel.delivery_id,
                                delivery_no: eleDel.delivery_no,
                                delivery_name: eleDel.delivery_name,
                                delivery_order: eleDel.sort_order,
                                delivery_status: _delivery_status,
                                completion_file_name: (eleDel.completion_file_name ? eleDel.completion_file_name : ""),
                                completion_new_name: (eleDel.completion_new_name ? eleDel.completion_new_name : ""),
                                completion_to_all_activity: eleDel.completion_to_all_activity,
                                other_file_name: (eleDel.other_file_name ? eleDel.other_file_name : ""),
                                other_new_name: (eleDel.other_new_name ? eleDel.other_new_name : ""),
                                other_to_all_activity: eleDel.other_to_all_activity,
                                beneficiary_file_name: (eleDel.beneficiary_file_name ? eleDel.beneficiary_file_name : ""),
                                beneficiary_new_name: (eleDel.beneficiary_new_name ? eleDel.beneficiary_new_name : ""),
                                beneficiary_to_all_activity: eleDel.beneficiary_to_all_activity,
                                activity: activity,
                            });
                        }

                        const _project_cost = rowData.project_cost != null && validator.isNumeric(rowData.project_cost.toString()) ? parseFloat(parseFloat(rowData.project_cost).toFixed(2)) : 0;

                        const results = {
                            project_id: rowData.project_unique_id,
                            project_no: rowData.project_no,
                            project_name: rowData.project_name,
                            project_cost: _project_cost,
                            milestone_id: _milestone_id,
                            milestone_no: dataMil.milestone_no,
                            milestone_name: dataMil.milestone_name,
                            milestone_order: dataMil.sort_order,
                            milestone_status: _milestone_status,
                            request_for_approve: (_approval_status.toString() == '1' ? true : false),
                            is_approved: (_approval_status.toString() == '2' ? true : false),
                            approve_remark: (dataMil.approve_remark ? dataMil.approve_remark : ""),
                            is_rejected: (_approval_status.toString() == '3' ? true : false),
                            reject_remark: (dataMil.reject_remark ? dataMil.reject_remark : ""),
                            status_date: dataMil.approval_status_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(dataMil.approval_status_date)) : "",
                            completion_file_name: (dataMil.completion_file_name ? dataMil.completion_file_name : ""),
                            completion_new_name: (dataMil.completion_new_name ? dataMil.completion_new_name : ""),
                            completion_to_all_delivery: dataMil.completion_to_all_delivery,
                            other_file_name: (dataMil.other_file_name ? dataMil.other_file_name : ""),
                            other_new_name: (dataMil.other_new_name ? dataMil.other_new_name : ""),
                            other_to_all_delivery: dataMil.other_to_all_delivery,
                            beneficiary_file_name: (dataMil.beneficiary_file_name ? dataMil.beneficiary_file_name : ""),
                            beneficiary_new_name: (dataMil.beneficiary_new_name ? dataMil.beneficiary_new_name : ""),
                            beneficiary_to_all_delivery: dataMil.beneficiary_to_all_delivery,
                            delivery: delivery,
                            upload_file_max_size: project_monitoring_upload_file_size,
                            upload_file_allowed: project_monitoring_upload_file_allowed,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_milestone_save = async (req, res, next) => {
    const { project_id, milestone_id, save_form_data } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_project_id.length > 0 && utils.isUUID(_project_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {
                    const rowData = rowSelProj[0];

                    const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status,
                    pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                    pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                    pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                    FROM project_track_milestone pm WHERE pm.project_id = ? AND pm.milestone_id = ?`;
                    const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                    if (rowMls && rowMls.length > 0) {

                        const _approval_status = (rowMls[0].approval_status != null && validator.isNumeric(rowMls[0].approval_status.toString()) ? parseInt(rowMls[0].approval_status) : 0);
                        if (_approval_status.toString() == '1') {
                            return res.status(200).json(success(false, res.statusCode, 'Cannot edit, already sent request for approval.', null));
                        }
                        if (_approval_status.toString() == '2') {
                            return res.status(200).json(success(false, res.statusCode, 'Cannot edit, Milestone is already approved.', null));
                        }

                        var _save_form_data = [];
                        if (save_form_data) {
                            if (save_form_data.constructor == String) {
                                try { _save_form_data = JSON.parse(save_form_data); } catch (_) { }
                            } else {
                                if (save_form_data.constructor == Array) { _save_form_data = save_form_data; }
                            }
                        }

                        if (_save_form_data && _save_form_data.length > 0) {
                            var deliveryIDs = []; var activityIDs = []; var file_params = [];
                            const _querySelDel = `SELECT delivery_id FROM project_track_delivery WHERE project_id = ? AND milestone_id = ?`;
                            const rowSelDel = await db.sequelize.query(_querySelDel, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                            for (let i = 0; rowSelDel && i < rowSelDel.length; i++) {
                                deliveryIDs.push(rowSelDel[i].delivery_id);
                            }
                            if (deliveryIDs.length > 0) {
                                const _querySelAct = `SELECT activity_id FROM project_track_activity WHERE project_id = ? AND delivery_id IN (?)`;
                                const rowSelAct = await db.sequelize.query(_querySelAct, { replacements: [rowData.project_id, deliveryIDs], type: QueryTypes.SELECT });
                                for (let j = 0; rowSelAct && j < rowSelAct.length; j++) {
                                    activityIDs.push(rowSelAct[j].activity_id);
                                }
                            }

                            // Validate posted data

                            for (let i = 0; i < _save_form_data.length; i++) {
                                const eleData = _save_form_data[i];
                                if (eleData.field_type && eleData.field_type.toLowerCase() == 'milestone') {
                                    if (eleData.field_id.toString() != _milestone_id.toString()) {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid milestone id found in request.', null));
                                    }
                                    file_params.push('milestone_completion_' + _milestone_id.toString());
                                    file_params.push('milestone_other_' + _milestone_id.toString());
                                    file_params.push('milestone_beneficiary_' + _milestone_id.toString());
                                }
                                else if (eleData.field_type && eleData.field_type.toLowerCase() == 'delivery') {
                                    var exists = false;
                                    for (let j = 0; j < deliveryIDs.length; j++) {
                                        if (eleData.field_id.toString() == deliveryIDs[j].toString()) {
                                            exists = true; break;
                                        }
                                    }
                                    if (!exists) {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                    }
                                    file_params.push('delivery_completion_' + eleData.field_id.toString());
                                    file_params.push('delivery_other_' + eleData.field_id.toString());
                                    file_params.push('delivery_beneficiary_' + eleData.field_id.toString());
                                }
                                else if (eleData.field_type && eleData.field_type.toLowerCase() == 'activity') {
                                    var exists = false;
                                    for (let j = 0; j < activityIDs.length; j++) {
                                        if (eleData.field_id.toString() == activityIDs[j].toString()) {
                                            exists = true; break;
                                        }
                                    }
                                    if (!exists) {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                    }
                                    file_params.push('activity_completion_' + eleData.field_id.toString());
                                    file_params.push('activity_other_' + eleData.field_id.toString());
                                    file_params.push('activity_beneficiary_' + eleData.field_id.toString());
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Invalid field_type value it should be milestone/delivery/activity.', null));
                                }
                            }

                            // Uploading documents to GCP

                            var gcpUploadedDocs = [];
                            for (let i = 0; i < file_params.length; i++) {
                                const file_name_to_check = file_params[i];
                                var is_file_exists = false; var file_json_data = null;
                                for (let j = 0; req.files && j < req.files.length; j++) {
                                    if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                        file_json_data = req.files[j]; is_file_exists = true; break;
                                    }
                                }
                                if (is_file_exists) {
                                    try {
                                        const gcp_file_path = 'monitoring/' + rowData.project_id.toString() + file_json_data.filename;
                                        const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                        gcpUploadedDocs.push({
                                            param_name: file_name_to_check,
                                            original_file_name: file_json_data.originalname,
                                            new_file_name: file_json_data.filename,
                                            gcp_file_path: gcp_file_path,
                                            gcp_response_data: JSON.stringify(gcpResp),
                                        });
                                    }
                                    catch (gErr) {
                                        try { _logger.error(gErr.stack); } catch (_) { }
                                        for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                            try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                        }
                                        return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, null));
                                    }
                                }
                            }

                            // Create final data row

                            var final_data_array = [];

                            for (let i = 0; i < _save_form_data.length; i++) {
                                const eleData = _save_form_data[i];
                                var status = eleData.status != null && validator.isNumeric(eleData.status.toString()) ? parseInt(eleData.status) : 0;
                                var completion_doc_delete = eleData.completion_doc_delete && eleData.completion_doc_delete == true ? true : false;
                                var other_doc_delete = eleData.other_doc_delete && eleData.other_doc_delete == true ? true : false;
                                var beneficiary_doc_delete = eleData.beneficiary_doc_delete && eleData.beneficiary_doc_delete == true ? true : false;
                                var completion_file = null; var other_file = null; var beneficiary_file = null;
                                var completion_doc_to_all = eleData.completion_doc_to_all && eleData.completion_doc_to_all == true ? true : false;
                                var other_doc_to_all = eleData.other_doc_to_all && eleData.other_doc_to_all == true ? true : false;
                                var beneficiary_doc_to_all = eleData.beneficiary_doc_to_all && eleData.beneficiary_doc_to_all == true ? true : false;

                                var delete_completion_file_path = '';
                                var delete_other_file_path = '';
                                var delete_beneficiary_file_path = '';

                                if (eleData.field_type.toLowerCase() == 'milestone') {
                                    completion_doc_delete = (completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 ? true : false);
                                    other_doc_delete = (other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 ? true : false);
                                    beneficiary_doc_delete = (beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 ? true : false);
                                    for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                        if (gcpUploadedDocs[j].param_name == 'milestone_completion_' + _milestone_id.toString()) {
                                            completion_file = gcpUploadedDocs[j];
                                        }
                                        if (gcpUploadedDocs[j].param_name == 'milestone_other_' + _milestone_id.toString()) {
                                            other_file = gcpUploadedDocs[j];
                                        }
                                        if (gcpUploadedDocs[j].param_name == 'milestone_beneficiary_' + _milestone_id.toString()) {
                                            beneficiary_file = gcpUploadedDocs[j];
                                        }
                                    }
                                    if (!completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 && completion_file != null) {
                                        completion_doc_delete = true;
                                    }
                                    if (completion_doc_delete) {
                                        delete_completion_file_path = rowMls[0].completion_gcp_path;
                                    }
                                    if (!other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 && other_file != null) {
                                        other_doc_delete = true;
                                    }
                                    if (other_doc_delete) {
                                        delete_other_file_path = rowMls[0].other_gcp_path;
                                    }
                                    if (!beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                        beneficiary_doc_delete = true;
                                    }
                                    if (beneficiary_doc_delete) {
                                        delete_beneficiary_file_path = rowMls[0].beneficiary_gcp_path;
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'delivery') {
                                    const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                                    pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                                    pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, 
                                    pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                                    FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                                    WHERE pd.project_id = ? AND pd.delivery_id = ?`;
                                    const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.project_id, eleData.field_id], type: QueryTypes.SELECT });
                                    if (rowDel && rowDel.length > 0) {
                                        completion_doc_delete = (completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 ? true : false);
                                        other_doc_delete = (other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 ? true : false);
                                        beneficiary_doc_delete = (beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 ? true : false);
                                        for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                            if (gcpUploadedDocs[j].param_name == 'delivery_completion_' + eleData.field_id.toString()) {
                                                completion_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'delivery_other_' + eleData.field_id.toString()) {
                                                other_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'delivery_beneficiary_' + eleData.field_id.toString()) {
                                                beneficiary_file = gcpUploadedDocs[j];
                                            }
                                        }
                                        if (!completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 && completion_file != null) {
                                            completion_doc_delete = true;
                                        }
                                        if (completion_doc_delete) {
                                            delete_completion_file_path = rowDel[0].completion_gcp_path;
                                        }
                                        if (!other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 && other_file != null) {
                                            other_doc_delete = true;
                                        }
                                        if (other_doc_delete) {
                                            delete_other_file_path = rowDel[0].other_gcp_path;
                                        }
                                        if (!beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                            beneficiary_doc_delete = true;
                                        }
                                        if (beneficiary_doc_delete) {
                                            delete_beneficiary_file_path = rowDel[0].beneficiary_gcp_path;
                                        }
                                    } else {
                                        for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                            try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                        }
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'activity') {
                                    const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name,
                                    pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                                    pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                                    FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                                    WHERE pa.project_id = ? AND pa.activity_id = ?`;
                                    const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.project_id, eleData.field_id], type: QueryTypes.SELECT });
                                    if (rowAct && rowAct.length > 0) {
                                        completion_doc_delete = (completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 ? true : false);
                                        other_doc_delete = (other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 ? true : false);
                                        beneficiary_doc_delete = (beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 ? true : false);
                                        for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                            if (gcpUploadedDocs[j].param_name == 'activity_completion_' + eleData.field_id.toString()) {
                                                completion_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'activity_other_' + eleData.field_id.toString()) {
                                                other_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'activity_beneficiary_' + eleData.field_id.toString()) {
                                                beneficiary_file = gcpUploadedDocs[j];
                                            }
                                        }
                                        if (!completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 && completion_file != null) {
                                            completion_doc_delete = true;
                                        }
                                        if (completion_doc_delete) {
                                            delete_completion_file_path = rowAct[0].completion_gcp_path;
                                        }
                                        if (!other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 && other_file != null) {
                                            other_doc_delete = true;
                                        }
                                        if (other_doc_delete) {
                                            delete_other_file_path = rowAct[0].other_gcp_path;
                                        }
                                        if (!beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                            beneficiary_doc_delete = true;
                                        }
                                        if (beneficiary_doc_delete) {
                                            delete_beneficiary_file_path = rowAct[0].beneficiary_gcp_path;
                                        }
                                    } else {
                                        for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                            try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                        }
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                    }
                                }
                                final_data_array.push({
                                    field_type: eleData.field_type,
                                    field_id: eleData.field_id,
                                    status: status,
                                    completion_doc_delete: completion_doc_delete,
                                    other_doc_delete: other_doc_delete,
                                    beneficiary_doc_delete: beneficiary_doc_delete,
                                    completion_file: completion_file,
                                    other_file: other_file,
                                    beneficiary_file: beneficiary_file,
                                    completion_doc_to_all: completion_doc_to_all,
                                    other_doc_to_all: other_doc_to_all,
                                    beneficiary_doc_to_all: beneficiary_doc_to_all,
                                    delete_completion_file_path: delete_completion_file_path,
                                    delete_other_file_path: delete_other_file_path,
                                    delete_beneficiary_file_path: delete_beneficiary_file_path,
                                })
                            }

                            /**************************************************************************************************/
                            const currDate = new Date(); var gcpFilesToDelete = [];


                            for (let i = 0; i < final_data_array.length; i++) {
                                const eleData = final_data_array[i];
                                if (eleData.field_type.toLowerCase() == 'milestone') {
                                    var _queryMilUp_1 = `UPDATE project_track_milestone SET milestone_status = ?, modify_by = ?, modify_date = ? `;
                                    var replMilUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                    if (eleData.completion_doc_delete) {
                                        _queryMilUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_delivery = false ';
                                        gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                    }
                                    if (eleData.other_doc_delete) {
                                        _queryMilUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_delivery = false ';
                                        gcpFilesToDelete.push(eleData.delete_other_file_path);
                                    }
                                    if (eleData.beneficiary_doc_delete) {
                                        _queryMilUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_delivery = false ';
                                        gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                    }
                                    _queryMilUp_1 += ' WHERE project_id = ? AND milestone_id = ? '
                                    replMilUp_1.push(rowData.project_id); replMilUp_1.push(_milestone_id);
                                    await db.sequelize.query(_queryMilUp_1, { replacements: replMilUp_1, type: QueryTypes.UPDATE });

                                    if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                        var _queryMilUp_2 = `UPDATE project_track_milestone SET modify_by = ?, modify_date = ? `;
                                        var replMilUp_2 = [req.token_data.account_id, currDate];
                                        if (eleData.completion_file != null) {
                                            _queryMilUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_delivery = ? ';
                                            var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                            replMilUp_2.push(eleData.completion_file.original_file_name); replMilUp_2.push(eleData.completion_file.new_file_name);
                                            replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp);
                                            replMilUp_2.push(eleData.completion_doc_to_all);
                                        }
                                        if (eleData.other_file != null) {
                                            _queryMilUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_delivery = ? ';
                                            var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                            replMilUp_2.push(eleData.other_file.original_file_name); replMilUp_2.push(eleData.other_file.new_file_name);
                                            replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.other_doc_to_all);
                                        }
                                        if (eleData.beneficiary_file != null) {
                                            _queryMilUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_delivery = ? ';
                                            var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                            replMilUp_2.push(eleData.beneficiary_file.original_file_name); replMilUp_2.push(eleData.beneficiary_file.new_file_name);
                                            replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.beneficiary_doc_to_all);
                                        }
                                        _queryMilUp_2 += ' WHERE project_id = ? AND milestone_id = ? '
                                        replMilUp_2.push(rowData.project_id); replMilUp_2.push(_milestone_id);
                                        await db.sequelize.query(_queryMilUp_2, { replacements: replMilUp_2, type: QueryTypes.UPDATE });
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'delivery') {
                                    var _queryDelUp_1 = `UPDATE project_track_delivery SET delivery_status = ?, modify_by = ?, modify_date = ? `;
                                    var replDelUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                    if (eleData.completion_doc_delete) {
                                        _queryDelUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_activity = false ';
                                        gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                    }
                                    if (eleData.other_doc_delete) {
                                        _queryDelUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_activity = false ';
                                        gcpFilesToDelete.push(eleData.delete_other_file_path);
                                    }
                                    if (eleData.beneficiary_doc_delete) {
                                        _queryDelUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_activity = false ';
                                        gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                    }
                                    _queryDelUp_1 += ' WHERE project_id = ? AND delivery_id = ? '
                                    replDelUp_1.push(rowData.project_id); replDelUp_1.push(eleData.field_id);
                                    await db.sequelize.query(_queryDelUp_1, { replacements: replDelUp_1, type: QueryTypes.UPDATE });
                                    if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                        var _queryDelUp_2 = `UPDATE project_track_delivery SET modify_by = ?, modify_date = ? `;
                                        var replDelUp_2 = [req.token_data.account_id, currDate];
                                        if (eleData.completion_file != null) {
                                            _queryDelUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_activity = ? ';
                                            var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                            replDelUp_2.push(eleData.completion_file.original_file_name); replDelUp_2.push(eleData.completion_file.new_file_name);
                                            replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.completion_doc_to_all);
                                        }
                                        if (eleData.other_file != null) {
                                            _queryDelUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_activity = ? ';
                                            var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                            replDelUp_2.push(eleData.other_file.original_file_name); replDelUp_2.push(eleData.other_file.new_file_name);
                                            replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.other_doc_to_all);
                                        }
                                        if (eleData.beneficiary_file != null) {
                                            _queryDelUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_activity = ? ';
                                            var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                            replDelUp_2.push(eleData.beneficiary_file.original_file_name); replDelUp_2.push(eleData.beneficiary_file.new_file_name);
                                            replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.beneficiary_doc_to_all);
                                        }
                                        _queryDelUp_2 += ' WHERE project_id = ? AND delivery_id = ? '
                                        replDelUp_2.push(rowData.project_id); replDelUp_2.push(eleData.field_id);
                                        await db.sequelize.query(_queryDelUp_2, { replacements: replDelUp_2, type: QueryTypes.UPDATE });
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'activity') {
                                    var _queryActUp_1 = `UPDATE project_track_activity SET activity_status = ?, modify_by = ?, modify_date = ? `;
                                    var replActUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                    if (eleData.completion_doc_delete) {
                                        _queryActUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null ';
                                        gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                    }
                                    if (eleData.other_doc_delete) {
                                        _queryActUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null ';
                                        gcpFilesToDelete.push(eleData.delete_other_file_path);
                                    }
                                    if (eleData.beneficiary_doc_delete) {
                                        _queryActUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null ';
                                        gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                    }
                                    _queryActUp_1 += ' WHERE project_id = ? AND activity_id = ? '
                                    replActUp_1.push(rowData.project_id); replActUp_1.push(eleData.field_id);
                                    await db.sequelize.query(_queryActUp_1, { replacements: replActUp_1, type: QueryTypes.UPDATE });
                                    if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                        var _queryActUp_2 = `UPDATE project_track_activity SET modify_by = ?, modify_date = ? `;
                                        var replActUp_2 = [req.token_data.account_id, currDate];
                                        if (eleData.completion_file != null) {
                                            _queryActUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ? ';
                                            var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                            replActUp_2.push(eleData.completion_file.original_file_name); replActUp_2.push(eleData.completion_file.new_file_name);
                                            replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                        }
                                        if (eleData.other_file != null) {
                                            _queryActUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ? ';
                                            var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                            replActUp_2.push(eleData.other_file.original_file_name); replActUp_2.push(eleData.other_file.new_file_name);
                                            replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                        }
                                        if (eleData.beneficiary_file != null) {
                                            _queryActUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ? ';
                                            var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                            replActUp_2.push(eleData.beneficiary_file.original_file_name); replActUp_2.push(eleData.beneficiary_file.new_file_name);
                                            replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                        }
                                        _queryActUp_2 += ' WHERE project_id = ? AND activity_id = ? '
                                        replActUp_2.push(rowData.project_id); replActUp_2.push(eleData.field_id);
                                        await db.sequelize.query(_queryActUp_2, { replacements: replActUp_2, type: QueryTypes.UPDATE });
                                    }
                                }
                            }

                            for (let dd = 0; gcpFilesToDelete && dd < gcpFilesToDelete.length; dd++) {
                                if (gcpFilesToDelete[dd] && gcpFilesToDelete[dd].length > 0) {
                                    try { await cloudStorageModule.DeleteFile(gcpFilesToDelete[dd]); } catch (_) { }
                                }
                            }

                            return res.status(200).json(success(true, res.statusCode, 'Saved successfully.', null));

                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'No changes has been made.', null));
                        }
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_milestone_send = async (req, res, next) => {
    const { project_id, milestone_id, save_form_data } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_project_id.length > 0 && utils.isUUID(_project_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {
                    const rowData = rowSelProj[0];

                    const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status,
                    pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                    pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                    pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                    FROM project_track_milestone pm WHERE pm.project_id = ? AND pm.milestone_id = ?`;
                    const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                    if (rowMls && rowMls.length > 0) {

                        const _approval_status = (rowMls[0].approval_status != null && validator.isNumeric(rowMls[0].approval_status.toString()) ? parseInt(rowMls[0].approval_status) : 0);
                        if (_approval_status.toString() == '1') {
                            return res.status(200).json(success(false, res.statusCode, 'Cannot edit, already sent request for approval.', null));
                        }
                        if (_approval_status.toString() == '2') {
                            return res.status(200).json(success(false, res.statusCode, 'Cannot edit, Milestone is already approved.', null));
                        }

                        var _save_form_data = [];
                        if (save_form_data) {
                            if (save_form_data.constructor == String) {
                                try { _save_form_data = JSON.parse(save_form_data); } catch (_) { }
                            } else {
                                if (save_form_data.constructor == Array) { _save_form_data = save_form_data; }
                            }
                        }

                        if (_save_form_data && _save_form_data.length > 0) {
                            var deliveryIDs = []; var activityIDs = []; var file_params = [];
                            const _querySelDel = `SELECT delivery_id FROM project_track_delivery WHERE project_id = ? AND milestone_id = ?`;
                            const rowSelDel = await db.sequelize.query(_querySelDel, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                            for (let i = 0; rowSelDel && i < rowSelDel.length; i++) {
                                deliveryIDs.push(rowSelDel[i].delivery_id);
                            }
                            if (deliveryIDs.length > 0) {
                                const _querySelAct = `SELECT activity_id FROM project_track_activity WHERE project_id = ? AND delivery_id IN (?)`;
                                const rowSelAct = await db.sequelize.query(_querySelAct, { replacements: [rowData.project_id, deliveryIDs], type: QueryTypes.SELECT });
                                for (let j = 0; rowSelAct && j < rowSelAct.length; j++) {
                                    activityIDs.push(rowSelAct[j].activity_id);
                                }
                            }

                            // Validate posted data

                            for (let i = 0; i < _save_form_data.length; i++) {
                                const eleData = _save_form_data[i];
                                if (eleData.field_type && eleData.field_type.toLowerCase() == 'milestone') {
                                    if (eleData.field_id.toString() != _milestone_id.toString()) {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid milestone id found in request.', null));
                                    }
                                    file_params.push('milestone_completion_' + _milestone_id.toString());
                                    file_params.push('milestone_other_' + _milestone_id.toString());
                                    file_params.push('milestone_beneficiary_' + _milestone_id.toString());
                                }
                                else if (eleData.field_type && eleData.field_type.toLowerCase() == 'delivery') {
                                    var exists = false;
                                    for (let j = 0; j < deliveryIDs.length; j++) {
                                        if (eleData.field_id.toString() == deliveryIDs[j].toString()) {
                                            exists = true; break;
                                        }
                                    }
                                    if (!exists) {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                    }
                                    file_params.push('delivery_completion_' + eleData.field_id.toString());
                                    file_params.push('delivery_other_' + eleData.field_id.toString());
                                    file_params.push('delivery_beneficiary_' + eleData.field_id.toString());
                                }
                                else if (eleData.field_type && eleData.field_type.toLowerCase() == 'activity') {
                                    var exists = false;
                                    for (let j = 0; j < activityIDs.length; j++) {
                                        if (eleData.field_id.toString() == activityIDs[j].toString()) {
                                            exists = true; break;
                                        }
                                    }
                                    if (!exists) {
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                    }
                                    file_params.push('activity_completion_' + eleData.field_id.toString());
                                    file_params.push('activity_other_' + eleData.field_id.toString());
                                    file_params.push('activity_beneficiary_' + eleData.field_id.toString());
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Invalid field_type value it should be milestone/delivery/activity.', null));
                                }
                            }

                            // Uploading documents to GCP

                            var gcpUploadedDocs = [];
                            for (let i = 0; i < file_params.length; i++) {
                                const file_name_to_check = file_params[i];
                                var is_file_exists = false; var file_json_data = null;
                                for (let j = 0; req.files && j < req.files.length; j++) {
                                    if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                        file_json_data = req.files[j]; is_file_exists = true; break;
                                    }
                                }
                                if (is_file_exists) {
                                    try {
                                        const gcp_file_path = 'monitoring/' + rowData.project_id.toString() + file_json_data.filename;
                                        const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                        gcpUploadedDocs.push({
                                            param_name: file_name_to_check,
                                            original_file_name: file_json_data.originalname,
                                            new_file_name: file_json_data.filename,
                                            gcp_file_path: gcp_file_path,
                                            gcp_response_data: JSON.stringify(gcpResp),
                                        });
                                    }
                                    catch (gErr) {
                                        try { _logger.error(gErr.stack); } catch (_) { }
                                        for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                            try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                        }
                                        return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, null));
                                    }
                                }
                            }

                            // Create final data row

                            var final_data_array = [];

                            for (let i = 0; i < _save_form_data.length; i++) {
                                const eleData = _save_form_data[i];
                                var status = eleData.status != null && validator.isNumeric(eleData.status.toString()) ? parseInt(eleData.status) : 0;
                                var completion_doc_delete = eleData.completion_doc_delete && eleData.completion_doc_delete == true ? true : false;
                                var other_doc_delete = eleData.other_doc_delete && eleData.other_doc_delete == true ? true : false;
                                var beneficiary_doc_delete = eleData.beneficiary_doc_delete && eleData.beneficiary_doc_delete == true ? true : false;
                                var completion_file = null; var other_file = null; var beneficiary_file = null;
                                var completion_doc_to_all = eleData.completion_doc_to_all && eleData.completion_doc_to_all == true ? true : false;
                                var other_doc_to_all = eleData.other_doc_to_all && eleData.other_doc_to_all == true ? true : false;
                                var beneficiary_doc_to_all = eleData.beneficiary_doc_to_all && eleData.beneficiary_doc_to_all == true ? true : false;

                                var delete_completion_file_path = '';
                                var delete_other_file_path = '';
                                var delete_beneficiary_file_path = '';

                                if (eleData.field_type.toLowerCase() == 'milestone') {
                                    completion_doc_delete = (completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 ? true : false);
                                    other_doc_delete = (other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 ? true : false);
                                    beneficiary_doc_delete = (beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 ? true : false);
                                    for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                        if (gcpUploadedDocs[j].param_name == 'milestone_completion_' + _milestone_id.toString()) {
                                            completion_file = gcpUploadedDocs[j];
                                        }
                                        if (gcpUploadedDocs[j].param_name == 'milestone_other_' + _milestone_id.toString()) {
                                            other_file = gcpUploadedDocs[j];
                                        }
                                        if (gcpUploadedDocs[j].param_name == 'milestone_beneficiary_' + _milestone_id.toString()) {
                                            beneficiary_file = gcpUploadedDocs[j];
                                        }
                                    }
                                    if (!completion_doc_delete && rowMls[0].completion_new_name && rowMls[0].completion_new_name.length > 0 && completion_file != null) {
                                        completion_doc_delete = true;
                                    }
                                    if (completion_doc_delete) {
                                        delete_completion_file_path = rowMls[0].completion_gcp_path;
                                    }
                                    if (!other_doc_delete && rowMls[0].other_new_name && rowMls[0].other_new_name.length > 0 && other_file != null) {
                                        other_doc_delete = true;
                                    }
                                    if (other_doc_delete) {
                                        delete_other_file_path = rowMls[0].other_gcp_path;
                                    }
                                    if (!beneficiary_doc_delete && rowMls[0].beneficiary_new_name && rowMls[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                        beneficiary_doc_delete = true;
                                    }
                                    if (beneficiary_doc_delete) {
                                        delete_beneficiary_file_path = rowMls[0].beneficiary_gcp_path;
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'delivery') {
                                    const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                                    pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                                    pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, 
                                    pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                                    FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                                    WHERE pd.project_id = ? AND pd.delivery_id = ?`;
                                    const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.project_id, eleData.field_id], type: QueryTypes.SELECT });
                                    if (rowDel && rowDel.length > 0) {
                                        completion_doc_delete = (completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 ? true : false);
                                        other_doc_delete = (other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 ? true : false);
                                        beneficiary_doc_delete = (beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 ? true : false);
                                        for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                            if (gcpUploadedDocs[j].param_name == 'delivery_completion_' + eleData.field_id.toString()) {
                                                completion_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'delivery_other_' + eleData.field_id.toString()) {
                                                other_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'delivery_beneficiary_' + eleData.field_id.toString()) {
                                                beneficiary_file = gcpUploadedDocs[j];
                                            }
                                        }
                                        if (!completion_doc_delete && rowDel[0].completion_new_name && rowDel[0].completion_new_name.length > 0 && completion_file != null) {
                                            completion_doc_delete = true;
                                        }
                                        if (completion_doc_delete) {
                                            delete_completion_file_path = rowDel[0].completion_gcp_path;
                                        }
                                        if (!other_doc_delete && rowDel[0].other_new_name && rowDel[0].other_new_name.length > 0 && other_file != null) {
                                            other_doc_delete = true;
                                        }
                                        if (other_doc_delete) {
                                            delete_other_file_path = rowDel[0].other_gcp_path;
                                        }
                                        if (!beneficiary_doc_delete && rowDel[0].beneficiary_new_name && rowDel[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                            beneficiary_doc_delete = true;
                                        }
                                        if (beneficiary_doc_delete) {
                                            delete_beneficiary_file_path = rowDel[0].beneficiary_gcp_path;
                                        }
                                    } else {
                                        for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                            try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                        }
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid delivery id found in request.', null));
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'activity') {
                                    const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name,
                                    pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                                    pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                                    FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                                    WHERE pa.project_id = ? AND pa.activity_id = ?`;
                                    const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.project_id, eleData.field_id], type: QueryTypes.SELECT });
                                    if (rowAct && rowAct.length > 0) {
                                        completion_doc_delete = (completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 ? true : false);
                                        other_doc_delete = (other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 ? true : false);
                                        beneficiary_doc_delete = (beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 ? true : false);
                                        for (let j = 0; j < gcpUploadedDocs.length; j++) {
                                            if (gcpUploadedDocs[j].param_name == 'activity_completion_' + eleData.field_id.toString()) {
                                                completion_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'activity_other_' + eleData.field_id.toString()) {
                                                other_file = gcpUploadedDocs[j];
                                            }
                                            if (gcpUploadedDocs[j].param_name == 'activity_beneficiary_' + eleData.field_id.toString()) {
                                                beneficiary_file = gcpUploadedDocs[j];
                                            }
                                        }
                                        if (!completion_doc_delete && rowAct[0].completion_new_name && rowAct[0].completion_new_name.length > 0 && completion_file != null) {
                                            completion_doc_delete = true;
                                        }
                                        if (completion_doc_delete) {
                                            delete_completion_file_path = rowAct[0].completion_gcp_path;
                                        }
                                        if (!other_doc_delete && rowAct[0].other_new_name && rowAct[0].other_new_name.length > 0 && other_file != null) {
                                            other_doc_delete = true;
                                        }
                                        if (other_doc_delete) {
                                            delete_other_file_path = rowAct[0].other_gcp_path;
                                        }
                                        if (!beneficiary_doc_delete && rowAct[0].beneficiary_new_name && rowAct[0].beneficiary_new_name.length > 0 && beneficiary_file != null) {
                                            beneficiary_doc_delete = true;
                                        }
                                        if (beneficiary_doc_delete) {
                                            delete_beneficiary_file_path = rowAct[0].beneficiary_gcp_path;
                                        }
                                    } else {
                                        for (let dd = 0; gcpUploadedDocs && dd < gcpUploadedDocs.length; dd++) {
                                            try { await cloudStorageModule.DeleteFile(gcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                        }
                                        return res.status(200).json(success(false, res.statusCode, 'Invalid activity id found in request.', null));
                                    }
                                }
                                final_data_array.push({
                                    field_type: eleData.field_type,
                                    field_id: eleData.field_id,
                                    status: status,
                                    completion_doc_delete: completion_doc_delete,
                                    other_doc_delete: other_doc_delete,
                                    beneficiary_doc_delete: beneficiary_doc_delete,
                                    completion_file: completion_file,
                                    other_file: other_file,
                                    beneficiary_file: beneficiary_file,
                                    completion_doc_to_all: completion_doc_to_all,
                                    other_doc_to_all: other_doc_to_all,
                                    beneficiary_doc_to_all: beneficiary_doc_to_all,
                                    delete_completion_file_path: delete_completion_file_path,
                                    delete_other_file_path: delete_other_file_path,
                                    delete_beneficiary_file_path: delete_beneficiary_file_path,
                                })
                            }

                            /**************************************************************************************************/
                            const currDate = new Date(); var gcpFilesToDelete = [];


                            for (let i = 0; i < final_data_array.length; i++) {
                                const eleData = final_data_array[i];
                                if (eleData.field_type.toLowerCase() == 'milestone') {
                                    var _queryMilUp_1 = `UPDATE project_track_milestone SET milestone_status = ?, modify_by = ?, modify_date = ? `;
                                    var replMilUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                    if (eleData.completion_doc_delete) {
                                        _queryMilUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_delivery = false ';
                                        gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                    }
                                    if (eleData.other_doc_delete) {
                                        _queryMilUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_delivery = false ';
                                        gcpFilesToDelete.push(eleData.delete_other_file_path);
                                    }
                                    if (eleData.beneficiary_doc_delete) {
                                        _queryMilUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_delivery = false ';
                                        gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                    }
                                    _queryMilUp_1 += ' WHERE project_id = ? AND milestone_id = ? '
                                    replMilUp_1.push(rowData.project_id); replMilUp_1.push(_milestone_id);
                                    await db.sequelize.query(_queryMilUp_1, { replacements: replMilUp_1, type: QueryTypes.UPDATE });

                                    if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                        var _queryMilUp_2 = `UPDATE project_track_milestone SET modify_by = ?, modify_date = ? `;
                                        var replMilUp_2 = [req.token_data.account_id, currDate];
                                        if (eleData.completion_file != null) {
                                            _queryMilUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_delivery = ? ';
                                            var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                            replMilUp_2.push(eleData.completion_file.original_file_name); replMilUp_2.push(eleData.completion_file.new_file_name);
                                            replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp);
                                            replMilUp_2.push(eleData.completion_doc_to_all);
                                        }
                                        if (eleData.other_file != null) {
                                            _queryMilUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_delivery = ? ';
                                            var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                            replMilUp_2.push(eleData.other_file.original_file_name); replMilUp_2.push(eleData.other_file.new_file_name);
                                            replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.other_doc_to_all);
                                        }
                                        if (eleData.beneficiary_file != null) {
                                            _queryMilUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_delivery = ? ';
                                            var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                            replMilUp_2.push(eleData.beneficiary_file.original_file_name); replMilUp_2.push(eleData.beneficiary_file.new_file_name);
                                            replMilUp_2.push(movedGcpPath); replMilUp_2.push(movedGcpResp); replMilUp_2.push(eleData.beneficiary_doc_to_all);
                                        }
                                        _queryMilUp_2 += ' WHERE project_id = ? AND milestone_id = ? '
                                        replMilUp_2.push(rowData.project_id); replMilUp_2.push(_milestone_id);
                                        await db.sequelize.query(_queryMilUp_2, { replacements: replMilUp_2, type: QueryTypes.UPDATE });
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'delivery') {
                                    var _queryDelUp_1 = `UPDATE project_track_delivery SET delivery_status = ?, modify_by = ?, modify_date = ? `;
                                    var replDelUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                    if (eleData.completion_doc_delete) {
                                        _queryDelUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null, completion_to_all_activity = false ';
                                        gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                    }
                                    if (eleData.other_doc_delete) {
                                        _queryDelUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null, other_to_all_activity = false ';
                                        gcpFilesToDelete.push(eleData.delete_other_file_path);
                                    }
                                    if (eleData.beneficiary_doc_delete) {
                                        _queryDelUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null, beneficiary_to_all_activity = false ';
                                        gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                    }
                                    _queryDelUp_1 += ' WHERE project_id = ? AND delivery_id = ? '
                                    replDelUp_1.push(rowData.project_id); replDelUp_1.push(eleData.field_id);
                                    await db.sequelize.query(_queryDelUp_1, { replacements: replDelUp_1, type: QueryTypes.UPDATE });
                                    if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                        var _queryDelUp_2 = `UPDATE project_track_delivery SET modify_by = ?, modify_date = ? `;
                                        var replDelUp_2 = [req.token_data.account_id, currDate];
                                        if (eleData.completion_file != null) {
                                            _queryDelUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ?, completion_to_all_activity = ? ';
                                            var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                            replDelUp_2.push(eleData.completion_file.original_file_name); replDelUp_2.push(eleData.completion_file.new_file_name);
                                            replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.completion_doc_to_all);
                                        }
                                        if (eleData.other_file != null) {
                                            _queryDelUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ?, other_to_all_activity = ? ';
                                            var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                            replDelUp_2.push(eleData.other_file.original_file_name); replDelUp_2.push(eleData.other_file.new_file_name);
                                            replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.other_doc_to_all);
                                        }
                                        if (eleData.beneficiary_file != null) {
                                            _queryDelUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ?, beneficiary_to_all_activity = ? ';
                                            var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                            replDelUp_2.push(eleData.beneficiary_file.original_file_name); replDelUp_2.push(eleData.beneficiary_file.new_file_name);
                                            replDelUp_2.push(movedGcpPath); replDelUp_2.push(movedGcpResp); replDelUp_2.push(eleData.beneficiary_doc_to_all);
                                        }
                                        _queryDelUp_2 += ' WHERE project_id = ? AND delivery_id = ? '
                                        replDelUp_2.push(rowData.project_id); replDelUp_2.push(eleData.field_id);
                                        await db.sequelize.query(_queryDelUp_2, { replacements: replDelUp_2, type: QueryTypes.UPDATE });
                                    }
                                }
                                if (eleData.field_type.toLowerCase() == 'activity') {
                                    var _queryActUp_1 = `UPDATE project_track_activity SET activity_status = ?, modify_by = ?, modify_date = ? `;
                                    var replActUp_1 = [eleData.status, req.token_data.account_id, currDate];
                                    if (eleData.completion_doc_delete) {
                                        _queryActUp_1 += ' , completion_file_name = null, completion_new_name = null, completion_gcp_path = null, completion_gcp_resp = null ';
                                        gcpFilesToDelete.push(eleData.delete_completion_file_path);
                                    }
                                    if (eleData.other_doc_delete) {
                                        _queryActUp_1 += ' , other_file_name = null, other_new_name = null, other_gcp_path = null, other_gcp_resp = null ';
                                        gcpFilesToDelete.push(eleData.delete_other_file_path);
                                    }
                                    if (eleData.beneficiary_doc_delete) {
                                        _queryActUp_1 += ' , beneficiary_file_name = null, beneficiary_new_name = null, beneficiary_gcp_path = null, beneficiary_gcp_resp = null ';
                                        gcpFilesToDelete.push(eleData.delete_beneficiary_file_path);
                                    }
                                    _queryActUp_1 += ' WHERE project_id = ? AND activity_id = ? '
                                    replActUp_1.push(rowData.project_id); replActUp_1.push(eleData.field_id);
                                    await db.sequelize.query(_queryActUp_1, { replacements: replActUp_1, type: QueryTypes.UPDATE });
                                    if (eleData.completion_file != null || eleData.other_file != null || eleData.beneficiary_file != null) {
                                        var _queryActUp_2 = `UPDATE project_track_activity SET modify_by = ?, modify_date = ? `;
                                        var replActUp_2 = [req.token_data.account_id, currDate];
                                        if (eleData.completion_file != null) {
                                            _queryActUp_2 += ' , completion_file_name = ?, completion_new_name = ?, completion_gcp_path = ?, completion_gcp_resp = ? ';
                                            var movedGcpPath = eleData.completion_file.gcp_file_path; var movedGcpResp = eleData.completion_file.gcp_response_data;
                                            replActUp_2.push(eleData.completion_file.original_file_name); replActUp_2.push(eleData.completion_file.new_file_name);
                                            replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                        }
                                        if (eleData.other_file != null) {
                                            _queryActUp_2 += ' , other_file_name = ?, other_new_name = ?, other_gcp_path = ?, other_gcp_resp = ? ';
                                            var movedGcpPath = eleData.other_file.gcp_file_path; var movedGcpResp = eleData.other_file.gcp_response_data;
                                            replActUp_2.push(eleData.other_file.original_file_name); replActUp_2.push(eleData.other_file.new_file_name);
                                            replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                        }
                                        if (eleData.beneficiary_file != null) {
                                            _queryActUp_2 += ' , beneficiary_file_name = ?, beneficiary_new_name = ?, beneficiary_gcp_path = ?, beneficiary_gcp_resp = ? ';
                                            var movedGcpPath = eleData.beneficiary_file.gcp_file_path; var movedGcpResp = eleData.beneficiary_file.gcp_response_data;
                                            replActUp_2.push(eleData.beneficiary_file.original_file_name); replActUp_2.push(eleData.beneficiary_file.new_file_name);
                                            replActUp_2.push(movedGcpPath); replActUp_2.push(movedGcpResp);
                                        }
                                        _queryActUp_2 += ' WHERE project_id = ? AND activity_id = ? '
                                        replActUp_2.push(rowData.project_id); replActUp_2.push(eleData.field_id);
                                        await db.sequelize.query(_queryActUp_2, { replacements: replActUp_2, type: QueryTypes.UPDATE });
                                    }
                                }
                            }

                            for (let dd = 0; gcpFilesToDelete && dd < gcpFilesToDelete.length; dd++) {
                                if (gcpFilesToDelete[dd] && gcpFilesToDelete[dd].length > 0) {
                                    try { await cloudStorageModule.DeleteFile(gcpFilesToDelete[dd]); } catch (_) { }
                                }
                            }

                            //return res.status(200).json(success(true, res.statusCode, 'Saved successfully.', null));

                        }

                        // Check criteria to send for approval

                        const _queryChkMil = `SELECT milestone_status, completion_file_name, completion_new_name, completion_to_all_delivery
                        FROM project_track_milestone WHERE project_id = ? AND milestone_id = ?`;
                        const rowChkMil = await db.sequelize.query(_queryChkMil, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                        if (rowChkMil && rowChkMil.length > 0) {
                            const _milestoneStatus = (rowChkMil[0].milestone_status != null && validator.isNumeric(rowChkMil[0].milestone_status.toString()) ? parseInt(rowChkMil[0].milestone_status) : 0);
                            if (_milestoneStatus <= 0) {
                                return res.status(200).json(success(false, res.statusCode, 'Please mark milestone status as completed.', null));
                            }
                            var deliveryIdData = []; var activityIdData = [];
                            const _queryChkDel = `SELECT t.delivery_id, t.delivery_status, t.completion_file_name, t.completion_new_name, t.completion_to_all_activity
                            FROM project_track_delivery t WHERE t.project_id = ? AND t.milestone_id = ?`;
                            const rowChkDel = await db.sequelize.query(_queryChkDel, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                            for (let i = 0; rowChkDel && i < rowChkDel.length; i++) {
                                const _deliveryStatus = (rowChkDel[i].delivery_status != null && validator.isNumeric(rowChkDel[i].delivery_status.toString()) ? parseInt(rowChkDel[i].delivery_status) : 0);
                                if (_deliveryStatus <= 0) {
                                    return res.status(200).json(success(false, res.statusCode, 'Please mark delivery status as completed.', null));
                                }
                                deliveryIdData.push({
                                    delivery_id: rowChkDel[i].delivery_id,
                                    completion_file_name: rowChkDel[i].completion_file_name,
                                    completion_new_name: rowChkDel[i].completion_new_name,
                                    completion_to_all_activity: rowChkDel[i].completion_to_all_activity,
                                });
                            }
                            if (deliveryIdData.length > 0) {
                                const tmpIds = deliveryIdData.map((itm) => { return itm.delivery_id });
                                const _queryChkAct = `SELECT t.activity_id, a.activity_name, t.delivery_id, t.activity_status, t.completion_file_name, t.completion_new_name
                                FROM project_track_activity t LEFT OUTER JOIN project_activity a ON t.activity_id = a.activity_id WHERE t.project_id = ? AND t.delivery_id IN (?)`;
                                const rowChkAct = await db.sequelize.query(_queryChkAct, { replacements: [rowData.project_id, tmpIds], type: QueryTypes.SELECT });
                                for (let j = 0; rowChkAct && j < rowChkAct.length; j++) {
                                    const _activityStatus = (rowChkAct[j].activity_status != null && validator.isNumeric(rowChkAct[j].activity_status.toString()) ? parseInt(rowChkAct[j].activity_status) : 0);
                                    if (_activityStatus <= 0) {
                                        return res.status(200).json(success(false, res.statusCode, 'Please mark activity status as completed.', null));
                                    }
                                    activityIdData.push({
                                        activity_id: rowChkAct[j].activity_id,
                                        delivery_id: rowChkAct[j].delivery_id,
                                        activity_name: rowChkAct[j].activity_name,
                                        completion_file_name: rowChkAct[j].completion_file_name,
                                        completion_new_name: rowChkAct[j].completion_new_name,
                                    })
                                }
                            }
                            const milHasFile = (rowChkMil[0].completion_new_name && rowChkMil[0].completion_new_name.length > 0) ? true : false;
                            const milToAllDel = (rowChkMil[0].completion_to_all_delivery && rowChkMil[0].completion_to_all_delivery) ? true : false;

                            if (milHasFile && milToAllDel) {
                                // pass to approval
                            } else {
                                for (let k = 0; deliveryIdData && k < deliveryIdData.length; k++) {
                                    const eleDel = deliveryIdData[k];
                                    const delHasFile = (eleDel.completion_new_name && eleDel.completion_new_name.length > 0) ? true : false;
                                    const delToAllDel = (eleDel.completion_to_all_activity && eleDel.completion_to_all_activity) ? true : false;
                                    if (delHasFile && delToAllDel) {
                                        // pass to approval
                                    } else {
                                        for (let l = 0; activityIdData && l < activityIdData.length; l++) {
                                            const eleAct = activityIdData[l];
                                            if (eleAct.delivery_id.toString() == eleDel.delivery_id.toString()) {
                                                const actHasFile = (eleAct.completion_new_name && eleAct.completion_new_name.length > 0) ? true : false;
                                                if (actHasFile) {
                                                    // pass to approval
                                                } else {
                                                    return res.status(200).json(success(false, res.statusCode, 'Please upload completion evidence document for activity.<br>"' + eleAct.activity_name + '".', null));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'Milestone details not found, Please try again.', null));
                        }

                        // Send for approval

                        const _queryAddReq = `INSERT INTO project_track_status(project_id, milestone_id, curr_status, status_by, status_date, status_remark, is_by_owner)
                        VALUES(?, ?, ?, ?, ?, ?, ?)  RETURNING "log_id"`;
                        const _repAddReq = [rowData.project_id, _milestone_id, 1, req.token_data.account_id, new Date(), 'Approval request sent.', true];
                        const [rowAddReq] = await db.sequelize.query(_queryAddReq, { replacements: _repAddReq, returning: true, type: QueryTypes.INSERT });
                        const log_id = (rowAddReq && rowAddReq.length > 0 && rowAddReq[0] ? rowAddReq[0].log_id : 0);
                        if (log_id > 0) {
                            return res.status(200).json(success(true, res.statusCode, 'Sent for approval successfully.', null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                        }
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const monitoring_crowd_fund_milestone_doc_get_url = async (req, res, next) => {
    const { project_id, milestone_id, doc_type, field_type, field_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PM_PROJECT_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_project_id.length > 0 && utils.isUUID(_project_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() == rowSelProj[0].reg_id.toString()) {

                    const doc_type_allowed = ['completion', 'other', 'beneficiary'];
                    const field_type_allowed = ['milestone', 'delivery', 'activity'];

                    const _doc_type = (doc_type && doc_type.length > 0) ? doc_type.trim() : "";
                    if (!utils.check_in_array(_doc_type.toLowerCase(), doc_type_allowed)) {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid value for parameter : "doc_type".<br>Values should be - ' + doc_type_allowed.join(', ') + '.', null));
                    }
                    const _field_type = (field_type && field_type.length > 0) ? field_type.trim() : "";
                    if (!utils.check_in_array(_field_type.toLowerCase(), field_type_allowed)) {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid value for parameter : "field_type".<br>Values should be - ' + field_type_allowed.join(', ') + '.', null));
                    }
                    const _field_id = field_id != null && validator.isNumeric(field_id.toString()) ? BigInt(field_id) : 0;
                    const resp = await entityDataModule.monitoring_crowd_fund_milestone_doc_get_url(rowSelProj[0].project_id, _doc_type.toLowerCase(), _field_type.toLowerCase(), _field_id);
                    return res.status(200).json(success(true, res.statusCode, "", resp));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};


const project_discovery_thematic_areas = async (req, res, next) => {
    const { } = req.body;
    try {
        const thematic_area = await commonModule.project_thematic_area_list();
        return res.status(200).json(success(true, res.statusCode, "Success", thematic_area));
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_search = async (req, res, next) => {
    const { page_no, search_text, thematic_ids, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _thematic_ids = [];
            if (thematic_ids != null) {
                var _tmp_thematic_ids = [];
                if (thematic_ids.constructor == String) {
                    try { _tmp_thematic_ids = JSON.parse(thematic_ids); } catch (_) { }
                } else {
                    if (thematic_ids.constructor == Array) { _tmp_thematic_ids = thematic_ids; }
                }
                for (let i = 0; _tmp_thematic_ids && i < _tmp_thematic_ids.length; i++) {
                    const _tmpID = _tmp_thematic_ids[i] != null && validator.isNumeric(_tmp_thematic_ids[i].toString()) ? BigInt(_tmp_thematic_ids[i]) : 0;
                    if (_tmpID > 0) {
                        _thematic_ids.push(_tmpID);
                    }
                }
            }
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_thematic_ids && _thematic_ids.length > 0) { _sql_condition += ' AND pc.thematic_id IN (:thematic_ids) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            if (row[0].entity_id.toString() == '4') {
                _sql_condition += ' AND pc.purpose_id = 2 AND pc.funding_option_id = 2 ';
            }
            else if (row[0].entity_id.toString() == '5') {
                _sql_condition += ' AND pc.purpose_id = 1 AND (pc.visible_to_all_ia = true OR :reg_id IN ( SELECT UNNEST(pc.visible_ia_list) )) ';
            }
            else if (row[0].entity_id.toString() != '5') {
                _sql_condition += ' AND pc.purpose_id = 2 AND pc.funding_option_id = 1 ';
            }
            _sql_condition += ' AND (CASE WHEN pc.purpose_id = 2 THEN COALESCE(pf.fund_raised, 0) ELSE COALESCE(pc.project_cost, 0) + 1 END < COALESCE(pc.project_cost, 0)) ';

            const _query0 = `SELECT count(1) AS total_record FROM project_created pc LEFT JOIN LATERAL (
                SELECT COALESCE(SUM(COALESCE(pf.total_amount, 0))) AS fund_raised 
                FROM project_payment_fund pf WHERE pf.project_id = pc.project_id AND pf.is_success = true
            ) pf ON TRUE
            WHERE pc.reg_id <> :reg_id AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true
            AND pc.is_accepted_by_ia = false ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', thematic_ids: _thematic_ids,
                    country_id: _country_id, state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
            pc.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.floated_date,
            c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code, um.company_name
            FROM project_created pc INNER JOIN user_master um ON pc.reg_id = um.reg_id
            LEFT OUTER JOIN countries c ON pc.country_id = c.country_id LEFT OUTER JOIN states s ON pc.state_id = s.state_id
            LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id
            LEFT JOIN LATERAL (
                SELECT COALESCE(SUM(COALESCE(pf.total_amount, 0))) AS fund_raised 
                FROM project_payment_fund pf WHERE pf.project_id = pc.project_id AND pf.is_success = true
            ) pf ON TRUE            
            WHERE pc.reg_id <> :reg_id AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true 
            AND pc.is_accepted_by_ia = false ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', thematic_ids: _thematic_ids, country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    company_name: row1[i].company_name,
                    project_cost: row1[i].project_cost,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    start_date: row1[i].start_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].end_date)) : "",
                    floated_date: row1[i].floated_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].floated_date)) : "",
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_detail = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
                pc.funding_option_id, pc.proj_objective, pc.proj_summary, pc.beneficiary_detail, pc.mapped_under, pc.sdg_goals, pc.esg_objective,
                COALESCE((SELECT t.thematic_name FROM thematic_area t WHERE t.thematic_id = COALESCE(pc.thematic_id, 0) LIMIT 1), '') AS thematic_area,
                COALESCE((SELECT t.country_name FROM countries t WHERE t.country_id = COALESCE(pc.country_id, 0) LIMIT 1), '') AS country_name,
                COALESCE((SELECT t.state_name FROM states t WHERE t.state_id = COALESCE(pc.state_id, 0) LIMIT 1), '') AS state_name,
                COALESCE((SELECT t.district_name FROM districts t WHERE t.district_id = COALESCE(pc.district_id, 0) LIMIT 1), '') AS district_name,
                COALESCE((SELECT t.block_name FROM blocks t WHERE t.block_id = COALESCE(pc.block_id, 0) LIMIT 1), '') AS block_name, pc.pin_code,
                pc.incharge_full_name, pc.incharge_designation, pc.incharge_email_id, pc.incharge_mobile_ccc, pc.incharge_mobile_no,  
                um.first_name AS c_first_name, um.middle_name AS c_middle_name, um.last_name AS c_last_name, um.email_id AS c_email_id, 
                um.mobile_ccc AS c_mobile_ccc, um.mobile_no AS c_mobile_no, um.company_name AS c_company_name
                FROM project_created pc INNER JOIN user_master um ON pc.reg_id = um.reg_id 
                WHERE pc.unique_id = ? AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true
                AND pc.is_accepted_by_ia = false`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() != rowSelProj[0].reg_id.toString()) {
                    const rowData = rowSelProj[0];
                    var purpose = '';
                    for (let p = 0; p < constants.project_purpose.length; p++) {
                        if (constants.project_purpose[p].id.toString() == rowData.purpose_id.toString()) {
                            purpose = constants.project_purpose[p].name; break;
                        }
                    }
                    var funding_option = '';
                    for (let p = 0; p < constants.project_funding_option.length; p++) {
                        if (constants.project_funding_option[p].id.toString() == rowData.funding_option_id.toString()) {
                            funding_option = constants.project_funding_option[p].name; break;
                        }
                    }
                    var mapped_under = '';
                    for (let p = 0; p < constants.project_mapped_under.length; p++) {
                        if (constants.project_mapped_under[p].id.toString().toLowerCase() == rowData.mapped_under.toString().toLowerCase()) {
                            mapped_under = constants.project_mapped_under[p].name; break;
                        }
                    }
                    var sdg_goals = [];
                    if (rowData.sdg_goals && rowData.sdg_goals.length > 0) {
                        sdg_goals = await commonModule.project_sdg_goals_get_by_ids(rowData.sdg_goals);
                    }
                    var my_scope_of_work = await entityDataModule.project_scope_of_work_view_data(rowData.project_id);
                    var questionnaire = await entityDataModule.project_questionnaire_data(rowData.project_id);
                    for (let i = 0; questionnaire && i < questionnaire.length; i++) {
                        try { questionnaire[i].max_score = parseFloat(questionnaire[i].max_score).toString(); } catch (_) { }
                        try { questionnaire[i].weightage = parseFloat(questionnaire[i].weightage).toString(); } catch (_) { }
                    }
                    var rfp_document = await entityDataModule.project_document_view_uploaded(rowData.project_id);

                    var apply_button_visible = false; var has_applied = false; var donate_button_visible = false;
                    if (row[0].entity_id.toString() == '4' && rowData.purpose_id.toString() == '2'
                        && rowData.funding_option_id.toString() == '2') {
                        apply_button_visible = false; donate_button_visible = true;
                    }
                    else if (row[0].entity_id.toString() == '5' && rowData.purpose_id.toString() == '1') {
                        apply_button_visible = true; donate_button_visible = false;
                        const _querySelApply = `SELECT apply_id FROM project_appl_mast WHERE project_id = ? AND reg_id = ?`;
                        const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [rowData.project_id, row[0].reg_id], type: QueryTypes.SELECT });
                        has_applied = (rowSelApply && rowSelApply.length > 0) ? true : false;
                    }
                    else if (row[0].entity_id.toString() != '5' && rowData.purpose_id.toString() == '2') {
                        apply_button_visible = false; donate_button_visible = true;
                    }
                    const dynamic_values = await commonModule.project_dynamic_field_data(rowData.project_id);
                    const is_awarded_to_ia = await entityDataModule.is_project_awarded_to_ia(rowData.project_id);

                    const results = {
                        owner_detail: {
                            first_name: rowData.c_first_name,
                            middle_name: rowData.c_middle_name,
                            last_name: rowData.c_last_name,
                            email_id: rowData.c_email_id,
                            mobile_ccc: rowData.c_mobile_ccc,
                            mobile_no: rowData.c_mobile_no,
                            company_name: rowData.c_company_name,
                        },
                        project_detail: {
                            project_no: (rowData.project_no ? rowData.project_no : ""),
                            project_name: (rowData.project_name ? rowData.project_name : ""),
                            project_cost: (rowData.project_cost ? (parseFloat(rowData.project_cost)).toString() : ""),
                            start_date: (rowData.start_date ? dateFormat(constants.textbox_date_api_format, rowData.start_date) : ""),
                            end_date: (rowData.end_date ? dateFormat(constants.textbox_date_api_format, rowData.end_date) : ""),
                            purpose: purpose,
                            funding_option: funding_option,
                            thematic_area: (rowData.thematic_area ? rowData.thematic_area : ""),
                            proj_objective: (rowData.proj_objective ? rowData.proj_objective : ""),
                            proj_summary: (rowData.proj_summary ? rowData.proj_summary : ""),
                            beneficiary_detail: (rowData.beneficiary_detail ? rowData.beneficiary_detail : ""),
                            mapped_under: mapped_under,
                            sdg_goals: sdg_goals,
                            esg_objective: (rowData.esg_objective ? rowData.esg_objective : ""),
                            country_name: (rowData.country_name ? rowData.country_name : ""),
                            state_name: (rowData.state_name ? rowData.state_name : ""),
                            district_name: (rowData.district_name ? rowData.district_name : ""),
                            block_name: (rowData.block_name ? rowData.block_name : ""),
                            pin_code: (rowData.pin_code ? rowData.pin_code : ""),
                        },
                        project_incharge: {
                            full_name: rowData.incharge_full_name,
                            designation: rowData.incharge_designation,
                            email_id: rowData.incharge_email_id,
                            mobile_ccc: rowData.incharge_mobile_ccc,
                            mobile_no: rowData.incharge_mobile_no,
                        },
                        dynamic_values: dynamic_values,
                        scope_of_work: my_scope_of_work,
                        questionnaire: questionnaire,
                        rfp_document: rfp_document,
                        apply_button_visible: apply_button_visible,
                        has_applied: has_applied,
                        is_awarded_to_ia: is_awarded_to_ia,
                        donate_button_visible: donate_button_visible,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_rfp_document_get_url = async (req, res, next) => {
    const { id, file_id } = req.body;
    try {
        var _id = (id != null && id.length > 0 ? id : "");
        const _file_id = file_id != null && validator.isNumeric(file_id.toString()) ? BigInt(file_id) : 0;
        if (utils.isUUID(_id)) {
            const resp = await entityDataModule.project_document_signed_url(_id, _file_id);
            return res.status(200).json(success(true, res.statusCode, "", resp));
        } else {
            return res.status(200).json(success(false, res.statusCode, "Invalid document request.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_apply_check = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.purpose_id, pc.funding_option_id, pc.visible_to_all_ia, pc.visible_ia_list
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() != rowSelProj[0].reg_id.toString()) {
                    if (row[0].entity_id.toString() == '5' && rowSelProj[0].purpose_id.toString() == '1') {
                        var is_allowed = false;
                        if (rowSelProj[0].visible_to_all_ia && rowSelProj[0].visible_to_all_ia == true) {
                            is_allowed = true;
                        } else {
                            if (rowSelProj[0].visible_ia_list && rowSelProj[0].visible_ia_list.length > 0) {
                                for (let i = 0; i < rowSelProj[0].visible_ia_list.length; i++) {
                                    if (rowSelProj[0].visible_ia_list[i].toString() == row[0].reg_id.toString()) {
                                        is_allowed = true; break;
                                    }
                                }
                            }
                        }
                        if (is_allowed) {
                            const _querySelApply = `SELECT apply_id FROM project_appl_mast WHERE project_id = ? AND reg_id = ?`;
                            const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [rowSelProj[0].project_id, row[0].reg_id], type: QueryTypes.SELECT });
                            if (rowSelApply && rowSelApply.length > 0) {
                                return res.status(200).json(success(false, res.statusCode, 'You have already applied for this project.', null));
                            }
                            const is_awarded = await entityDataModule.is_project_awarded_to_ia(rowSelProj[0].project_id);
                            if (is_awarded) {
                                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Project is already awarded to other IA.', null));
                            }
                            const is_accepted = await entityDataModule.is_project_accepted_by_ia(rowSelProj[0].project_id);
                            if (is_accepted) {
                                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'The applications for this project are closed.', null));
                            }

                            var questionnaire = await entityDataModule.project_questionnaire_data(rowSelProj[0].project_id);
                            for (let i = 0; questionnaire && i < questionnaire.length; i++) {
                                try { questionnaire[i].max_score = parseFloat(questionnaire[i].max_score).toString(); } catch (_) { }
                                try { questionnaire[i].weightage = parseFloat(questionnaire[i].weightage).toString(); } catch (_) { }
                            }
                            const results = {
                                questionnaire: questionnaire,
                            };
                            return res.status(200).json(success(true, res.statusCode, "Success", results));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'You are not allowed apply for this project.', null));
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'You are not allowed apply for this project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'You are trying to apply for invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'You are trying to apply for invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_apply_submit = async (req, res, next) => {
    const { project_id, apply_id, question_answer, docs_to_delete } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.purpose_id, pc.funding_option_id, pc.visible_to_all_ia, pc.visible_ia_list
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() != rowSelProj[0].reg_id.toString()) {
                    if (row[0].entity_id.toString() == '5' && rowSelProj[0].purpose_id.toString() == '1') {
                        var is_allowed = false;
                        if (rowSelProj[0].visible_to_all_ia && rowSelProj[0].visible_to_all_ia == true) {
                            is_allowed = true;
                        } else {
                            if (rowSelProj[0].visible_ia_list && rowSelProj[0].visible_ia_list.length > 0) {
                                for (let i = 0; i < rowSelProj[0].visible_ia_list.length; i++) {
                                    if (rowSelProj[0].visible_ia_list[i].toString() == row[0].reg_id.toString()) {
                                        is_allowed = true; break;
                                    }
                                }
                            }
                        }
                        if (is_allowed) {
                            const _apply_id = (apply_id && apply_id.length > 0) ? apply_id.trim() : ""; var oldApplyData = null;
                            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                                const _querySelAppData = `SELECT apply_id, reg_id FROM project_appl_mast WHERE unique_id = ? AND project_id = ?`;
                                const rowSelAppData = await db.sequelize.query(_querySelAppData, { replacements: [_apply_id, rowSelProj[0].project_id], type: QueryTypes.SELECT });
                                if (rowSelAppData && rowSelAppData.length > 0 && rowSelAppData[0].reg_id.toString() == row[0].reg_id.toString()) {
                                    oldApplyData = rowSelAppData[0];
                                    const is_accepted = await entityDataModule.is_project_accepted_by_ia(rowSelProj[0].project_id);
                                    if (is_accepted) {
                                        return res.status(200).json(success(false, res.statusCode, 'Cannot update, applications for this project are closed.', null));
                                    }
                                }
                                else {
                                    return res.status(200).json(success(false, res.statusCode, 'You are trying to update invalid application.', null));
                                }
                            } else {
                                const _querySelApply = `SELECT apply_id FROM project_appl_mast WHERE project_id = ? AND reg_id = ?`;
                                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [rowSelProj[0].project_id, row[0].reg_id], type: QueryTypes.SELECT });
                                if (rowSelApply && rowSelApply.length > 0) {
                                    return res.status(200).json(success(false, res.statusCode, 'You have already applied for this project.', null));
                                }
                                const is_awarded = await entityDataModule.is_project_awarded_to_ia(rowSelProj[0].project_id);
                                if (is_awarded) {
                                    return res.status(200).json(success(false, res.statusCode, 'Project is already awarded to other IA.', null));
                                }
                                const is_accepted = await entityDataModule.is_project_accepted_by_ia(rowSelProj[0].project_id);
                                if (is_accepted) {
                                    return res.status(200).json(success(false, res.statusCode, 'The applications for this project are closed.', null));
                                }
                            }
                            /**************************************************************************************************/
                            var db_questionnaire = await entityDataModule.project_questionnaire_data(rowSelProj[0].project_id);

                            var _question_answer = [];
                            if (question_answer != null) {
                                if (question_answer.constructor == String) {
                                    try { _question_answer = JSON.parse(question_answer); } catch (_) { }
                                } else {
                                    if (question_answer.constructor == Array) { _question_answer = question_answer; }
                                }
                            }
                            var _total_score = 0;
                            for (let i = 0; db_questionnaire && i < db_questionnaire.length; i++) {
                                const eleQue = db_questionnaire[i]; var eleTmp = null;
                                for (let j = 0; j < _question_answer.length; j++) {
                                    if (eleQue.que_id.toString() == _question_answer[j].que_id.toString()) {
                                        eleTmp = _question_answer[j]; break;
                                    }
                                }
                                if (eleTmp != null) {
                                    if (eleQue.type_id.toString() == '1') {
                                        var selectedCount = 0;
                                        for (let k = 0; eleQue.options && k < eleQue.options.length; k++) {
                                            for (let l = 0; eleTmp.options && Array.isArray(eleTmp.options) && l < eleTmp.options.length; l++) {
                                                if (eleTmp.options[l].sr_no.toString() == eleQue.options[k].sr_no.toString()) {
                                                    eleQue.options[k].checked = eleTmp.options[l].checked; break;
                                                }
                                            }
                                            if (eleQue.options[k].checked) {
                                                selectedCount++;
                                            }
                                        }
                                        if (selectedCount <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, 'Select your answer for question.<br>' + eleQue.que_text, null));
                                        }
                                        if (selectedCount > 1) {
                                            return res.status(200).json(success(false, res.statusCode, 'You need to select only one option for question.<br>' + eleQue.que_text, null));
                                        }
                                    }
                                    if (eleQue.type_id.toString() == '2') {
                                        var selectedCount = 0;
                                        for (let k = 0; eleQue.options && k < eleQue.options.length; k++) {
                                            for (let l = 0; eleTmp.options && Array.isArray(eleTmp.options) && l < eleTmp.options.length; l++) {
                                                if (eleTmp.options[l].sr_no.toString() == eleQue.options[k].sr_no.toString()) {
                                                    eleQue.options[k].checked = eleTmp.options[l].checked; break;
                                                }
                                            }
                                            if (eleQue.options[k].checked) {
                                                selectedCount++;
                                            }
                                        }
                                        if (selectedCount <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, 'Select your answer for question.<br>' + eleQue.que_text, null));
                                        }
                                    }
                                    if (eleQue.type_id.toString() == '3' || eleQue.type_id.toString() == '4') {
                                        var _ans_text = (eleTmp.ans_text != null && eleTmp.ans_text.length > 0) ? eleTmp.ans_text.trim() : "";
                                        if (_ans_text.length <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, 'Enter your answer for question.<br>' + eleQue.que_text, null));
                                        }
                                        eleQue.ans_text = _ans_text;
                                    }
                                    if (eleQue.type_id.toString() == '5') {
                                        var _scale_selected = eleTmp.scale_selected != null && validator.isNumeric(eleTmp.scale_selected.toString()) ? parseInt(eleTmp.scale_selected) : 0;
                                        if (_scale_selected <= 0) {
                                            return res.status(200).json(success(false, res.statusCode, 'Select your answer for question.<br>' + eleQue.que_text, null));
                                        }
                                        if (_scale_selected < eleQue.scale_start_point) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid scale value for question.<br>' + eleQue.que_text, null));
                                        }
                                        if (_scale_selected > eleQue.scale_end_point) {
                                            return res.status(200).json(success(false, res.statusCode, 'Invalid scale value for question.<br>' + eleQue.que_text, null));
                                        }
                                        eleQue.scale_selected = _scale_selected;
                                    }
                                    const _eligible_score = eleTmp.eligible_score != null && validator.isNumeric(eleTmp.eligible_score.toString()) ? parseFloat(parseFloat(eleTmp.eligible_score).toFixed(2)) : 0;
                                    if (_eligible_score <= 0) {
                                        return res.status(200).json(success(false, res.statusCode, 'Enter eligible score for question.<br>' + eleQue.que_text, null));
                                    }
                                    const _max_score_check = eleQue.max_score != null && validator.isNumeric(eleQue.max_score.toString()) ? parseFloat(eleQue.max_score) : 0;
                                    if (_eligible_score > _max_score_check) {
                                        return res.status(200).json(success(false, res.statusCode, 'Eligible score should not be more than max score check question.<br>' + eleQue.que_text, null));
                                    }
                                    eleQue.eligible_score = _eligible_score; _total_score = _total_score + _eligible_score;
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Some question are missing, Please try again.', null));
                                }
                            }
                            /**************************************************************************************************/
                            // Uploading documents to GCP
                            var proposalDocsUp = [];
                            for (let j = 0; req.files && j < req.files.length; j++) {
                                var file_json_data = req.files[j];;
                                try {
                                    const gcp_file_path = 'temp/' + file_json_data.filename;
                                    const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                    proposalDocsUp.push({
                                        original_file_name: file_json_data.originalname,
                                        new_file_name: file_json_data.filename,
                                        gcp_file_path: gcp_file_path,
                                        gcp_response_data: JSON.stringify(gcpResp),
                                    });
                                }
                                catch (gErr) {
                                    try { _logger.error(gErr.stack); } catch (_) { }
                                    for (let dd = 0; proposalDocsUp && dd < proposalDocsUp.length; dd++) {
                                        try { await cloudStorageModule.DeleteFile(proposalDocsUp[dd].gcp_file_path); } catch (_) { }
                                    }
                                    return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, null));
                                }
                            }
                            if (oldApplyData != null) {

                            } else {
                                if (proposalDocsUp.length <= 0) {
                                    return res.status(200).json(success(false, res.statusCode, 'Please upload proposal documents.', null));
                                }
                            }
                            /**************************************************************************************************/
                            var retrived_id = 0;
                            if (oldApplyData != null) {
                                const _queryUpProj = `UPDATE project_appl_mast SET modify_by = ?, modify_date = ?, total_score = ? WHERE apply_id = ?`;
                                const _replUpProj = [req.token_data.account_id, new Date(), _total_score, oldApplyData.apply_id];
                                const [, updated_count] = await db.sequelize.query(_queryUpProj, { replacements: _replUpProj, type: QueryTypes.UPDATE });
                                if (updated_count > 0) {
                                    retrived_id = BigInt(oldApplyData.apply_id.toString());
                                }
                            } else {
                                const _queryInProj = `INSERT INTO project_appl_mast(project_id, reg_id, account_id, user_id, apply_date, total_score)
                                VALUES(?, ?, ?, ?, ?, ?) RETURNING "apply_id", "unique_id"`;
                                const _replInProj = [rowSelProj[0].project_id, row[0].reg_id, req.token_data.account_id, req.token_data.user_id, new Date(), _total_score];
                                const [rowInProj] = await db.sequelize.query(_queryInProj, { replacements: _replInProj, type: QueryTypes.INSERT, returning: true });
                                const added_id = (rowInProj && rowInProj.length > 0 && rowInProj[0] ? rowInProj[0].apply_id : 0);
                                try { retrived_id = BigInt(added_id.toString()); } catch (_) { }
                            }
                            if (retrived_id > 0) {
                                for (let h = 0; db_questionnaire && h < db_questionnaire.length; h++) {
                                    const eleQue = db_questionnaire[h];
                                    const _queryDocSel = `SELECT que_id FROM project_appl_ques WHERE apply_id = ? AND que_id = ?`;
                                    const rowDocSel = await db.sequelize.query(_queryDocSel, { replacements: [retrived_id, eleQue.que_id], type: QueryTypes.SELECT });
                                    if (rowDocSel && rowDocSel.length > 0) {
                                        const _queryUpMil = `UPDATE project_milestone SET ans_text = ?, que_options = ?, scale_selected = ?, eligible_score = ? WHERE apply_id = ? AND que_id = ?`;
                                        const _replUpMil = [eleQue.ans_text, JSON.stringify(eleQue.options), eleQue.scale_selected, eleQue.eligible_score, retrived_id, eleQue.que_id];
                                        await db.sequelize.query(_queryUpMil, { replacements: _replUpMil, type: QueryTypes.UPDATE });
                                    } else {
                                        const _queryInMil = `INSERT INTO project_appl_ques(apply_id, que_id, type_id, que_text, ans_text, que_options, scale_start_point,
                                            scale_end_point, scale_start_text, scale_end_text, scale_selected, scoring_parameters, 
                                            max_score, weightage, sort_order, eligible_score) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
                                        const _replInMil = [retrived_id, eleQue.que_id, eleQue.type_id, eleQue.que_text, eleQue.ans_text, JSON.stringify(eleQue.options), eleQue.scale_start_point,
                                            eleQue.scale_end_point, eleQue.scale_start_text, eleQue.scale_end_text, eleQue.scale_selected, eleQue.scoring_parameters, eleQue.max_score,
                                            eleQue.weightage, eleQue.sort_order, eleQue.eligible_score];
                                        await db.sequelize.query(_queryInMil, { replacements: _replInMil, type: QueryTypes.INSERT });
                                    }
                                }
                                for (let h = 0; proposalDocsUp && h < proposalDocsUp.length; h++) {
                                    const eleDoc = proposalDocsUp[h];
                                    var movedGcpPath = eleDoc.gcp_file_path; var movedGcpResp = eleDoc.gcp_response_data;
                                    try {
                                        const _newGcpPath = 'project-apply/' + retrived_id.toString() + '/' + eleDoc.new_file_name;
                                        const moveRsp = await cloudStorageModule.MoveFile(eleDoc.gcp_file_path, _newGcpPath);
                                        movedGcpPath = _newGcpPath; movedGcpResp = JSON.stringify(moveRsp);
                                    } catch (_) {
                                    }
                                    const _queryDocIn = `INSERT INTO project_appl_files(apply_id, original_file_name, new_file_name, gcp_file_path, 
                                        gcp_response_data, uploaded_by, uploaded_date) VALUES(?, ?, ?, ?, ?, ?, ?)`;
                                    await db.sequelize.query(_queryDocIn, {
                                        replacements: [retrived_id, eleDoc.original_file_name, eleDoc.new_file_name, movedGcpPath,
                                            movedGcpResp, req.token_data.account_id, new Date()], type: QueryTypes.INSERT
                                    });
                                }
                                var _docs_to_delete = [];
                                if (docs_to_delete != null) {
                                    var tmp_docs = [];
                                    if (docs_to_delete.constructor == String) { try { tmp_docs = JSON.parse(docs_to_delete); } catch (_) { } }
                                    else { if (docs_to_delete.constructor == Array) { tmp_docs = docs_to_delete; } }
                                    for (let i = 0; tmp_docs && i < tmp_docs.length; i++) {
                                        var _ai = tmp_docs[i] != null && validator.isNumeric(tmp_docs[i].toString()) ? BigInt(tmp_docs[i]) : 0;
                                        if (_ai > 0) { _docs_to_delete.push(_ai); }
                                    }
                                }
                                if (_docs_to_delete && _docs_to_delete.length > 0) {
                                    const _queryDocDel = `UPDATE project_appl_files SET is_deleted = true, deleted_by = ?, deleted_date = ? WHERE apply_id = ? AND doc_file_id IN (?) AND is_deleted = false`;
                                    await db.sequelize.query(_queryDocDel, { replacements: [req.token_data.account_id, new Date(), retrived_id, _docs_to_delete], type: QueryTypes.UPDATE });
                                }
                                return res.status(200).json(success(true, res.statusCode, (oldApplyData != null ? "Updated" : "Applied") + " successfully.", null));
                            } else {
                                for (let dd = 0; proposalDocsUp && dd < proposalDocsUp.length; dd++) {
                                    try { await cloudStorageModule.DeleteFile(proposalDocsUp[dd].gcp_file_path); } catch (_) { }
                                }
                                return res.status(200).json(success(false, res.statusCode, "Unable to " + (oldApplyData != null ? "update" : "add") + " record, Please try again.", null));
                            }
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'You are not allowed to apply for this project.', null));
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'You are not allowed apply for this project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'You are trying to apply for invalid project.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'You are trying to apply for invalid project.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_apply_list = async (req, res, next) => {
    const { page_no, search_text, thematic_ids, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_STATUS, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _thematic_ids = [];
            if (thematic_ids != null) {
                var _tmp_thematic_ids = [];
                if (thematic_ids.constructor == String) {
                    try { _tmp_thematic_ids = JSON.parse(thematic_ids); } catch (_) { }
                } else {
                    if (thematic_ids.constructor == Array) { _tmp_thematic_ids = thematic_ids; }
                }
                for (let i = 0; _tmp_thematic_ids && i < _tmp_thematic_ids.length; i++) {
                    const _tmpID = _tmp_thematic_ids[i] != null && validator.isNumeric(_tmp_thematic_ids[i].toString()) ? BigInt(_tmp_thematic_ids[i]) : 0;
                    if (_tmpID > 0) {
                        _thematic_ids.push(_tmpID);
                    }
                }
            }
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_thematic_ids && _thematic_ids.length > 0) { _sql_condition += ' AND pc.thematic_id IN (:thematic_ids) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM project_appl_mast am INNER JOIN project_created pc ON am.project_id = pc.project_id
            WHERE am.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', thematic_ids: _thematic_ids,
                    country_id: _country_id, state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY am.apply_id DESC) AS sr_no,
            am.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date,
            am.apply_date, am.total_score, am.apply_status, am.awarded_remark, am.awarded_date, am.rejected_remark, am.rejected_date,
            um.company_name AS o_company_name         
            FROM project_appl_mast am INNER JOIN project_created pc ON am.project_id = pc.project_id
            LEFT OUTER JOIN user_master um ON pc.reg_id = um.reg_id           
            WHERE am.reg_id = :reg_id AND pc.is_deleted = false AND pc.is_floated = true ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', thematic_ids: _thematic_ids, country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {

                const _total_score = row1[i].total_score != null && validator.isNumeric(row1[i].total_score.toString()) ? parseFloat(row1[i].total_score) : 0;
                const _project_cost = row1[i].project_cost != null && validator.isNumeric(row1[i].project_cost.toString()) ? parseFloat(row1[i].project_cost) : 0;

                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    company_name: row1[i].o_company_name,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    project_cost: _project_cost,
                    start_date: row1[i].start_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].end_date)) : "",
                    total_score: _total_score,
                    apply_status: row1[i].apply_status,
                    apply_date: row1[i].apply_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].apply_date)) : "",
                    awarded_remark: (row1[i].awarded_remark ? row1[i].awarded_remark : ""),
                    awarded_date: row1[i].awarded_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].awarded_date)) : "",
                    rejected_remark: (row1[i].rejected_remark ? row1[i].rejected_remark : ""),
                    rejected_date: row1[i].rejected_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].rejected_date)) : "",
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_apply_view = async (req, res, next) => {
    const { apply_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_STATUS, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _apply_id = (apply_id != null && apply_id.length > 0) ? apply_id.trim() : "";
            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                const _querySelApply = `SELECT am.apply_id, am.reg_id AS apply_reg_id, am.project_id, am.apply_status,
                pc.unique_id AS project_unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
                pc.funding_option_id, pc.proj_objective, pc.proj_summary, pc.beneficiary_detail, pc.mapped_under, pc.sdg_goals, pc.esg_objective,
                COALESCE((SELECT t.thematic_name FROM thematic_area t WHERE t.thematic_id = COALESCE(pc.thematic_id, 0) LIMIT 1), '') AS thematic_area,
                COALESCE((SELECT t.country_name FROM countries t WHERE t.country_id = COALESCE(pc.country_id, 0) LIMIT 1), '') AS country_name,
                COALESCE((SELECT t.state_name FROM states t WHERE t.state_id = COALESCE(pc.state_id, 0) LIMIT 1), '') AS state_name,
                COALESCE((SELECT t.district_name FROM districts t WHERE t.district_id = COALESCE(pc.district_id, 0) LIMIT 1), '') AS district_name,
                COALESCE((SELECT t.block_name FROM blocks t WHERE t.block_id = COALESCE(pc.block_id, 0) LIMIT 1), '') AS block_name, pc.pin_code,
                pc.incharge_full_name, pc.incharge_designation, pc.incharge_email_id, pc.incharge_mobile_ccc, pc.incharge_mobile_no
                
                FROM project_appl_mast am INNER JOIN project_created pc ON am.project_id = pc.project_id
                WHERE am.unique_id = ?`;
                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [_apply_id], type: QueryTypes.SELECT });
                if (rowSelApply && rowSelApply.length > 0 && row[0].reg_id.toString() == rowSelApply[0].apply_reg_id.toString()) {
                    const rowData = rowSelApply[0];

                    var purpose = '';
                    for (let p = 0; p < constants.project_purpose.length; p++) {
                        if (constants.project_purpose[p].id.toString() == rowData.purpose_id.toString()) {
                            purpose = constants.project_purpose[p].name; break;
                        }
                    }
                    var funding_option = '';
                    for (let p = 0; p < constants.project_funding_option.length; p++) {
                        if (constants.project_funding_option[p].id == rowData.funding_option_id) {
                            funding_option = constants.project_funding_option[p].name; break;
                        }
                    }
                    var mapped_under = '';
                    for (let p = 0; p < constants.project_mapped_under.length; p++) {
                        if (constants.project_mapped_under[p].id.toString().toLowerCase() == rowData.mapped_under.toString().toLowerCase()) {
                            mapped_under = constants.project_mapped_under[p].name; break;
                        }
                    }
                    var sdg_goals = [];
                    if (rowData.sdg_goals && rowData.sdg_goals.length > 0) {
                        sdg_goals = await commonModule.project_sdg_goals_get_by_ids(rowData.sdg_goals);
                    }
                    const dynamic_values = await commonModule.project_dynamic_field_data(rowData.project_id);
                    var my_scope_of_work = await entityDataModule.project_scope_of_work_view_data(rowData.project_id);
                    var _questionnaire = await entityDataModule.project_appl_questionnaire_data(rowData.apply_id);
                    var rfp_document = await entityDataModule.project_document_view_uploaded(rowData.project_id);
                    var proposalDocsUp = await entityDataModule.project_appl_proposal_docs_data(rowData.apply_id);

                    var btn_reject_visible = false; var btn_accept_visible = false;
                    if (rowData.apply_status.toString() == '1') {
                        btn_reject_visible = true; btn_accept_visible = true;
                    }

                    const results = {
                        project_id: rowData.project_unique_id,
                        project_detail: {
                            project_no: (rowData.project_no ? rowData.project_no : ""),
                            project_name: (rowData.project_name ? rowData.project_name : ""),
                            project_cost: (rowData.project_cost ? (parseFloat(rowData.project_cost)).toString() : ""),
                            start_date: (rowData.start_date ? dateFormat(constants.textbox_date_api_format, rowData.start_date) : ""),
                            end_date: (rowData.end_date ? dateFormat(constants.textbox_date_api_format, rowData.end_date) : ""),
                            purpose: purpose,
                            funding_option: funding_option,
                            thematic_area: (rowData.thematic_area ? rowData.thematic_area : ""),
                            proj_objective: (rowData.proj_objective ? rowData.proj_objective : ""),
                            proj_summary: (rowData.proj_summary ? rowData.proj_summary : ""),
                            beneficiary_detail: (rowData.beneficiary_detail ? rowData.beneficiary_detail : ""),
                            mapped_under: mapped_under,
                            sdg_goals: sdg_goals,
                            esg_objective: (rowData.esg_objective ? rowData.esg_objective : ""),
                            country_name: (rowData.country_name ? rowData.country_name : ""),
                            state_name: (rowData.state_name ? rowData.state_name : ""),
                            district_name: (rowData.district_name ? rowData.district_name : ""),
                            block_name: (rowData.block_name ? rowData.block_name : ""),
                            pin_code: (rowData.pin_code ? rowData.pin_code : ""),
                        },
                        project_incharge: {
                            full_name: rowData.incharge_full_name,
                            designation: rowData.incharge_designation,
                            email_id: rowData.incharge_email_id,
                            mobile_ccc: rowData.incharge_mobile_ccc,
                            mobile_no: rowData.incharge_mobile_no,
                        },
                        dynamic_values: dynamic_values,
                        scope_of_work: my_scope_of_work,
                        questionnaire: _questionnaire,
                        rfp_document: rfp_document,
                        proposal_documents: proposalDocsUp,
                        btn_reject_visible: btn_reject_visible,
                        btn_accept_visible: btn_accept_visible,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_apply_reject = async (req, res, next) => {
    const { apply_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_STATUS, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _apply_id = (apply_id != null && apply_id.length > 0) ? apply_id.trim() : "";
            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                const _querySelApply = `SELECT am.apply_id, am.reg_id AS apply_reg_id, am.project_id, am.apply_status
                FROM project_appl_mast am WHERE am.unique_id = ?`;
                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [_apply_id], type: QueryTypes.SELECT });
                if (rowSelApply && rowSelApply.length > 0 && row[0].reg_id.toString() == rowSelApply[0].apply_reg_id.toString()) {
                    if (rowSelApply[0].apply_status.toString() == '1') {
                        const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                        if (_remark.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter reason to reject.', null));
                        }
                        if (_remark.length < 10) {
                            return res.status(200).json(success(false, res.statusCode, 'Reason should not be less than 10 character.', null));
                        }
                        const currDate = new Date();
                        const _queryApplyUp = `UPDATE project_appl_mast SET apply_status = 4, ia_rejected_by = ?, ia_rejected_date = ?, ia_rejected_remark = ? WHERE apply_id = ? AND apply_status = 1`;
                        const _replApplyUp = [req.token_data.account_id, currDate, _remark, rowSelApply[0].apply_id];
                        const [, uqid] = await db.sequelize.query(_queryApplyUp, { replacements: _replApplyUp, type: QueryTypes.UPDATE });
                        if (uqid > 0) {
                            await entityDataModule.project_appl_stats_add(rowSelApply[0].apply_id, 4, _remark, req.token_data.account_id, currDate);

                            return res.status(200).json(success(true, res.statusCode, 'Rejected successfully.', null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to update record, Please try again.', null));
                        }
                    } else {
                        var status_text = utils.project_apply_status_text(rowSelApply[0].apply_status);
                        return res.status(200).json(success(false, res.statusCode, 'Application is currently ' + status_text.toLowerCase() + ' state, you cannot reject.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_apply_accept = async (req, res, next) => {
    const { apply_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_STATUS, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _apply_id = (apply_id != null && apply_id.length > 0) ? apply_id.trim() : "";
            if (_apply_id.length > 0 && utils.isUUID(_apply_id)) {
                const _querySelApply = `SELECT am.apply_id, am.reg_id AS apply_reg_id, am.project_id, am.apply_status
                FROM project_appl_mast am WHERE am.unique_id = ?`;
                const rowSelApply = await db.sequelize.query(_querySelApply, { replacements: [_apply_id], type: QueryTypes.SELECT });
                if (rowSelApply && rowSelApply.length > 0 && row[0].reg_id.toString() == rowSelApply[0].apply_reg_id.toString()) {
                    if (rowSelApply[0].apply_status.toString() == '1') {
                        const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";

                        const _queryChkAcpt = `SELECT apply_id FROM project_appl_mast WHERE project_id = ? AND apply_status IN (3)`;
                        const rowChkAcpt = await db.sequelize.query(_queryChkAcpt, { replacements: [rowSelApply[0].project_id], type: QueryTypes.SELECT });
                        if (rowChkAcpt && rowChkAcpt.length > 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Project is already accepted by another IA.', null));
                        }

                        const currDate = new Date();
                        const _queryApplyUp = `UPDATE project_appl_mast SET apply_status = 3, ia_accepted_by = ?, ia_accepted_date = ?, ia_accepted_remark = ? WHERE apply_id = ? AND apply_status = 1`;
                        const _replApplyUp = [req.token_data.account_id, currDate, _remark, rowSelApply[0].apply_id];
                        const [, uqid] = await db.sequelize.query(_queryApplyUp, { replacements: _replApplyUp, type: QueryTypes.UPDATE });
                        if (uqid > 0) {
                            await entityDataModule.project_appl_stats_add(rowSelApply[0].apply_id, 3, _remark, req.token_data.account_id, currDate);

                            return res.status(200).json(success(true, res.statusCode, 'Accepted successfully.', null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to update record, Please try again.', null));
                        }
                    } else {
                        var status_text = utils.project_apply_status_text(rowSelApply[0].apply_status);
                        return res.status(200).json(success(false, res.statusCode, 'Application is currently ' + status_text.toLowerCase() + ' state, you cannot accept.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid application view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_donate_payments = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.purpose_id, pc.funding_option_id, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() != rowSelProj[0].reg_id.toString() && rowSelProj[0].purpose_id.toString() == '2') {
                    var is_valid_for_pay = false; var charges_config = '';
                    if (row[0].entity_id.toString() == '4') {
                        if (rowSelProj[0].funding_option_id == '2') {
                            is_valid_for_pay = true; charges_config = 'CROWD_FUNDING';
                        }
                    } else {
                        if (rowSelProj[0].funding_option_id == '1') {
                            is_valid_for_pay = true; charges_config = 'GRANT_CSR';
                        }
                    }
                    if (is_valid_for_pay) {
                        const _project_cost = rowSelProj[0].project_cost != null && validator.isNumeric(rowSelProj[0].project_cost.toString()) ? parseFloat(rowSelProj[0].project_cost) : 0;
                        const fund_raised = await entityDataModule.project_total_fund_raised(rowSelProj[0].project_id);

                        const _queryHis = `SELECT p.unique_id, p.payment_date, p.total_amount, p.pg_charges, p.protean_fees, p.tax_amount, p.net_amount 
                        FROM project_payment_fund p WHERE p.project_id = ? AND p.paid_by_reg_id = ? AND p.is_success = true ORDER BY p.payment_id DESC`;
                        const rowHis = await db.sequelize.query(_queryHis, { replacements: [rowSelProj[0].project_id, row[0].reg_id], type: QueryTypes.SELECT });
                        var pay_history = [];
                        for (let i = 0; rowHis && i < rowHis.length; i++) {
                            const eleHis = rowHis[i];
                            const _total_amount = eleHis.total_amount != null && validator.isNumeric(eleHis.total_amount.toString()) ? parseFloat(eleHis.total_amount) : 0;
                            const _pg_charges = eleHis.pg_charges != null && validator.isNumeric(eleHis.pg_charges.toString()) ? parseFloat(eleHis.pg_charges) : 0;
                            const _protean_fees = eleHis.protean_fees != null && validator.isNumeric(eleHis.protean_fees.toString()) ? parseFloat(eleHis.protean_fees) : 0;
                            const _tax_amount = eleHis.tax_amount != null && validator.isNumeric(eleHis.tax_amount.toString()) ? parseFloat(eleHis.tax_amount) : 0;
                            const _net_amount = eleHis.net_amount != null && validator.isNumeric(eleHis.net_amount.toString()) ? parseFloat(eleHis.net_amount) : 0;

                            pay_history.push({
                                payment_id: eleHis.unique_id,
                                payment_date: eleHis.payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(eleHis.payment_date)) : "",
                                total_amount: _total_amount,
                                pg_charges: _pg_charges,
                                protean_fees: _protean_fees,
                                tax_amount: _tax_amount,
                                net_amount: _net_amount,
                            });
                        }

                        var funding_option = ''; const project_funding_option = constants.project_funding_option;
                        for (let k = 0; project_funding_option && k < project_funding_option.length; k++) {
                            if (project_funding_option[k].id.toString() == rowSelProj[0].funding_option_id.toString()) {
                                funding_option = project_funding_option[k].short_name; break;
                            }
                        }

                        const pay_charges = await commonModule.project_charges_config_data(charges_config);
                        const results = {
                            project_no: rowSelProj[0].project_no,
                            project_name: rowSelProj[0].project_name,
                            funding_option: funding_option,
                            project_cost: _project_cost,
                            fund_raised: fund_raised,
                            pay_charges: pay_charges,
                            pay_history: pay_history,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, err.message, null));
    }
};

const project_discovery_donate_pay_get = async (req, res, next) => {
    const { project_id, total_amount, pg_charges, protean_fees, tax_amount, net_amount,
        user_agent, browser_language, browser_javascript_enabled, browser_tz, browser_color_depth, browser_java_enabled,
        browser_screen_height, browser_screen_width } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.purpose_id, pc.funding_option_id, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_enabled = true AND pc.is_deleted = false AND pc.is_floated = true`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0 && row[0].reg_id.toString() != rowSelProj[0].reg_id.toString() && rowSelProj[0].purpose_id.toString() == '2') {
                    var is_valid_for_pay = false; var charges_config = ''; var order_id_prefix = '';
                    if (row[0].entity_id.toString() == '4') {
                        if (rowSelProj[0].funding_option_id == '2') {
                            is_valid_for_pay = true; charges_config = 'CROWD_FUNDING'; order_id_prefix = constants.proj_payment_order_id_funding_prefix;
                        }
                    } else {
                        if (rowSelProj[0].funding_option_id == '1') {
                            is_valid_for_pay = true; charges_config = 'GRANT_CSR'; order_id_prefix = constants.proj_payment_order_id_csr_prefix;
                        }
                    }
                    if (is_valid_for_pay) {
                        const _project_cost = rowSelProj[0].project_cost != null && validator.isNumeric(rowSelProj[0].project_cost.toString()) ? parseFloat(rowSelProj[0].project_cost) : 0;
                        const fund_raised = await entityDataModule.project_total_fund_raised(rowSelProj[0].project_id);

                        const _user_agent = (user_agent != null && user_agent.length > 0) ? user_agent : "";
                        const _total_amount = total_amount != null && validator.isNumeric(total_amount.toString()) ? parseFloat(parseFloat(total_amount).toFixed(2)) : 0;
                        if (_total_amount <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter payment amount.', null));
                        }
                        var max_pay = parseFloat((_project_cost - fund_raised).toFixed(2));
                        if (_total_amount > max_pay) {
                            return res.status(200).json(success(false, res.statusCode, 'Maximum donation of ₹ ' + utils.numberWithIndianFormat(max_pay) + ' is acceptable.', null));
                        }

                        const _pg_charges = pg_charges != null && validator.isNumeric(pg_charges.toString()) ? parseFloat(parseFloat(pg_charges).toFixed(2)) : 0;
                        const _protean_fees = protean_fees != null && validator.isNumeric(protean_fees.toString()) ? parseFloat(parseFloat(protean_fees).toFixed(2)) : 0;
                        const _tax_amount = tax_amount != null && validator.isNumeric(tax_amount.toString()) ? parseFloat(parseFloat(tax_amount).toFixed(2)) : 0;
                        const _net_amount = net_amount != null && validator.isNumeric(net_amount.toString()) ? parseFloat(parseFloat(net_amount).toFixed(2)) : 0;
                        if (_net_amount <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Net payable amount cannot be zero.', null));
                        }
                        const pay_charges = await commonModule.project_charges_config_data(charges_config);

                        var _pg_chargesNew = 0;
                        if (pay_charges.pg_amt_type.toString() == '1') {
                            _pg_chargesNew = parseFloat(parseFloat((_total_amount * pay_charges.pg_charges / 100).toString()).toFixed(2));
                        } else {
                            _pg_chargesNew = parseFloat(parseFloat(pay_charges.pg_charges.toString()).toFixed(2));
                        }
                        if (_pg_charges != _pg_chargesNew) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid payment gateway charges.', null));
                        }

                        var _protean_feesNew = 0;
                        if (pay_charges.pf_amt_type.toString() == '1') {
                            _protean_feesNew = parseFloat(parseFloat((_total_amount * pay_charges.protean_fees / 100).toString()).toFixed(2));
                        } else {
                            _protean_feesNew = parseFloat(parseFloat(pay_charges.protean_fees.toString()).toFixed(2));
                        }
                        if (_protean_fees != _protean_feesNew) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid protean fees.', null));
                        }

                        var _tax_amountNew = 0;
                        if (pay_charges.tax_amt_type.toString() == '1') {
                            _tax_amountNew = parseFloat(parseFloat((_total_amount * pay_charges.tax_charges / 100).toString()).toFixed(2));
                        } else {
                            _tax_amountNew = parseFloat(parseFloat(pay_charges.tax_charges.toString()).toFixed(2));
                        }
                        if (_tax_amount != _tax_amountNew) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid taxes amount.', null));
                        }

                        var _net_amountNew = parseFloat((_total_amount + _pg_chargesNew + _protean_feesNew + _tax_amountNew).toFixed(2));
                        if (_net_amount != _net_amountNew) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid net payable amount.', null));
                        }

                        if (_user_agent.toLowerCase().trim() != req.headers['user-agent'].toLowerCase().trim()) {
                            return res.status(200).json(success(false, res.statusCode, 'browser user agent does not matched.', null));
                        }

                        const temp_id = await commonModule.payment_order_id_new(); const currDate = new Date();
                        if (temp_id.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Unable to create order id, Please try again.', null));
                        }

                        const order_id = order_id_prefix + temp_id.toString(); const order_date = dateFormat(constants.payment_api_order_date_format, currDate);
                        var ip = ''; try { const clientIp = requestIp.getClientIp(req); ip = clientIp; } catch { }
                        const _traceid = crypto.randomUUID().toString().replaceAll('-', ''); const _timestamp = currDate.getTime().toString();
                        const _browser_javascript_enabled = browser_javascript_enabled && browser_javascript_enabled.toString().toLowerCase() == 'true' ? true : false;

                        var deviceObj = {
                            accept_header: 'text/html', init_channel: 'internet', ip: ip,
                            user_agent: user_agent, browser_language: browser_language,
                            browser_javascript_enabled: _browser_javascript_enabled,
                        }
                        if (_browser_javascript_enabled) {
                            deviceObj['browser_tz'] = browser_tz;
                            deviceObj['browser_color_depth'] = browser_color_depth;
                            deviceObj['browser_java_enabled'] = browser_java_enabled;
                            deviceObj['browser_screen_height'] = browser_screen_height;
                            deviceObj['browser_screen_width'] = browser_screen_width;
                        }
                        const returnUrl = `${process.env.APIS_BASE_URL}bill_desk_response`;

                        const payment_raw_object = JSON.stringify({
                            orderid: order_id,
                            mercid: process.env.BILL_DESK_MERCID,
                            order_date: order_date,
                            amount: _net_amount.toFixed(2),
                            currency: '356',
                            ru: returnUrl,
                            itemcode: 'DIRECT',
                            device: deviceObj,
                        });

                        const req_signature = billDeskModule.jws_hmac(payment_raw_object);

                        const kvm_response = await billDeskModule.create_order(payment_raw_object, req_signature, _traceid, _timestamp);

                        if (kvm_response.status == 200) {
                            const success_text = await kvm_response.text();
                            const is_verified = jws.verify(success_text, "HS256", process.env.BILL_DESK_SECRETKEY);
                            if (is_verified) {
                                const success_data = jws.decode(success_text);
                                if (success_data != null) {
                                    const payloadData = JSON.parse(success_data.payload);
                                    var _authToken = '';
                                    for (let pl = 0; pl < payloadData.links.length; pl++) {
                                        if (payloadData.links[pl].rel == payloadData.next_step) {
                                            _authToken = payloadData.links[pl].headers.authorization;
                                        }
                                    }

                                    const _queryPayIn = `INSERT INTO project_payment_fund(project_id, paid_by_reg_id, payment_date, total_amount, pg_charges, protean_fees, 
                                        tax_amount, net_amount, added_by, order_id, order_date, ip_address, bd_traceid, bd_timestamp, create_order_payload_object, 
                                        create_order_payload_signature, create_order_resp_signature, create_order_resp_object) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                                        ?, ?, ?, ?, ?) RETURNING "payment_id", "unique_id"`;
                                    const _replPayIn = [rowSelProj[0].project_id, row[0].reg_id, currDate, _total_amount, _pg_charges, _protean_fees,
                                        _tax_amount, _net_amount, req.token_data.account_id, order_id, order_date, ip, _traceid, _timestamp, payment_raw_object,
                                        req_signature, success_text, JSON.stringify(success_data)];
                                    const [rowPayIn] = await db.sequelize.query(_queryPayIn, { replacements: _replPayIn, returning: true });
                                    const _new_pay_id = (rowPayIn && rowPayIn.length > 0 && rowPayIn[0] ? rowPayIn[0].payment_id : 0);
                                    const _new_unique_id = (rowPayIn && rowPayIn.length > 0 && rowPayIn[0] ? rowPayIn[0].unique_id : 0);

                                    if (_new_pay_id > 0) {
                                        var flow_config = {
                                            merchantLogo: process.env.MERCHANT_LOGO,
                                            merchantId: payloadData.mercid,
                                            bdOrderId: payloadData.bdorderid,
                                            authToken: _authToken,
                                            childWindow: true,
                                            returnUrl: "",
                                            retryCount: constants.proj_payment_retry_count,
                                            prefs: billDeskModule.preferences,
                                            netBanking: billDeskModule.net_banking,
                                            payment_id: _new_unique_id,
                                        };

                                        const logData = {
                                            base_url: process.env.BILL_DESK_URL, traceid: _traceid, order_id: order_id,
                                            payload: payment_raw_object, signature: req_signature
                                        };
                                        paymentService.log_bill_desk_payment('info', ip, 'Order Created & Ready For Payment', logData);

                                        return res.status(200).json(success(true, res.statusCode, '', flow_config));
                                    } else {
                                        return res.status(200).json(success(false, res.statusCode, 'Unable to add record, Please try again.', null));
                                    }
                                } else {
                                    return res.status(200).json(success(false, res.statusCode, 'Payment gateway response decoding failed.', null));
                                }
                            } else {
                                return res.status(200).json(success(false, res.statusCode, 'Payment gateway response verification failed.', null));
                            }
                        } else {
                            var error_msg = ''; var error_data = null;
                            try {
                                const error_text = await kvm_response.text();
                                const is_verified = jws.verify(error_text, "HS256", process.env.BILL_DESK_SECRETKEY);
                                if (is_verified) {
                                    error_data = jws.decode(error_text);
                                    if (error_data != null) {
                                        const payloadData = JSON.parse(error_data.payload);
                                        error_msg = payloadData != null && payloadData.message != null && payloadData.message.length > 0 ? payloadData.message : '';
                                    }
                                }
                            } catch (_) {
                            }
                            if (error_msg.length <= 0) {
                                error_msg = kvm_response.statusText;
                            }

                            const logData = {
                                base_url: process.env.BILL_DESK_URL, traceid: _traceid, order_id: order_id,
                                payload: payment_raw_object, signature: req_signature
                            };
                            paymentService.log_bill_desk_payment('error', ip, 'Gateway Error: ' + error_msg, logData);

                            return res.status(200).json(success(false, res.statusCode, 'Payment gateway error.<br>"' + error_msg + '".', null));
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_donate_pay_chk = async (req, res, next) => {
    const { payment_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_DISCOVERY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _payment_id = (payment_id != null && payment_id.length > 0) ? payment_id.trim() : "";
        if (_payment_id.length > 0 && utils.isUUID(_payment_id)) {

            const _query = `SELECT is_success, bank_ref_no, transactionid, payment_date FROM project_payment_fund WHERE unique_id = ?`;
            const row = await db.sequelize.query(_query, { replacements: [_payment_id], type: QueryTypes.SELECT });
            if (row && row.length > 0) {
                const is_success = (row[0].is_success && row[0].is_success == true ? true : false);
                const results = {
                    is_success: is_success,
                    bank_ref_no: row[0].bank_ref_no,
                    transactionid: row[0].transactionid,
                    payment_date: row[0].payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row[0].payment_date)) : "",
                };
                return res.status(200).json(success(true, res.statusCode, '', results));
            } else {
                return res.status(200).json(success(false, res.statusCode, 'Invalid payment id.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, 'Invalid payment id.', null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const project_discovery_donate_history = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_HISTORY, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record 
            FROM project_payment_fund pf INNER JOIN project_created pc ON pf.project_id = pc.project_id 
            WHERE pf.paid_by_reg_id = :paid_by_reg_id AND pf.is_success = true ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    paid_by_reg_id: row[0].reg_id, search_text: '%' + _search_text + '%',
                    country_id: _country_id, state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pf.payment_id DESC) AS sr_no,
            pf.unique_id, pc.project_no, pc.project_name, pf.payment_date, pf.total_amount, pf.pg_charges, pf.protean_fees, pf.tax_amount, pf.net_amount
            FROM project_payment_fund pf INNER JOIN project_created pc ON pf.project_id = pc.project_id 
            WHERE pf.paid_by_reg_id = :paid_by_reg_id AND pf.is_success = true ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    paid_by_reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                const _total_amount = row1[i].total_amount != null && validator.isNumeric(row1[i].total_amount.toString()) ? parseFloat(row1[i].total_amount) : 0;
                const _pg_charges = row1[i].pg_charges != null && validator.isNumeric(row1[i].pg_charges.toString()) ? parseFloat(row1[i].pg_charges) : 0;
                const _protean_fees = row1[i].protean_fees != null && validator.isNumeric(row1[i].protean_fees.toString()) ? parseFloat(row1[i].protean_fees) : 0;
                const _tax_amount = row1[i].tax_amount != null && validator.isNumeric(row1[i].tax_amount.toString()) ? parseFloat(row1[i].tax_amount) : 0;
                const _net_amount = row1[i].net_amount != null && validator.isNumeric(row1[i].net_amount.toString()) ? parseFloat(row1[i].net_amount) : 0;

                list.push({
                    sr_no: row1[i].sr_no,
                    payment_id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    payment_date: row1[i].payment_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].payment_date)) : "",
                    total_amount: _total_amount,
                    pg_charges: _pg_charges,
                    protean_fees: _protean_fees,
                    tax_amount: _tax_amount,
                    net_amount: _net_amount,
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const discovery_monitoring_project_list = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) { _sql_condition += ' AND (LOWER(pc.project_no) LIKE LOWER(:search_text) OR LOWER(pc.project_name) LIKE LOWER(:search_text)) '; }
            if (_country_id > 0) { _sql_condition += ' AND pc.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND pc.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND pc.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND pc.block_id = :block_id '; }

            const _query0 = `SELECT COUNT(1) AS total_record FROM (
                SELECT DISTINCT project_id FROM project_payment_fund WHERE paid_by_reg_id = :reg_id AND is_success = true
            ) t INNER JOIN project_created pc ON t.project_id = pc.project_id WHERE (1 = 1) ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%',
                    country_id: _country_id, state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY pc.project_id DESC) AS sr_no,
            pc.unique_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.floated_date, pc.funding_option_id,
            c.country_name, s.state_name, d.district_name, b.block_name, pc.pin_code
            FROM (
                SELECT DISTINCT project_id FROM project_payment_fund WHERE paid_by_reg_id = :reg_id AND is_success = true
            ) t INNER JOIN project_created pc ON t.project_id = pc.project_id 
            LEFT OUTER JOIN countries c ON pc.country_id = c.country_id LEFT OUTER JOIN states s ON pc.state_id = s.state_id
            LEFT OUTER JOIN districts d ON pc.district_id = d.district_id LEFT OUTER JOIN blocks b ON pc.block_id = b.block_id 
            WHERE (1 = 1) ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;

            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                var funding_option = '';
                for (let p = 0; p < constants.project_funding_option.length; p++) {
                    if (constants.project_funding_option[p].id.toString() == row1[i].funding_option_id.toString()) {
                        funding_option = constants.project_funding_option[p].short_name; break;
                    }
                }
                const _project_cost = row1[i].project_cost != null && validator.isNumeric(row1[i].project_cost.toString()) ? parseFloat(parseFloat(row1[i].project_cost).toFixed(2)) : 0;

                list.push({
                    sr_no: row1[i].sr_no,
                    project_id: row1[i].unique_id,
                    project_no: row1[i].project_no,
                    project_name: row1[i].project_name,
                    funding_option: funding_option,
                    project_cost: _project_cost,
                    country_name: row1[i].country_name,
                    state_name: row1[i].state_name,
                    district_name: row1[i].district_name,
                    block_name: row1[i].block_name,
                    pin_code: row1[i].pin_code,
                    start_date: row1[i].start_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].start_date)) : "",
                    end_date: row1[i].end_date ? dateFormat(constants.textbox_date_api_format, utils.db_date_to_ist(row1[i].end_date)) : "",
                    floated_date: row1[i].floated_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].floated_date)) : "",
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const discovery_monitoring_project_view = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost, pc.start_date, pc.end_date, pc.purpose_id, 
                pc.funding_option_id, pc.proj_objective, pc.proj_summary, pc.beneficiary_detail, pc.mapped_under, pc.sdg_goals, pc.esg_objective,
                COALESCE((SELECT t.thematic_name FROM thematic_area t WHERE t.thematic_id = COALESCE(pc.thematic_id, 0) LIMIT 1), '') AS thematic_area,
                COALESCE((SELECT t.country_name FROM countries t WHERE t.country_id = COALESCE(pc.country_id, 0) LIMIT 1), '') AS country_name,
                COALESCE((SELECT t.state_name FROM states t WHERE t.state_id = COALESCE(pc.state_id, 0) LIMIT 1), '') AS state_name,
                COALESCE((SELECT t.district_name FROM districts t WHERE t.district_id = COALESCE(pc.district_id, 0) LIMIT 1), '') AS district_name,
                COALESCE((SELECT t.block_name FROM blocks t WHERE t.block_id = COALESCE(pc.block_id, 0) LIMIT 1), '') AS block_name, pc.pin_code,
                pc.incharge_full_name, pc.incharge_designation, pc.incharge_email_id, pc.incharge_mobile_ccc, pc.incharge_mobile_no,  
                um.first_name AS c_first_name, um.middle_name AS c_middle_name, um.last_name AS c_last_name, um.email_id AS c_email_id, 
                um.mobile_ccc AS c_mobile_ccc, um.mobile_no AS c_mobile_no, um.company_name AS c_company_name
                FROM project_created pc INNER JOIN user_master um ON pc.reg_id = um.reg_id 
                WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    const rowData = rowSelProj[0];

                    const paid_record = await entityDataModule.entity_has_funded_to_project(row[0].reg_id, rowData.project_id);

                    if (paid_record > 0) {
                        var purpose = '';
                        for (let p = 0; p < constants.project_purpose.length; p++) {
                            if (constants.project_purpose[p].id.toString() == rowData.purpose_id.toString()) {
                                purpose = constants.project_purpose[p].name; break;
                            }
                        }
                        var funding_option = '';
                        for (let p = 0; p < constants.project_funding_option.length; p++) {
                            if (constants.project_funding_option[p].id.toString() == rowData.funding_option_id.toString()) {
                                funding_option = constants.project_funding_option[p].name; break;
                            }
                        }
                        var mapped_under = '';
                        for (let p = 0; p < constants.project_mapped_under.length; p++) {
                            if (constants.project_mapped_under[p].id.toString().toLowerCase() == rowData.mapped_under.toString().toLowerCase()) {
                                mapped_under = constants.project_mapped_under[p].name; break;
                            }
                        }
                        var sdg_goals = [];
                        if (rowData.sdg_goals && rowData.sdg_goals.length > 0) {
                            sdg_goals = await commonModule.project_sdg_goals_get_by_ids(rowData.sdg_goals);
                        }
                        var my_scope_of_work = await entityDataModule.project_scope_of_work_view_data(rowData.project_id);
                        const dynamic_values = await commonModule.project_dynamic_field_data(rowData.project_id);
                        const _project_cost = rowData.project_cost != null && validator.isNumeric(rowData.project_cost.toString()) ? parseFloat(parseFloat(rowData.project_cost).toFixed(2)) : 0;

                        const results = {
                            owner_detail: {
                                first_name: rowData.c_first_name,
                                middle_name: rowData.c_middle_name,
                                last_name: rowData.c_last_name,
                                email_id: rowData.c_email_id,
                                mobile_ccc: (rowData.c_mobile_ccc ? rowData.c_mobile_ccc : ""),
                                mobile_no: rowData.c_mobile_no,
                                company_name: rowData.c_company_name,
                            },
                            project_detail: {
                                project_no: (rowData.project_no ? rowData.project_no : ""),
                                project_name: (rowData.project_name ? rowData.project_name : ""),
                                project_cost: _project_cost,
                                start_date: (rowData.start_date ? dateFormat(constants.textbox_date_api_format, rowData.start_date) : ""),
                                end_date: (rowData.end_date ? dateFormat(constants.textbox_date_api_format, rowData.end_date) : ""),
                                purpose: purpose,
                                funding_option: funding_option,
                                thematic_area: (rowData.thematic_area ? rowData.thematic_area : ""),
                                proj_objective: (rowData.proj_objective ? rowData.proj_objective : ""),
                                proj_summary: (rowData.proj_summary ? rowData.proj_summary : ""),
                                beneficiary_detail: (rowData.beneficiary_detail ? rowData.beneficiary_detail : ""),
                                mapped_under: mapped_under,
                                sdg_goals: sdg_goals,
                                esg_objective: (rowData.esg_objective ? rowData.esg_objective : ""),
                                country_name: (rowData.country_name ? rowData.country_name : ""),
                                state_name: (rowData.state_name ? rowData.state_name : ""),
                                district_name: (rowData.district_name ? rowData.district_name : ""),
                                block_name: (rowData.block_name ? rowData.block_name : ""),
                                pin_code: (rowData.pin_code ? rowData.pin_code : ""),
                            },
                            project_incharge: {
                                full_name: rowData.incharge_full_name,
                                designation: rowData.incharge_designation,
                                email_id: rowData.incharge_email_id,
                                mobile_ccc: rowData.incharge_mobile_ccc,
                                mobile_no: rowData.incharge_mobile_no,
                            },
                            dynamic_values: dynamic_values,
                            scope_of_work: my_scope_of_work,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You have not funded to this project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const discovery_monitoring_milestone_list = async (req, res, next) => {
    const { project_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            if (_project_id.length > 0 && utils.isUUID(_project_id)) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    const paid_record = await entityDataModule.entity_has_funded_to_project(row[0].reg_id, rowSelProj[0].project_id);
                    if (paid_record > 0) {
                        const rowData = rowSelProj[0]; var milestones = [];

                        await db.sequelize.query(`CALL project_track_crowd_fund_update_data_if_not_exists(?)`,
                            { replacements: [rowData.project_id], type: QueryTypes.UPDATE });

                        const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, ml.milestone_no, ml.milestone_name
                        FROM project_track_milestone pm INNER JOIN project_milestone ml ON pm.milestone_id = ml.milestone_id
                        WHERE pm.project_id = ?`;
                        const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.project_id], type: QueryTypes.SELECT });

                        for (let i = 0; rowMls && i < rowMls.length; i++) {
                            const eleRow = rowMls[i];
                            const _milestone_status = eleRow.milestone_status != null && validator.isNumeric(eleRow.milestone_status.toString()) ? parseInt(eleRow.milestone_status) : 0;
                            milestones.push({
                                milestone_id: eleRow.milestone_id,
                                milestone_no: eleRow.milestone_no,
                                milestone_name: eleRow.milestone_name,
                                milestone_status: _milestone_status,
                            });
                        }

                        const _project_cost = rowData.project_cost != null && validator.isNumeric(rowData.project_cost.toString()) ? parseFloat(parseFloat(rowData.project_cost).toFixed(2)) : 0;
                        const fund_raised = await entityDataModule.project_total_fund_raised(rowData.project_id);

                        const results = {
                            project_id: rowData.project_unique_id,
                            project_no: rowData.project_no,
                            project_name: rowData.project_name,
                            project_cost: _project_cost,
                            fund_raised: fund_raised,
                            milestones: milestones,
                        };
                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You have not funded to this project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const discovery_monitoring_milestone_view = async (req, res, next) => {
    const { project_id, milestone_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_project_id.length > 0 && utils.isUUID(_project_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    const paid_record = await entityDataModule.entity_has_funded_to_project(row[0].reg_id, rowSelProj[0].project_id);
                    if (paid_record > 0) {
                        const rowData = rowSelProj[0];

                        const _queryMls = `SELECT pm.milestone_id, pm.milestone_status, pm.approval_status, ml.milestone_no, ml.milestone_name,
                        pm.approve_remark, pm.reject_remark, pm.approval_status_date, ml.sort_order,
                        pm.completion_file_name, pm.completion_new_name, pm.completion_gcp_path, pm.completion_to_all_delivery, 
                        pm.other_file_name, pm.other_new_name, pm.other_gcp_path, pm.other_to_all_delivery, 
                        pm.beneficiary_file_name, pm.beneficiary_new_name, pm.beneficiary_gcp_path, pm.beneficiary_to_all_delivery
                        FROM project_track_milestone pm INNER JOIN project_milestone ml ON pm.milestone_id = ml.milestone_id
                        WHERE pm.project_id = ? AND pm.milestone_id = ?`;
                        const rowMls = await db.sequelize.query(_queryMls, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                        if (rowMls && rowMls.length > 0) {
                            const dataMil = rowMls[0]; var delivery = [];
                            const _milestone_status = dataMil.milestone_status != null && validator.isNumeric(dataMil.milestone_status.toString()) ? parseInt(dataMil.milestone_status) : 0;
                            const _approval_status = (dataMil.approval_status != null && validator.isNumeric(dataMil.approval_status.toString()) ? parseInt(dataMil.approval_status) : 0);

                            const _queryDel = `SELECT pd.delivery_id, pd.delivery_status, dl.delivery_no, dl.delivery_name,
                            pd.completion_file_name, pd.completion_new_name, pd.completion_gcp_path, pd.completion_to_all_activity, 
                            pd.other_file_name, pd.other_new_name, pd.other_gcp_path, pd.other_to_all_activity, dl.sort_order,
                            pd.beneficiary_file_name, pd.beneficiary_new_name, pd.beneficiary_gcp_path, pd.beneficiary_to_all_activity
                            FROM project_track_delivery pd INNER JOIN project_delivery dl ON pd.delivery_id = dl.delivery_id
                            WHERE pd.project_id = ? AND pd.milestone_id = ? ORDER BY dl.sort_order`;
                            const rowDel = await db.sequelize.query(_queryDel, { replacements: [rowData.project_id, _milestone_id], type: QueryTypes.SELECT });
                            for (let i = 0; rowDel && i < rowDel.length; i++) {
                                const eleDel = rowDel[i]; var activity = [];
                                const _delivery_status = eleDel.delivery_status != null && validator.isNumeric(eleDel.delivery_status.toString()) ? parseInt(eleDel.delivery_status) : 0;

                                const _queryAct = `SELECT pa.activity_id, pa.activity_status, ac.activity_no, ac.activity_name, ac.sort_order,
                                pa.completion_file_name, pa.completion_new_name, pa.completion_gcp_path, pa.other_file_name, pa.other_new_name, 
                                pa.other_gcp_path, pa.beneficiary_file_name, pa.beneficiary_new_name, pa.beneficiary_gcp_path
                                FROM project_track_activity pa INNER JOIN project_activity ac ON pa.activity_id = ac.activity_id
                                WHERE pa.project_id = ? AND pa.delivery_id = ? ORDER BY ac.sort_order`;
                                const rowAct = await db.sequelize.query(_queryAct, { replacements: [rowData.project_id, eleDel.delivery_id], type: QueryTypes.SELECT });
                                for (let j = 0; rowAct && j < rowAct.length; j++) {
                                    const eleAct = rowAct[j];
                                    const _activity_status = eleAct.activity_status != null && validator.isNumeric(eleAct.activity_status.toString()) ? parseInt(eleAct.activity_status) : 0;

                                    activity.push({
                                        activity_id: eleAct.activity_id,
                                        activity_no: eleAct.activity_no,
                                        activity_name: eleAct.activity_name,
                                        activity_order: eleAct.sort_order,
                                        activity_status: _activity_status,
                                        completion_file_name: (eleAct.completion_file_name ? eleAct.completion_file_name : ""),
                                        completion_new_name: (eleAct.completion_new_name ? eleAct.completion_new_name : ""),
                                        other_file_name: (eleAct.other_file_name ? eleAct.other_file_name : ""),
                                        other_new_name: (eleAct.other_new_name ? eleAct.other_new_name : ""),
                                        beneficiary_file_name: (eleAct.beneficiary_file_name ? eleAct.beneficiary_file_name : ""),
                                        beneficiary_new_name: (eleAct.beneficiary_new_name ? eleAct.beneficiary_new_name : ""),
                                    });
                                }

                                delivery.push({
                                    delivery_id: eleDel.delivery_id,
                                    delivery_no: eleDel.delivery_no,
                                    delivery_name: eleDel.delivery_name,
                                    delivery_order: eleDel.sort_order,
                                    delivery_status: _delivery_status,
                                    completion_file_name: (eleDel.completion_file_name ? eleDel.completion_file_name : ""),
                                    completion_new_name: (eleDel.completion_new_name ? eleDel.completion_new_name : ""),
                                    completion_to_all_activity: eleDel.completion_to_all_activity,
                                    other_file_name: (eleDel.other_file_name ? eleDel.other_file_name : ""),
                                    other_new_name: (eleDel.other_new_name ? eleDel.other_new_name : ""),
                                    other_to_all_activity: eleDel.other_to_all_activity,
                                    beneficiary_file_name: (eleDel.beneficiary_file_name ? eleDel.beneficiary_file_name : ""),
                                    beneficiary_new_name: (eleDel.beneficiary_new_name ? eleDel.beneficiary_new_name : ""),
                                    beneficiary_to_all_activity: eleDel.beneficiary_to_all_activity,
                                    activity: activity,
                                });
                            }

                            const _project_cost = rowData.project_cost != null && validator.isNumeric(rowData.project_cost.toString()) ? parseFloat(parseFloat(rowData.project_cost).toFixed(2)) : 0;

                            const results = {
                                project_id: rowData.project_unique_id,
                                project_no: rowData.project_no,
                                project_name: rowData.project_name,
                                project_cost: _project_cost,
                                milestone_id: _milestone_id,
                                milestone_no: dataMil.milestone_no,
                                milestone_name: dataMil.milestone_name,
                                milestone_order: dataMil.sort_order,
                                milestone_status: _milestone_status,
                                request_for_approve: (_approval_status.toString() == '1' ? true : false),
                                is_approved: (_approval_status.toString() == '2' ? true : false),
                                approve_remark: (dataMil.approve_remark ? dataMil.approve_remark : ""),
                                is_rejected: (_approval_status.toString() == '3' ? true : false),
                                reject_remark: (dataMil.reject_remark ? dataMil.reject_remark : ""),
                                status_date: dataMil.approval_status_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(dataMil.approval_status_date)) : "",
                                completion_file_name: (dataMil.completion_file_name ? dataMil.completion_file_name : ""),
                                completion_new_name: (dataMil.completion_new_name ? dataMil.completion_new_name : ""),
                                completion_to_all_delivery: dataMil.completion_to_all_delivery,
                                other_file_name: (dataMil.other_file_name ? dataMil.other_file_name : ""),
                                other_new_name: (dataMil.other_new_name ? dataMil.other_new_name : ""),
                                other_to_all_delivery: dataMil.other_to_all_delivery,
                                beneficiary_file_name: (dataMil.beneficiary_file_name ? dataMil.beneficiary_file_name : ""),
                                beneficiary_new_name: (dataMil.beneficiary_new_name ? dataMil.beneficiary_new_name : ""),
                                beneficiary_to_all_delivery: dataMil.beneficiary_to_all_delivery,
                                delivery: delivery,
                            };
                            return res.status(200).json(success(true, res.statusCode, "", results));
                        } else {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                        }
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You have not funded to this project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const discovery_monitoring_milestone_doc_get_url = async (req, res, next) => {
    const { project_id, milestone_id, doc_type, field_type, field_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.PD_MONITORING, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _project_id = (project_id && project_id.length > 0) ? project_id.trim() : "";
            const _milestone_id = (milestone_id != null && validator.isNumeric(milestone_id.toString()) ? BigInt(milestone_id) : 0);
            if (_project_id.length > 0 && utils.isUUID(_project_id) && _milestone_id > 0) {
                const _querySelProj = `SELECT pc.unique_id AS project_unique_id, pc.project_id, pc.reg_id, pc.project_no, pc.project_name, pc.project_cost
                FROM project_created pc WHERE pc.unique_id = ? AND pc.is_deleted = false AND pc.is_floated = true AND pc.purpose_id = 2`;
                const rowSelProj = await db.sequelize.query(_querySelProj, { replacements: [_project_id], type: QueryTypes.SELECT });
                if (rowSelProj && rowSelProj.length > 0) {
                    const paid_record = await entityDataModule.entity_has_funded_to_project(row[0].reg_id, rowSelProj[0].project_id);
                    if (paid_record > 0) {

                        const doc_type_allowed = ['completion', 'other', 'beneficiary'];
                        const field_type_allowed = ['milestone', 'delivery', 'activity'];

                        const _doc_type = (doc_type && doc_type.length > 0) ? doc_type.trim() : "";
                        if (!utils.check_in_array(_doc_type.toLowerCase(), doc_type_allowed)) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid value for parameter : "doc_type".<br>Values should be - ' + doc_type_allowed.join(', ') + '.', null));
                        }
                        const _field_type = (field_type && field_type.length > 0) ? field_type.trim() : "";
                        if (!utils.check_in_array(_field_type.toLowerCase(), field_type_allowed)) {
                            return res.status(200).json(success(false, res.statusCode, 'Invalid value for parameter : "field_type".<br>Values should be - ' + field_type_allowed.join(', ') + '.', null));
                        }
                        const _field_id = field_id != null && validator.isNumeric(field_id.toString()) ? BigInt(field_id) : 0;

                        const resp = await entityDataModule.monitoring_crowd_fund_milestone_doc_get_url(rowSelProj[0].project_id, _doc_type.toLowerCase(), _field_type.toLowerCase(), _field_id);
                        return res.status(200).json(success(true, res.statusCode, "", resp));

                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'You have not funded to this project.', null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid project view detail request.', null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

const accreditation_initiate_search = async (req, res, next) => {
    const { page_no, search_text, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.INIT_ACCRED_REQUEST, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) {
                _sql_condition += ' AND (LOWER(um.reg_no) LIKE LOWER(:search_text) OR LOWER(um.email_id) LIKE LOWER(:search_text) OR LOWER(um.mobile_no) LIKE ' +
                    ' LOWER(:search_text) OR LOWER(um.company_name) LIKE LOWER(:search_text) OR LOWER(um.company_pan_no) LIKE LOWER(:search_text)) ';
            }
            if (_country_id > 0) { _sql_condition += ' AND um.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND um.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND um.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND um.block_id = :block_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM user_master um WHERE um.entity_id IN (SELECT entity_id FROM entity_type WHERE provide_accreditation = true) 
            AND um.reg_id <> :reg_id AND um.is_deleted = false AND COALESCE(um.approve_status, 0) = 1 AND um.is_enabled = true ${_sql_condition}`;

            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id,
                    search_text: '%' + _search_text + '%',
                    country_id: _country_id,
                    state_id: _state_id,
                    district_id: _district_id,
                    block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY um.reg_id DESC) AS sr_no,
            um.unique_id, um.reg_no, um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.company_name, um.registration_no,
            rt.reg_type_name AS registered_as, c.country_name, s.state_name, d.district_name, b.block_name, um.pin_code,
            um.is_enabled
            FROM user_master um LEFT OUTER JOIN entity_reg_type_mast rt ON um.registered_as_id = rt.reg_type_id 
            LEFT OUTER JOIN countries c ON um.country_id = c.country_id LEFT OUTER JOIN states s ON um.state_id = s.state_id
            LEFT OUTER JOIN districts d ON um.district_id = d.district_id LEFT OUTER JOIN blocks b ON um.block_id = b.block_id
            WHERE um.entity_id IN (SELECT entity_id FROM entity_type WHERE provide_accreditation = true) AND um.reg_id <> :reg_id 
            AND um.is_deleted = false AND COALESCE(um.approve_status, 0) = 1 AND um.is_enabled = true ${_sql_condition}
            LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id,
                    search_text: '%' + _search_text + '%',
                    country_id: _country_id,
                    state_id: _state_id,
                    district_id: _district_id,
                    block_id: _block_id,
                    page_size: parseInt(process.env.PAGINATION_SIZE),
                    page_no: _page_no,
                },
                type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    reg_no: (row1[i].reg_no ? row1[i].reg_no : ""),
                    first_name: (row1[i].first_name ? row1[i].first_name : ""),
                    middle_name: (row1[i].middle_name ? row1[i].middle_name : ""),
                    last_name: (row1[i].last_name ? row1[i].last_name : ""),
                    company_name: (row1[i].company_name ? row1[i].company_name : ""),
                    registered_as: (row1[i].registered_as ? row1[i].registered_as : ""),
                    country_name: (row1[i].country_name ? row1[i].country_name : ""),
                    state_name: (row1[i].state_name ? row1[i].state_name : ""),
                    district_name: (row1[i].district_name ? row1[i].district_name : ""),
                    block_name: (row1[i].block_name ? row1[i].block_name : ""),
                    pin_code: (row1[i].pin_code ? row1[i].pin_code : ""),
                    is_enabled: (row1[i].is_enabled && row1[i].is_enabled == true ? true : false),
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
                levels: await commonModule.accreditation_level_list(),
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_req_initiate = async (req, res, next) => {
    const { reg_id, level_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.INIT_ACCRED_REQUEST, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        var _reg_id = reg_id != null && reg_id.length > 0 ? reg_id : "";
        if (utils.isUUID(_reg_id)) {
            const _level_id = level_id != null && validator.isNumeric(level_id.toString()) ? BigInt(level_id) : 0;
            const _query = `SELECT level_name, level_rank FROM accreditation_level WHERE level_id = ?`;
            const row = await db.sequelize.query(_query, { replacements: [_level_id], type: QueryTypes.SELECT });
            if (!row || row.length <= 0) {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid level selected, Please try again.', null));
            }
            const _query0 = `SELECT u.reg_id, u.entity_id, u.company_name, u.approve_status, et.provide_accreditation
            FROM user_master u INNER JOIN entity_type et ON u.entity_id = et.entity_id WHERE u.unique_id = ?`
            const row0 = await db.sequelize.query(_query0, { replacements: [_reg_id], type: QueryTypes.SELECT });
            if (row0 && row0.length > 0) {
                const entity_approved = row0[0].approve_status != null && validator.isNumeric(row0[0].approve_status.toString()) ? BigInt(row0[0].approve_status) : 0;
                if (entity_approved != 1) {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Accreditation agency is not yet approved.", null));
                }
                const provide_accreditation = (row0[0].provide_accreditation && row0[0].provide_accreditation == true ? true : false);
                if (!provide_accreditation) {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Entity is not accreditation agency, Please try again.", null));
                }
                const _query1 = `SELECT u.reg_id, u.entity_id, et.initiate_accreditation
                FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id INNER JOIN entity_type et ON u.entity_id = et.entity_id
                WHERE a.user_id = ?`;
                const row1 = await db.sequelize.query(_query1, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
                if (row1 && row1.length > 0) {
                    if (row1[0].initiate_accreditation && row1[0].initiate_accreditation == true) {
                        const _query2 = `SELECT request_id, request_date FROM accred_request_detail WHERE reg_id = ? AND agency_reg_id = ? AND request_status = 0`;
                        const row2 = await db.sequelize.query(_query2, { replacements: [row1[0].reg_id, row0[0].reg_id], type: QueryTypes.SELECT });
                        if (row2 && row2.length > 0) {
                            const pending_msg = `Your request raised on ${dateFormat(constants.textbox_date_api_format, row2[0].request_date)} at ${dateFormat('hh:mm', row2[0].request_date)} Hrs is pending for approval.`;
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, pending_msg, null));
                        }
                        const _query3 = `SELECT r.request_id, r.request_date
                        FROM accred_request_detail r INNER JOIN accreditation_level l ON r.level_id = l.level_id
                        WHERE r.reg_id = ? AND r.agency_reg_id = ? AND l.level_rank >= ? AND r.request_status = 1`;
                        const row3 = await db.sequelize.query(_query3, { replacements: [row1[0].reg_id, row0[0].reg_id, row[0].level_rank], type: QueryTypes.SELECT });
                        if (row3 && row3.length > 0) {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, `You need to apply for higher level for ${row0[0].company_name}.`, null));
                        }
                        /***********************************************************/
                        var countries = await commonModule.country_dropdown();
                        var default_country_id = 0;
                        for (let i = 0; countries && i < countries.length; i++) {
                            if (countries[i].is_default && countries[i].is_default == true) {
                                default_country_id = countries[i].country_id; break;
                            }
                        }
                        var states = [];
                        if (default_country_id && default_country_id > 0) {
                            states = await commonModule.state_dropdown(default_country_id);
                        }

                        const _documents = await commonModule.accreditation_document_list(_level_id);
                        const _questions = await commonModule.accreditation_question_list(_level_id);
                        const results = {
                            countries: countries,
                            states: states,
                            documents: _documents,
                            questions: _questions,
                        };

                        return res.status(200).json(success(true, res.statusCode, "You can proceed to initiate request.", results));
                        /***********************************************************/
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Your are not allowed to initiate accreditation.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation agency, Please try again.", null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation agency, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_req_submit = async (req, res, next) => {
    const {
        reg_id, level_id,
        web_site, establish_year, pan_no, prof_tax_reg_no, staff_strength, org_history, org_activity, org_objective,
        vision_mission, se_capabilities, top_5_client, top_5_project, external_reference, auditor_details,
        geographical_activity, evaluation_answers,
    } = req.body;
    res.on('finish', () => {
        delete_uploaded_files(req);
    });
    try {
        if (!utils.has_entity_permission(entityMenuItems.INIT_ACCRED_REQUEST, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        var _reg_id = (reg_id != null && reg_id.length > 0 ? reg_id : "");
        const _level_id = (level_id != null && validator.isNumeric(level_id.toString()) ? BigInt(level_id) : 0);
        const _web_site = (web_site != null && web_site.length > 0) ? web_site.trim() : "";
        if (_web_site.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter website of organization.', null));
        }
        if (!validator.isURL(_web_site)) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter correct website URL.', null));
        }
        const _establish_year = establish_year != null && validator.isNumeric(establish_year.toString()) ? parseInt(establish_year) : 0;
        if (_establish_year <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter year of establishment.', null));
        }
        const fromYears = 1700;
        if (_establish_year <= fromYears) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter correct year of establishment.', null));
        }
        const tillYear = new Date().getFullYear();
        if (_establish_year > tillYear) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter correct year of establishment.', null));
        }
        const _pan_no = (pan_no != null && pan_no.length > 0) ? pan_no.trim() : "";
        if (_pan_no.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter PAN no.', null));
        }
        if (!utils.is_pan_no(_pan_no)) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter correct PAN no.', null));
        }
        const _prof_tax_reg_no = (prof_tax_reg_no != null && prof_tax_reg_no.length > 0) ? prof_tax_reg_no.trim() : "";
        if (_prof_tax_reg_no.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter professional tax registration no.', null));
        }
        const _staff_strength = (staff_strength != null && staff_strength.length > 0) ? staff_strength.trim() : "";
        if (_staff_strength.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter staff strength.', null));
        }
        const _org_history = (org_history != null && org_history.length > 0) ? org_history.trim() : "";
        if (_org_history.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter organization history.', null));
        }
        const _org_activity = (org_activity != null && org_activity.length > 0) ? org_activity.trim() : "";
        if (_org_activity.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter organization activity.', null));
        }
        const _org_objective = (org_objective != null && org_objective.length > 0) ? org_objective.trim() : "";
        if (_org_objective.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter organization objective.', null));
        }
        const _vision_mission = (vision_mission != null && vision_mission.length > 0) ? vision_mission.trim() : "";
        if (_vision_mission.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter vision mission.', null));
        }
        const _se_capabilities = (se_capabilities != null && se_capabilities.length > 0) ? se_capabilities.trim() : "";
        if (_se_capabilities.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter strategy & execution capabilities.', null));
        }
        const _top_5_client = (top_5_client != null && top_5_client.length > 0) ? top_5_client.trim() : "";
        if (_top_5_client.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter top 5 client in past 3 years.', null));
        }
        const _top_5_project = (top_5_project != null && top_5_project.length > 0) ? top_5_project.trim() : "";
        if (_top_5_project.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter top 5 project in past 3 years.', null));
        }
        const _external_reference = (external_reference != null && external_reference.length > 0) ? external_reference.trim() : "";
        if (_external_reference.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter external references.', null));
        }
        const _auditor_details = (auditor_details != null && auditor_details.length > 0) ? auditor_details.trim() : "";
        if (_auditor_details.length <= 0) {
            return res.status(200).json(success(false, res.statusCode, 'Please enter auditor details.', null));
        }
        var ip = ''; try { const clientIp = requestIp.getClientIp(req); ip = clientIp; } catch { }
        var user_agent = req.headers['user-agent'];
        var os_name = ''; try { const result = detector.detect(user_agent); os_name = result.os.name; } catch (e) { }

        if (utils.isUUID(_reg_id)) {
            const _query = `SELECT level_name, level_rank FROM accreditation_level WHERE level_id = ?`;
            const row = await db.sequelize.query(_query, { replacements: [_level_id], type: QueryTypes.SELECT });
            if (!row || row.length <= 0) {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, 'Invalid level selected, Please try again.', null));
            }
            const _query0 = `SELECT reg_id, entity_id, company_name FROM user_master WHERE unique_id = ?`
            const row0 = await db.sequelize.query(_query0, { replacements: [_reg_id], type: QueryTypes.SELECT });
            if (row0 && row0.length > 0) {
                var entity_id = row0[0].entity_id != null && validator.isNumeric(row0[0].entity_id.toString()) ? BigInt(row0[0].entity_id) : 0;
                if (entity_id != 6) {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Entity is not accreditation agency, Please try again.", null));
                }
                /******************************************************/
                var _tmpActivity = []; var newActivity = [];
                if (geographical_activity.constructor == String) {
                    try { _tmpActivity = JSON.parse(geographical_activity); } catch (_) { }
                } else {
                    if (geographical_activity != null) { _tmpActivity = geographical_activity; }
                }
                for (let i = 0; _tmpActivity && i < _tmpActivity.length; i++) {
                    const _district_id = _tmpActivity[i].district_id != null && validator.isNumeric(_tmpActivity[i].district_id.toString()) ? BigInt(_tmpActivity[i].district_id) : 0;
                    if (_district_id > 0) {
                        if (!_tmpActivity[i].activity && _tmpActivity[i].activity.length <= 0) {
                            return res.status(200).json(success(false, res.statusCode, 'Please enter geographical focus activity.', null));
                        }
                        var is_dup = false;
                        for (let j = 0; j < newActivity.length; j++) {
                            if (newActivity[j].district_id.toString() == _district_id.toString()) {
                                is_dup = true;
                            }
                        }
                        if (is_dup) {
                            return res.status(200).json(success(false, res.statusCode, 'District selected multiple time in geographical focus activity.', null));
                        } else {
                            newActivity.push({ district_id: _district_id, activity: _tmpActivity[i].activity });
                        }
                    }
                }

                const _documents = await commonModule.accreditation_document_list(_level_id);
                for (let i = 0; _documents && i < _documents.length; i++) {
                    const file_name_to_check = 'doc_' + _documents[i].document_id.toString();
                    var is_file_exists = false; var file_json_data = null;
                    for (let j = 0; req.files && j < req.files.length; j++) {
                        if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                            file_json_data = req.files[j]; is_file_exists = true; break;
                        }
                    }
                    if (_documents[i].is_required && !is_file_exists) {
                        return res.status(200).json(success(false, res.statusCode, "Please upload required document.<br><br>" + _documents[i].doc_name, { tab: 2, }));
                    }
                    if (is_file_exists) {
                        const ext = file_json_data.originalname.substr(file_json_data.originalname.lastIndexOf('.')).toLowerCase();
                        if (!utils.check_in_array(ext, _documents[i].file_type_allowed)) {
                            return res.status(200).json(success(false, res.statusCode, "Please check file format for document<br>\"" + _documents[i].doc_name + "\"<br><br>Supported formats are: " + _documents[i].file_type_allowed.join(', '), { tab: 2, }));
                        }
                        const file_size_in_kb = file_json_data.size / 1024;
                        if (file_size_in_kb > _documents[i].file_max_size) {
                            const readable = utils.bytes_to_readable(_documents[i].file_max_size * 1024);
                            return res.status(200).json(success(false, res.statusCode, "Please check file size for document<br>\"" + _documents[i].doc_name + "\"<br><br>Maximum file size limit is " + readable, { tab: 2, }));
                        }
                    }
                }

                var _tmpAnswers = [];
                if (evaluation_answers.constructor == String) {
                    try { _tmpAnswers = JSON.parse(evaluation_answers); } catch (_) { }
                } else {
                    if (evaluation_answers != null) { _tmpAnswers = evaluation_answers; }
                }
                const _questions = await commonModule.accreditation_question_list(_level_id);
                for (let i = 0; _questions && i < _questions.length; i++) {
                    var is_exists = false; var tmpQue = null;
                    for (let j = 0; _tmpAnswers && j < _tmpAnswers.length; j++) {
                        if (_tmpAnswers[j].que_id.toString() == _questions[i].que_id.toString()) {
                            is_exists = true; tmpQue = _tmpAnswers[j]; break;
                        }
                    }
                    if (!is_exists) {
                        return res.status(200).json(success(false, res.statusCode, 'Evaluation question is missing in request.', null));
                    }
                    if (tmpQue.ans && tmpQue.ans.length > 0) {
                        if (!utils.check_in_array(tmpQue.ans.toLowerCase(), ['y', 'n'])) {
                            return res.status(200).json(success(false, res.statusCode, `Evaluation answer should be "Y" or "N".`, null));
                        }
                    } else {
                        return res.status(200).json(success(false, res.statusCode, 'Please answer to all evaluation question.', null));
                    }
                }
                /******************************************************/
                const _query1 = `SELECT u.reg_id, u.entity_id, et.initiate_accreditation
                FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id INNER JOIN entity_type et ON u.entity_id = et.entity_id
                WHERE a.user_id = ?`;
                const row1 = await db.sequelize.query(_query1, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
                if (row1 && row1.length > 0) {
                    if (row1[0].initiate_accreditation && row1[0].initiate_accreditation == true) {

                        var is_pan_no_valid = false; var pan_error_msg = ''; var pan_no_response = '';
                        // EXTERNAL CALL HERE
                        const pan_result = await fetchApigee.validate_pan_card(_pan_no);
                        is_pan_no_valid = pan_result.status;
                        pan_error_msg = pan_result.msg;
                        pan_no_response = pan_result.data;
                        // EXTERNAL CALL HERE
                        if (!is_pan_no_valid) {
                            return res.status(200).json(success(false, res.statusCode, (pan_error_msg.length > 0 ? pan_error_msg : 'Pan card verification failed.'), null));
                        }
                        // Uploading document to GCP
                        var GcpUploadedDocs = [];
                        for (let i = 0; _documents && i < _documents.length; i++) {
                            const file_name_to_check = 'doc_' + _documents[i].document_id.toString();
                            var is_file_exists = false; var file_json_data = null;
                            for (let j = 0; req.files && j < req.files.length; j++) {
                                if (req.files[j].fieldname.toLowerCase() == file_name_to_check.toLowerCase()) {
                                    file_json_data = req.files[j]; is_file_exists = true; break;
                                }
                            }
                            if (is_file_exists) {
                                try {
                                    const gcp_file_path = 'entity/' + row1[0].reg_id.toString() + '/' + file_json_data.filename;
                                    const gcpResp = await cloudStorageModule.UploadFile(file_json_data.path, gcp_file_path);
                                    GcpUploadedDocs.push({
                                        document_id: _documents[i].document_id,
                                        original_file_name: file_json_data.originalname,
                                        new_file_name: file_json_data.filename,
                                        gcp_response_data: JSON.stringify(gcpResp),
                                        gcp_file_path: gcp_file_path,
                                    });
                                } catch (gErr) {
                                    try { _logger.error(gErr.stack); } catch (_) { }
                                    for (let dd = 0; GcpUploadedDocs && dd < GcpUploadedDocs.length; dd++) {
                                        try { await cloudStorageModule.DeleteFile(GcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                                    }
                                    return res.status(200).json(success(false, res.statusCode, "Unable to upload file to \"Cloud Storage\".<br>File Name: " + file_json_data.originalname, { tab: 2, }));
                                }
                            }
                        }

                        const _query2 = `SELECT request_id, request_date FROM accred_request_detail WHERE reg_id = ? AND agency_reg_id = ? AND request_status = 0`;
                        const row2 = await db.sequelize.query(_query2, { replacements: [row1[0].reg_id, row0[0].reg_id], type: QueryTypes.SELECT });
                        if (row2 && row2.length > 0) {
                            for (let dd = 0; GcpUploadedDocs && dd < GcpUploadedDocs.length; dd++) {
                                try { await cloudStorageModule.DeleteFile(GcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                            }
                            const pending_msg = `Your request raised on ${dateFormat(constants.textbox_date_api_format, row2[0].request_date)} at ${dateFormat('hh:mm', row2[0].request_date)} Hrs is pending for approval.`;
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, pending_msg, null));
                        }
                        const _query3 = `SELECT r.request_id, r.request_date
                        FROM accred_request_detail r INNER JOIN accreditation_level l ON r.level_id = l.level_id
                        WHERE r.reg_id = ? AND r.agency_reg_id = ? AND l.level_rank >= ? AND r.request_status = 1`;
                        const row3 = await db.sequelize.query(_query3, { replacements: [row1[0].reg_id, row0[0].reg_id, row[0].level_rank], type: QueryTypes.SELECT });
                        if (row3 && row3.length > 0) {
                            for (let dd = 0; GcpUploadedDocs && dd < GcpUploadedDocs.length; dd++) {
                                try { await cloudStorageModule.DeleteFile(GcpUploadedDocs[dd].gcp_file_path); } catch (_) { }
                            }
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, `You need to apply for higher level for ${row0[0].company_name}.`, null));
                        }
                        /***********************************************************/
                        const _queryInReq = `INSERT INTO accred_request_detail(reg_id, account_id, user_id, level_id, agency_reg_id, request_date, ip_address, user_agent, detected_os_name, 
                            web_site, establish_year, pan_no, pan_no_validated, pan_no_valid_date, pan_no_response, prof_tax_reg_no, staff_strength, org_history, org_activity, org_objective, 
                            vision_mission, se_capabilities, top_5_client, top_5_project, external_reference, auditor_details)
                            VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                ?, ?, ?, ?, ?, ?) RETURNING "request_id", "unique_id"`
                        const _repInReq = [row1[0].reg_id, req.token_data.account_id, req.token_data.user_id, _level_id, row0[0].reg_id, new Date(), ip, user_agent, os_name,
                            _web_site, _establish_year, _pan_no, is_pan_no_valid, new Date(), pan_no_response, _prof_tax_reg_no, _staff_strength, _org_history, _org_activity, _org_objective,
                            _vision_mission, _se_capabilities, _top_5_client, _top_5_project, _external_reference, _auditor_details];
                        const [rowInReq] = await db.sequelize.query(_queryInReq, { replacements: _repInReq, type: QueryTypes.INSERT, returning: true });
                        const request_id = (rowInReq && rowInReq.length > 0 && rowInReq[0] ? rowInReq[0].request_id : 0);
                        if (request_id > 0) {
                            for (let aq = 0; newActivity && aq < newActivity.length; aq++) {
                                const _queryInAct = `INSERT INTO accred_request_activity(request_id, country_id, state_id, district_id, activities)
                                SELECT :request_id, s.country_id, d.state_id, d.district_id, :activities
                                FROM districts d LEFT OUTER JOIN states s ON d.state_id = s.state_id WHERE d.district_id = :district_id`;
                                const replAct = { request_id: request_id, activities: newActivity[aq].activity, district_id: newActivity[aq].district_id };
                                await db.sequelize.query(_queryInAct, { replacements: replAct, type: QueryTypes.INSERT });
                            }
                            for (let aq = 0; GcpUploadedDocs && aq < GcpUploadedDocs.length; aq++) {
                                const eleDoc = GcpUploadedDocs[aq];
                                const _queryInDoc = `INSERT INTO accred_request_docs(request_id, document_id, original_file_name, new_file_name, gcp_file_path, gcp_response_data, uploaded_date) VALUES(?, ?, ?, ?, ?, ?, ?)`;
                                await db.sequelize.query(_queryInDoc, { replacements: [request_id, eleDoc.document_id, eleDoc.original_file_name, eleDoc.new_file_name, eleDoc.gcp_file_path, eleDoc.gcp_response_data, new Date()], type: QueryTypes.INSERT });
                            }
                            for (let aq = 0; _questions && aq < _questions.length; aq++) {
                                var is_exists = false; var tmpQue = null;
                                for (let aj = 0; _tmpAnswers && aj < _tmpAnswers.length; aj++) {
                                    if (_tmpAnswers[aj].que_id.toString() == _questions[aq].que_id.toString()) {
                                        is_exists = true; tmpQue = _tmpAnswers[aj]; break;
                                    }
                                }
                                if (is_exists && tmpQue != null) {
                                    const _queryInQue = `INSERT INTO accred_request_answer(request_id, que_id, que_text, answer) VALUES(?, ?, ?, ?)`;
                                    await db.sequelize.query(_queryInQue, { replacements: [request_id, _questions[aq].que_id, _questions[aq].que_text, tmpQue.ans], type: QueryTypes.INSERT });
                                }
                            }

                            return res.status(200).json(success(true, res.statusCode, 'Request initiated successfully', null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to add record, Please try again.", null));
                        }
                        /***********************************************************/
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Your are not allowed to initiate accreditation.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation agency, Please try again.", null));
            }
        } else {
            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation agency, Please try again.", null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_request_list = async (req, res, next) => {
    const { page_no, search_text, request_status, country_id, state_id, district_id, block_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.INIT_ACCRED_STATUS, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _country_id = country_id != null && validator.isNumeric(country_id.toString()) ? BigInt(country_id) : 0;
            var _state_id = state_id != null && validator.isNumeric(state_id.toString()) ? BigInt(state_id) : 0;
            var _district_id = district_id != null && validator.isNumeric(district_id.toString()) ? BigInt(district_id) : 0;
            var _block_id = block_id != null && validator.isNumeric(block_id.toString()) ? BigInt(block_id) : 0;
            var _request_status = (request_status != null && validator.isNumeric(request_status.toString())) ? parseInt(request_status) : -1;

            var _sql_condition = '';
            if (_search_text.length > 0) {
                _sql_condition += ' AND (LOWER(ag.reg_no) LIKE LOWER(:search_text) OR LOWER(ag.email_id) LIKE LOWER(:search_text) OR ' +
                    ' LOWER(ag.mobile_no) LIKE LOWER(:search_text) OR LOWER(ag.company_name) LIKE LOWER(:search_text) OR LOWER(ag.company_pan_no) LIKE LOWER(:search_text)) ';
            }
            if (_country_id > 0) { _sql_condition += ' AND ag.country_id = :country_id '; }
            if (_state_id > 0) { _sql_condition += ' AND ag.state_id = :state_id '; }
            if (_district_id > 0) { _sql_condition += ' AND ag.district_id = :district_id '; }
            if (_block_id > 0) { _sql_condition += ' AND ag.block_id = :block_id '; }
            if (_request_status > -1) { _sql_condition += ' AND rd.request_status = :request_status '; }

            const _query0 = `SELECT count(1) AS total_record FROM accred_request_detail rd INNER JOIN user_master ag ON rd.agency_reg_id = ag.reg_id 
            WHERE rd.reg_id = :reg_id ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', request_status: _request_status,
                    country_id: _country_id, state_id: _state_id, district_id: _district_id, block_id: _block_id,
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY rd.request_id DESC) AS sr_no,
            rd.unique_id, rd.request_date, rd.request_status, rl.level_name, rd.approved_date, rd.approve_remark, rd.rejected_date, rd.reject_remark, rd.cancelled_date, 
            rd.cancel_remark, ag.first_name, ag.middle_name, ag.last_name, ag.email_id, ag.mobile_no, ag.company_name, c.country_name, s.state_name, d.district_name, 
            b.block_name, ag.pin_code FROM accred_request_detail rd INNER JOIN user_master ag ON rd.agency_reg_id = ag.reg_id LEFT OUTER JOIN accreditation_level rl 
            ON rd.level_id = rl.level_id LEFT OUTER JOIN countries c ON ag.country_id = c.country_id LEFT OUTER JOIN states s ON ag.state_id = s.state_id
            LEFT OUTER JOIN districts d ON ag.district_id = d.district_id LEFT OUTER JOIN blocks b ON ag.block_id = b.block_id 
            WHERE rd.reg_id = :reg_id ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', request_status: _request_status, country_id: _country_id, state_id: _state_id,
                    district_id: _district_id, block_id: _block_id, page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no,
                }, type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                list.push({
                    sr_no: row1[i].sr_no,
                    id: row1[i].unique_id,
                    request_date: row1[i].request_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].request_date)) : "",
                    request_status: row1[i].request_status,
                    status_txt: utils.accred_request_status_text(row1[i].request_status),
                    status_color: utils.accred_request_status_color(row1[i].request_status),
                    approved_date: row1[i].approved_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].approved_date)) : "",
                    approve_remark: (row1[i].approve_remark ? row1[i].approve_remark : ""),
                    rejected_date: row1[i].rejected_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].rejected_date)) : "",
                    reject_remark: (row1[i].reject_remark ? row1[i].reject_remark : ""),
                    cancelled_date: row1[i].cancelled_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].cancelled_date)) : "",
                    cancel_remark: (row1[i].cancel_remark ? row1[i].cancel_remark : ""),
                    level_name: (row1[i].level_name ? row1[i].level_name : ""),
                    first_name: (row1[i].first_name ? row1[i].first_name : ""),
                    middle_name: (row1[i].middle_name ? row1[i].middle_name : ""),
                    last_name: (row1[i].last_name ? row1[i].last_name : ""),
                    email_id: (row1[i].email_id ? row1[i].email_id : ""),
                    mobile_no: (row1[i].mobile_no ? row1[i].mobile_no : ""),
                    company_name: (row1[i].company_name ? row1[i].company_name : ""),
                    country_name: (row1[i].country_name ? row1[i].country_name : ""),
                    state_name: (row1[i].state_name ? row1[i].state_name : ""),
                    district_name: (row1[i].district_name ? row1[i].district_name : ""),
                    block_name: (row1[i].block_name ? row1[i].block_name : ""),
                    pin_code: (row1[i].pin_code ? row1[i].pin_code : ""),
                });
            }
            const results = {
                current_page: _page_no,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                total_record: total_record,
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};


const accreditation_request_search = async (req, res, next) => {
    const { page_no, search_text, request_status } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.APPROV_NGO_ACCREEDITION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, et.provide_accreditation FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id
        INNER JOIN entity_type et ON u.entity_id = et.entity_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            if (row[0].provide_accreditation && row[0].provide_accreditation == true) {
                var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
                var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
                var _request_status = (request_status != null && validator.isNumeric(request_status.toString())) ? parseInt(request_status) : -1;

                var _sql_condition = '';
                if (_search_text.length > 0) {
                    _sql_condition += ' AND (LOWER(um.email_id) LIKE LOWER(:search_text) OR LOWER(um.mobile_no) LIKE LOWER(:search_text) OR ' +
                        ' LOWER(um.company_name) LIKE LOWER(:search_text) OR LOWER(um.company_pan_no) LIKE LOWER(:search_text)) ';
                }
                if (_request_status >= 0) { _sql_condition += ' AND ar.request_status = :request_status '; }

                const _query0 = `SELECT count(1) AS total_record
                FROM accred_request_detail ar INNER JOIN user_master um ON ar.reg_id = um.reg_id
                WHERE ar.agency_reg_id = :agency_reg_id ${_sql_condition}`;

                const row0 = await db.sequelize.query(_query0, {
                    replacements: {
                        agency_reg_id: row[0].reg_id,
                        search_text: '%' + _search_text + '%',
                        request_status: _request_status,
                    }, type: QueryTypes.SELECT
                });
                var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

                const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY ar.request_id DESC) AS sr_no,
                ar.unique_id, um.reg_no, um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.company_name,
                al.level_name, ar.request_date, ar.request_status
                FROM accred_request_detail ar INNER JOIN user_master um ON ar.reg_id = um.reg_id LEFT OUTER JOIN accreditation_level al ON ar.level_id = al.level_id
                WHERE ar.agency_reg_id = :agency_reg_id ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
                const row1 = await db.sequelize.query(_query1, {
                    replacements: {
                        agency_reg_id: row[0].reg_id,
                        search_text: '%' + _search_text + '%',
                        request_status: _request_status,
                        page_size: parseInt(process.env.PAGINATION_SIZE),
                        page_no: _page_no,
                    },
                    type: QueryTypes.SELECT
                });

                var list = [];
                for (let i = 0; row1 && i < row1.length; i++) {
                    list.push({
                        sr_no: row1[i].sr_no,
                        id: row1[i].unique_id,
                        reg_no: (row1[i].reg_no ? row1[i].reg_no : ""),
                        first_name: (row1[i].first_name ? row1[i].first_name : ""),
                        middle_name: (row1[i].middle_name ? row1[i].middle_name : ""),
                        last_name: (row1[i].last_name ? row1[i].last_name : ""),
                        company_name: (row1[i].company_name ? row1[i].company_name : ""),
                        level_name: (row1[i].level_name ? row1[i].level_name : ""),
                        request_status: row1[i].request_status,
                        status_txt: utils.accred_request_status_text(row1[i].request_status),
                        status_color: utils.accred_request_status_color(row1[i].request_status),
                        request_date: row1[i].request_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].request_date)) : "",
                    });
                }
                const results = {
                    current_page: _page_no,
                    total_record: total_record,
                    total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                    data: list,
                };
                return res.status(200).json(success(true, res.statusCode, "Success", results));
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "You dont have permission to grant accreditation.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_request_detail = async (req, res, next) => {
    const { id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.APPROV_NGO_ACCREEDITION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, et.provide_accreditation FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id
        INNER JOIN entity_type et ON u.entity_id = et.entity_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            if (row[0].provide_accreditation && row[0].provide_accreditation == true) {
                var _id = (id != null && id.length > 0 ? id : "");
                if (_id.length > 0 && utils.isUUID(_id)) {
                    const _queryDetail = `SELECT ar.request_id, ar.reg_id, ar.agency_reg_id, ar.request_date, ar.request_status, ar.web_site, ar.establish_year, 
                    ar.pan_no AS req_pan_no, ar.prof_tax_reg_no, ar.staff_strength, ar.org_history, ar.org_activity, ar.org_objective, ar.vision_mission, ar.se_capabilities, 
                    ar.top_5_client, ar.top_5_project, ar.external_reference, ar.auditor_details, 
                    
                    um.first_name, um.middle_name, um.last_name, um.email_id, um.mobile_no, um.pan_no,
                    um.company_name,
                    COALESCE((SELECT tmp.reg_type_name FROM entity_reg_type_mast tmp WHERE tmp.reg_type_id = COALESCE(um.registered_as_id, 0) LIMIT 1), '') AS registered_as_name,
                    COALESCE((SELECT tmp.org_type_name FROM parent_orgs_mast tmp WHERE tmp.org_type_id = COALESCE(um.org_type_id, 0) LIMIT 1), '') AS org_type_name,
                    COALESCE((SELECT tmp.company_name FROM user_master tmp WHERE tmp.reg_id = COALESCE(um.parent_org_id, 0) LIMIT 1), '') AS parent_org_name,

                    um.address_1, um.address_2, um.address_3, um.pin_code, um.contact_no, 
                    COALESCE((SELECT t.country_name FROM countries t WHERE t.country_id = COALESCE(um.country_id, 0) LIMIT 1), '') AS country_name,
                    COALESCE((SELECT t.state_name FROM states t WHERE t.state_id = COALESCE(um.state_id, 0) LIMIT 1), '') AS state_name,
                    COALESCE((SELECT t.district_name FROM districts t WHERE t.district_id = COALESCE(um.district_id, 0) LIMIT 1), '') AS district_name,
                    COALESCE((SELECT t.block_name FROM blocks t WHERE t.block_id = COALESCE(um.block_id, 0) LIMIT 1), '') AS block_name

                    FROM accred_request_detail ar INNER JOIN user_master um ON ar.reg_id = um.reg_id
                    LEFT OUTER JOIN accreditation_level al ON ar.level_id = al.level_id
                    WHERE ar.unique_id = ?`;
                    const rowDetail = await db.sequelize.query(_queryDetail, { replacements: [_id], type: QueryTypes.SELECT });
                    if (rowDetail && rowDetail.length > 0) {
                        if (rowDetail[0].agency_reg_id.toString() == row[0].reg_id.toString()) {
                            const rowData = rowDetail[0];

                            const banks = await entityDataModule.bank_accounts(rowData.reg_id); var new_banks = [];
                            for (let ki = 0; banks && ki < banks.length; ki++) {
                                const eleBnk = banks[ki];
                                new_banks.push({
                                    account_no: eleBnk.account_no,
                                    ifsc_code: eleBnk.ifsc_code,
                                    account_type: (eleBnk.account_type.toString() == '1' ? 'Saving' : (eleBnk.account_type.toString() == '2' ? 'Current' : 'Unknown')),
                                    branch_name: eleBnk.bank_branch,
                                    bank_name: eleBnk.bank_name,
                                });
                            }
                            const user_accs = await entityDataModule.admin_account_view_list(rowData.reg_id); var new_accs = [];
                            for (let ki = 0; user_accs && ki < user_accs.length; ki++) {
                                const eleUsr = user_accs[ki];
                                new_accs.push({
                                    first_name: eleUsr.first_name,
                                    middle_name: eleUsr.middle_name,
                                    last_name: eleUsr.last_name,
                                    designation: eleUsr.design_name,
                                    email_id: eleUsr.email_id,
                                    mobile_no: eleUsr.mobile_no,
                                });
                            }
                            var geographical_activity = [];
                            const _queryGeoAct = `SELECT c.country_name, s.state_name, d.district_name, aa.activities
                            FROM accred_request_activity aa LEFT OUTER JOIN districts d ON aa.district_id = d.district_id
                            LEFT OUTER JOIN states s ON d.state_id = s.state_id LEFT OUTER JOIN countries c ON s.country_id = c.country_id WHERE aa.request_id = ?`;
                            const rowGeoAct = await db.sequelize.query(_queryGeoAct, { replacements: [rowData.request_id], type: QueryTypes.SELECT });
                            for (let ki = 0; rowGeoAct && ki < rowGeoAct.length; ki++) {
                                const eleGeoAct = rowGeoAct[ki];
                                geographical_activity.push({
                                    country: eleGeoAct.country_name,
                                    state: eleGeoAct.state_name,
                                    district: eleGeoAct.district_name,
                                    activities: eleGeoAct.activities,
                                });
                            }

                            var level_docs = [];
                            const _queryDocs = `SELECT ad.doc_file_id, ad.document_id, dm.doc_name, ad.original_file_name, ad.new_file_name, ad.gcp_file_path
                            FROM accred_request_docs ad LEFT OUTER JOIN accreditation_doc_mast dm ON ad.document_id = dm.document_id WHERE ad.request_id = ?`;
                            const rowDocs = await db.sequelize.query(_queryDocs, { replacements: [rowData.request_id], type: QueryTypes.SELECT });
                            for (let ki = 0; rowDocs && ki < rowDocs.length; ki++) {
                                const eleDocs = rowDocs[ki];
                                level_docs.push({
                                    file_id: eleDocs.doc_file_id,
                                    document_id: eleDocs.document_id,
                                    doc_name: eleDocs.doc_name,
                                    file_name: eleDocs.original_file_name,
                                    new_name: eleDocs.new_file_name,
                                    file_path: eleDocs.gcp_file_path,
                                });
                            }
                            var evaluations = [];
                            const _queryEval = `SELECT aa.que_text, aa.answer
                            FROM accred_request_answer aa LEFT OUTER JOIN accreditation_question aq ON aa.que_id = aq.que_id WHERE aa.request_id = ?`;
                            const rowEval = await db.sequelize.query(_queryEval, { replacements: [rowData.request_id], type: QueryTypes.SELECT });
                            for (let ki = 0; rowEval && ki < rowEval.length; ki++) {
                                const eleEval = rowEval[ki];
                                evaluations.push({ que_text: eleEval.que_text, answer: eleEval.answer, });
                            }

                            const _request_status = rowData.request_status != null && validator.isNumeric(rowData.request_status.toString()) ? parseInt(rowData.request_status) : 0;

                            const results = {
                                initiator_user: {
                                    first_name: rowData.first_name,
                                    middle_name: rowData.middle_name,
                                    last_name: rowData.last_name,
                                    email_id: rowData.email_id,
                                    mobile_no: rowData.mobile_no,
                                    pan_no: rowData.pan_no,
                                },
                                company_basic: {
                                    company_name: rowData.company_name,
                                    registered_as: rowData.registered_as_name,
                                    parent_entity: rowData.org_type_name,
                                    parent_name: rowData.parent_org_name,
                                },
                                company_address: {
                                    address_1: rowData.address_1,
                                    address_2: rowData.address_2,
                                    address_3: rowData.address_3,
                                    country_name: rowData.country_name,
                                    state_name: rowData.state_name,
                                    district_name: rowData.district_name,
                                    block_name: rowData.block_name,
                                    pin_code: rowData.pin_code,
                                    contact_no: rowData.contact_no,
                                },
                                bank_details: new_banks,
                                admin_details: new_accs,
                                level_details: {
                                    web_site: rowData.web_site,
                                    establish_year: rowData.establish_year,
                                    pan_no: rowData.req_pan_no,
                                    prof_tax_reg_no: rowData.prof_tax_reg_no,
                                    staff_strength: rowData.staff_strength,
                                    org_history: rowData.org_history,
                                    org_activity: rowData.org_activity,
                                    org_objective: rowData.org_objective,
                                    vision_mission: rowData.vision_mission,
                                    se_capabilities: rowData.se_capabilities,
                                    top_5_client: rowData.top_5_client,
                                    top_5_project: rowData.top_5_project,
                                    external_reference: rowData.external_reference,
                                    auditor_details: rowData.auditor_details,
                                    geographical_activity: geographical_activity,
                                },
                                level_docs: level_docs,
                                evaluations: evaluations,
                                request_status: _request_status,
                            };

                            return res.status(200).json(success(true, res.statusCode, "", results));

                        } else {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                        }
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "You dont have permission to grant accreditation.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_req_doc_get_url = async (req, res, next) => {
    const { id, file_id } = req.body;
    try {
        const _query = `SELECT a.reg_id FROM user_account a WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            var _id = (id != null && id.length > 0 ? id : "");
            const _file_id = file_id != null && validator.isNumeric(file_id.toString()) ? BigInt(file_id) : 0;
            if (utils.isUUID(_id)) {
                const _query1 = `SELECT rd.unique_id, rd.reg_id, rd.agency_reg_id, dm.doc_name, dc.original_file_name, dc.new_file_name, dc.gcp_file_path
                FROM accred_request_docs dc INNER JOIN accred_request_detail rd ON dc.request_id = rd.request_id
                LEFT OUTER JOIN accreditation_doc_mast dm ON dc.document_id = dm.document_id
                WHERE dc.doc_file_id = ?`;
                const row1 = await db.sequelize.query(_query1, { replacements: [_file_id], type: QueryTypes.SELECT });
                if (row1 && row1.length > 0 && _id.toLowerCase() == row1[0].unique_id.toLowerCase()) {
                    if (row[0].reg_id.toString() == row1[0].reg_id.toString() ||
                        row[0].reg_id.toString() == row1[0].agency_reg_id.toString()) {
                        const resp = await cloudStorageModule.GenerateSignedUrl(row1[0].gcp_file_path);

                        const results = {
                            status: true,
                            doc_name: row1[0].doc_name,
                            file_name: row1[0].original_file_name,
                            new_name: row1[0].new_file_name,
                            file_path: row1[0].gcp_file_path,
                            file_url: resp,
                        }

                        return res.status(200).json(success(true, res.statusCode, "", results));
                    } else {
                        return res.status(200).json(success(false, res.statusCode, "You don't have permission to document.", null));
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Invalid document request.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Invalid document request.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_request_approve = async (req, res, next) => {
    const { id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.APPROV_NGO_ACCREEDITION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, et.provide_accreditation FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id
        INNER JOIN entity_type et ON u.entity_id = et.entity_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            if (row[0].provide_accreditation && row[0].provide_accreditation == true) {
                var _id = (id != null && id.length > 0 ? id : "");
                const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                if (utils.isUUID(_id)) {
                    const _queryDetail = `SELECT ar.request_id, ar.agency_reg_id, ar.request_status FROM accred_request_detail ar WHERE ar.unique_id = ?`;
                    const rowDetail = await db.sequelize.query(_queryDetail, { replacements: [_id], type: QueryTypes.SELECT });
                    if (rowDetail && rowDetail.length > 0) {
                        if (rowDetail[0].agency_reg_id.toString() == row[0].reg_id.toString()) {
                            const _request_status = rowDetail[0].request_status != null && validator.isNumeric(rowDetail[0].request_status.toString()) ? parseInt(rowDetail[0].request_status) : 0;
                            if (_request_status != 0) {
                                return res.status(200).json(success(false, res.statusCode, "Accreditation request is already " + (_request_status == 1 ? "approved" : "rejected") + ".", null));
                            }
                            const _queryMis2 = `UPDATE accred_request_detail SET request_status = 1, approved_by = ?, approved_date = ?, approve_remark = ? WHERE request_id = ?`;
                            const _replacementsMis2 = [req.token_data.account_id, new Date(), _remark, rowDetail[0].request_id];
                            const [, mIs] = await db.sequelize.query(_queryMis2, { replacements: _replacementsMis2, type: QueryTypes.UPDATE });
                            if (mIs > 0) {
                                return res.status(200).json(success(true, res.statusCode, "Approved successfully.", null));
                            } else {
                                return res.status(200).json(success(false, res.statusCode, "Unable to update status, Please try again", null));
                            }
                        } else {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                        }
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "You dont have permission to grant accreditation.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const accreditation_request_reject = async (req, res, next) => {
    const { id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.APPROV_NGO_ACCREEDITION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, et.provide_accreditation FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id
        INNER JOIN entity_type et ON u.entity_id = et.entity_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            if (row[0].provide_accreditation && row[0].provide_accreditation == true) {
                var _id = (id != null && id.length > 0 ? id : "");
                const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                if (utils.isUUID(_id)) {
                    const _queryDetail = `SELECT ar.request_id, ar.agency_reg_id, ar.request_status FROM accred_request_detail ar WHERE ar.unique_id = ?`;
                    const rowDetail = await db.sequelize.query(_queryDetail, { replacements: [_id], type: QueryTypes.SELECT });
                    if (rowDetail && rowDetail.length > 0) {
                        if (rowDetail[0].agency_reg_id.toString() == row[0].reg_id.toString()) {
                            const _request_status = rowDetail[0].request_status != null && validator.isNumeric(rowDetail[0].request_status.toString()) ? parseInt(rowDetail[0].request_status) : 0;
                            if (_request_status != 0) {
                                return res.status(200).json(success(false, res.statusCode, "Accreditation request is already " + (_request_status == 1 ? "approved" : "rejected") + ".", null));
                            }
                            if (_remark.length <= 0) {
                                return res.status(200).json(success(false, res.statusCode, "Please enter remark to reject request.", null));
                            }
                            const _queryMis2 = `UPDATE accred_request_detail SET request_status = 2, rejected_by = ?, rejected_date = ?, reject_remark = ? WHERE request_id = ?`;
                            const _replacementsMis2 = [req.token_data.account_id, new Date(), _remark, rowDetail[0].request_id];
                            const [, mIs] = await db.sequelize.query(_queryMis2, { replacements: _replacementsMis2, type: QueryTypes.UPDATE });
                            if (mIs > 0) {
                                return res.status(200).json(success(true, res.statusCode, "Rejected successfully.", null));
                            } else {
                                return res.status(200).json(success(false, res.statusCode, "Unable to update status, Please try again", null));
                            }
                        } else {
                            return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                        }
                    } else {
                        return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                    }
                } else {
                    return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "Invalid accreditation request id.", null));
                }
            } else {
                return res.status(200).json(success(false, apiStatus.BACK_TO_PREV_PAGE, "You dont have permission to grant accreditation.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

const uam_role_created = async (req, res, next) => {
    const { page_no, search_text } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {

            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";

            const _query0 = `SELECT count(1) AS total_record FROM role_master r
            WHERE r.reg_id = :reg_id AND LOWER(r.role_name) LIKE LOWER(:search_text) AND r.is_deleted = false
            AND r.added_by = :account_id`;

            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', account_id: req.token_data.account_id
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY r.role_id DESC) AS sr_no,
            r.role_id, r.role_name, r.role_status, r.added_date, r.modify_date, r.change_request, r.change_owner_id, r.is_enabled
            FROM role_master r WHERE r.reg_id = :reg_id AND LOWER(r.role_name) LIKE LOWER(:search_text) AND r.is_deleted = false
            AND r.added_by = :account_id LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', account_id: req.token_data.account_id,
                    page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no
                },
                type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                var change_owner = false; if (row1[i].change_owner_id.toString() == req.token_data.account_id.toString()) { change_owner = true; }
                list.push({
                    sr_no: row1[i].sr_no,
                    role_id: row1[i].role_id,
                    role_name: row1[i].role_name,
                    role_status: row1[i].role_status,
                    added_date: row1[i].added_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].added_date)) : "",
                    modify_date: row1[i].modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].modify_date)) : "",
                    change_request: row1[i].change_request,
                    change_owner: change_owner,
                    is_enabled: row1[i].is_enabled,
                });
            }
            const results = {
                current_page: _page_no,
                total_record: total_record,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_form_data = async (req, res, next) => {
    const { } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query0 = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row0 = await db.sequelize.query(_query0, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row0 && row0.length > 0) {
            var permissions = await entityDataModule.uam_permission_menus(row0[0].entity_id, 0);

            const results = {
                permissions: permissions,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_create_new = async (req, res, next) => {
    const { role_name, permissions } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query0 = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row0 = await db.sequelize.query(_query0, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row0 && row0.length > 0) {
            const _role_name = (role_name != null && role_name.length > 0) ? role_name.trim() : "";
            if (_role_name.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter role name.", null));
            }

            const _query2 = `SELECT r.role_id FROM role_master r WHERE r.reg_id = :reg_id AND r.is_deleted = false AND LOWER(r.role_name) = LOWER(:role_name)`;
            const row2 = await db.sequelize.query(_query2, { replacements: { reg_id: row0[0].reg_id, role_name: _role_name }, type: QueryTypes.SELECT });
            if (row2 && row2.length > 0) {
                return res.status(200).json(success(false, res.statusCode, "Role name is already exists.", null));
            }

            var _permissions = [];
            if (permissions != null) {
                if (permissions.constructor == Array) {
                    _permissions = permissions;
                } else {
                    if (permissions.constructor == String) { try { _permissions = JSON.parse(permissions); } catch (_) { } }
                }
            }
            if (_permissions.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please select functionality for mapping.", null));
            }
            const permissionsList = await entityDataModule.uam_permission_menus(row0[0].entity_id, 0);
            for (let i = 0; i < _permissions.length; i++) {
                var is_exists = false;
                for (let j = 0; j < permissionsList.length; j++) {
                    if (_permissions[i].menu_id.toString() == permissionsList[j].menu_id.toString()) {
                        is_exists = true; break;
                    }
                }
                if (!is_exists) {
                    return res.status(200).json(success(false, res.statusCode, "Invalid functionality selected for mapping.", null));
                }
            }
            var permData = [];
            for (let k = 0; k < _permissions.length; k++) {
                const item = _permissions[k];
                var _menu_id = item.menu_id != null && validator.isNumeric(item.menu_id.toString()) ? BigInt(item.menu_id) : 0;
                var allowed = item.allowed || false;
                permData.push({ menu_id: _menu_id, allowed: allowed, });
            }
            for (let i = 0; permissionsList && i < permissionsList.length; i++) {
                if (BigInt(permissionsList[i].parent_id) <= 0) {
                    var anyChldExists = false;
                    for (let j = 0; j < permissionsList.length; j++) {
                        if (permissionsList[j].menu_id.toString() != permissionsList[i].menu_id.toString() &&
                            permissionsList[j].parent_id.toString() == permissionsList[i].menu_id.toString()) {
                            for (let k = 0; k < permData.length; k++) {
                                if (permData[k].menu_id == permissionsList[j].menu_id) {
                                    anyChldExists = true; break;
                                }
                            }
                        }
                        if (anyChldExists) {
                            break;
                        }
                    }
                    if (anyChldExists) {
                        var dchk = false;
                        for (let jk = 0; jk < permData.length; jk++) {
                            if (permData[jk].menu_id.toString() == permissionsList[i].menu_id.toString()) {
                                dchk = true; break;
                            }
                        }
                        if (!dchk) {
                            permData.push({ menu_id: permissionsList[i].menu_id, allowed: true, });
                        }
                    }
                }
            }

            const _queryInRole = `INSERT INTO role_master(reg_id, role_name, role_status, added_by, added_date, change_owner_id)VALUES(?, ?, ?, ?, ?, ?) RETURNING "role_id"`;
            const _repInRole = [row0[0].reg_id, _role_name, 0, req.token_data.account_id, new Date(), req.token_data.account_id];
            const [rowInRole] = await db.sequelize.query(_queryInRole, { replacements: _repInRole, type: QueryTypes.INSERT, returning: true });
            const role_id = (rowInRole && rowInRole.length > 0 && rowInRole[0] ? rowInRole[0].role_id : 0);
            if (role_id > 0) {
                for (let k = 0; k < permData.length; k++) {
                    const item = permData[k];
                    var _menu_id = item.menu_id != null && validator.isNumeric(item.menu_id.toString()) ? BigInt(item.menu_id) : 0;
                    var allowed = item.allowed || false;

                    const _queryInPerm = `INSERT INTO role_permit(role_id, menu_id, allowed, added_by, added_date)VALUES(?, ?, ?, ?, ?)`;
                    const _repInPerm = [role_id, _menu_id, allowed, req.token_data.account_id, new Date()];
                    await db.sequelize.query(_queryInPerm, { replacements: _repInPerm, type: QueryTypes.INSERT });
                }
                return res.status(200).json(success(true, res.statusCode, "Added successfully & sent for approval.", null));
            } else {
                return res.status(200).json(success(false, res.statusCode, "Unable to add record, Please try again.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_edit_data = async (req, res, next) => {
    const { role_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query0 = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row0 = await db.sequelize.query(_query0, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row0 && row0.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;

            const _query1 = `SELECT reg_id, role_name, role_status, change_request FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row0[0].reg_id.toString()) {
                const _role_status = row1[0].role_status != null && validator.isNumeric(row1[0].role_status.toString()) ? parseInt(row1[0].role_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_role_status.toString() == '0' || _change_request) {
                    return res.status(200).json(success(false, res.statusCode, "Cannot edit, Role approval status is pending.", null));
                }
                const permissions = await entityDataModule.uam_permission_menus(row0[0].entity_id, _role_id);

                const results = {
                    role_name: row1[0].role_name,
                    permissions: permissions,
                };
                return res.status(200).json(success(true, res.statusCode, "", results));
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_update = async (req, res, next) => {
    const { role_id, role_name, permissions } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query0 = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row0 = await db.sequelize.query(_query0, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row0 && row0.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;

            const _query1 = `SELECT reg_id, role_name, role_status, change_request FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row0[0].reg_id.toString()) {
                const _role_status = row1[0].role_status != null && validator.isNumeric(row1[0].role_status.toString()) ? parseInt(row1[0].role_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_role_status.toString() == '0' || _change_request) {
                    return res.status(200).json(success(false, res.statusCode, "Cannot edit, Role approval status is pending.", null));
                }
                const _role_name = (role_name != null && role_name.length > 0) ? role_name.trim() : "";
                if (_role_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter role name.", null));
                }

                const _query2 = `SELECT r.role_id FROM role_master r WHERE r.role_id <> :role_id AND r.reg_id = :reg_id AND r.is_deleted = false 
                AND LOWER(r.role_name) = LOWER(:role_name)`;

                const row2 = await db.sequelize.query(_query2, { replacements: { role_id: _role_id, reg_id: row0[0].reg_id, role_name: _role_name }, type: QueryTypes.SELECT });
                if (row2 && row2.length > 0) {
                    return res.status(200).json(success(false, res.statusCode, "Role name is already exists.", null));
                }

                var _permissions = [];
                if (permissions != null) {
                    if (permissions.constructor == Array) {
                        _permissions = permissions;
                    } else {
                        if (permissions.constructor == String) { try { _permissions = JSON.parse(permissions); } catch (_) { } }
                    }
                }
                if (_permissions.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select functionality for mapping.", null));
                }
                const permissionsList = await entityDataModule.uam_permission_menus(row0[0].entity_id, 0);
                for (let i = 0; i < _permissions.length; i++) {
                    var is_exists = false;
                    for (let j = 0; j < permissionsList.length; j++) {
                        if (_permissions[i].menu_id.toString() == permissionsList[j].menu_id.toString()) {
                            is_exists = true; break;
                        }
                    }
                    if (!is_exists) {
                        return res.status(200).json(success(false, res.statusCode, "Invalid functionality selected for mapping.", null));
                    }
                }

                var permData = [];
                for (let k = 0; k < _permissions.length; k++) {
                    const item = _permissions[k];
                    var _menu_id = item.menu_id != null && validator.isNumeric(item.menu_id.toString()) ? BigInt(item.menu_id) : 0;
                    var allowed = item.allowed || false;
                    permData.push({ menu_id: _menu_id, allowed: allowed, });
                }
                for (let i = 0; permissionsList && i < permissionsList.length; i++) {
                    if (BigInt(permissionsList[i].parent_id) <= 0) {
                        var anyChldExists = false;
                        for (let j = 0; j < permissionsList.length; j++) {
                            if (permissionsList[j].menu_id.toString() != permissionsList[i].menu_id.toString() &&
                                permissionsList[j].parent_id.toString() == permissionsList[i].menu_id.toString()) {
                                for (let k = 0; k < permData.length; k++) {
                                    if (permData[k].menu_id == permissionsList[j].menu_id) {
                                        anyChldExists = true; break;
                                    }
                                }
                            }
                            if (anyChldExists) {
                                break;
                            }
                        }
                        if (anyChldExists) {
                            permData.push({ menu_id: permissionsList[i].menu_id, allowed: true, });
                        }
                    }
                }

                const _queryInRole = `INSERT INTO role_update(role_id, old_name, role_name, new_permit, added_by, added_date)VALUES(?, ?, ?, ?, ?, ?) RETURNING "request_id"`;
                const _repInRole = [_role_id, row1[0].role_name, _role_name, JSON.stringify(permData), req.token_data.account_id, new Date()];
                const [rowInRole] = await db.sequelize.query(_queryInRole, { replacements: _repInRole, type: QueryTypes.INSERT, returning: true });
                const _request_id = (rowInRole && rowInRole.length > 0 && rowInRole[0] ? rowInRole[0].request_id : 0);
                if (_request_id > 0) {
                    return res.status(200).json(success(true, res.statusCode, "Updated successfully & sent for approval.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to add record, Please try again.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_delete = async (req, res, next) => {
    const { role_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;
            const _query1 = `SELECT reg_id, role_name, role_status, change_request, request_id FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                /*if (_remark.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter reason to delete role.", null));
                }*/
                const _queryChkUsr = `SELECT user_id FROM user_account WHERE reg_id = ? AND is_deleted = false AND role_id = ?`;
                const rowChkUsr = await db.sequelize.query(_queryChkUsr, { replacements: [row[0].reg_id, _role_id], type: QueryTypes.SELECT });
                if (rowChkUsr && rowChkUsr.length > 0) {
                    return res.status(200).json(success(false, res.statusCode, "Cannot delete, Role is assigned to user account.", null));
                }

                const _query2 = `UPDATE role_master SET is_deleted = true, deleted_date = ?, deleted_by = ? WHERE role_id = ?`;
                const _replacements2 = [new Date(), req.token_data.account_id, _role_id];
                const [, i] = await db.sequelize.query(_query2, { replacements: _replacements2, type: QueryTypes.UPDATE });
                if (i > 0) {
                    return res.status(200).json(success(true, res.statusCode, "Role deleted successfully.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to delete, please try again.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_toggle = async (req, res, next) => {
    const { role_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;
            const _query1 = `SELECT reg_id, role_name, role_status, change_request, request_id, is_enabled FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _query2 = `UPDATE role_master SET is_enabled = CASE WHEN is_enabled = true THEN false ELSE true END, modify_date = ?, modify_by = ? WHERE role_id = ?`;
                const _replacements2 = [new Date(), req.token_data.account_id, _role_id];
                const [, i] = await db.sequelize.query(_query2, { replacements: _replacements2, type: QueryTypes.UPDATE });
                if (i > 0) {
                    const _oldStatus = row1[0].is_enabled && row1[0].is_enabled == true ? true : false;
                    if (_oldStatus) {
                        await entityDataModule.remove_all_sessions_by_role(_role_id);
                    }
                    return res.status(200).json(success(true, res.statusCode, "Status changed successfully.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to change, please try again.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_pending = async (req, res, next) => {
    const { page_no, search_text } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {

            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";

            var _sql_condition = '';
            if (_search_text.length > 0) {
                _sql_condition += ' AND LOWER(CASE WHEN r.change_request = true THEN COALESCE(u.role_name, r.role_name) ELSE r.role_name END) LIKE LOWER(:search_text) ';
            }
            const _query0 = `SELECT count(1) AS total_record 
            FROM role_master r LEFT JOIN LATERAL (
                SELECT u.role_name FROM role_update u WHERE u.request_id = r.request_id LIMIT 1
            ) u ON true WHERE r.reg_id = :reg_id AND r.is_deleted = false AND r.added_by <> :account_id ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', account_id: req.token_data.account_id
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY r.role_id DESC) AS sr_no,
            r.role_id, r.change_req_date, r.change_request, r.change_owner_id, r.role_status,
            CASE WHEN r.change_request = true THEN COALESCE(u.role_name, r.role_name) ELSE r.role_name END AS role_name
            FROM role_master r LEFT JOIN LATERAL (
                SELECT u.role_name FROM role_update u WHERE u.request_id = r.request_id LIMIT 1
            ) u ON true WHERE r.reg_id = :reg_id AND r.is_deleted = false
            AND r.added_by <> :account_id ${_sql_condition} LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', account_id: req.token_data.account_id,
                    page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no
                },
                type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                var change_owner = false; if (row1[i].change_owner_id.toString() == req.token_data.account_id.toString()) { change_owner = true; }
                const _role_status = row1[i].role_status != null && validator.isNumeric(row1[i].role_status.toString()) ? parseInt(row1[i].role_status) : 0;
                const _change_request = row1[i].change_request && row1[i].change_request == true ? true : false;

                list.push({
                    sr_no: row1[i].sr_no,
                    role_id: row1[i].role_id,
                    change_req_date: row1[i].change_req_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].change_req_date)) : "",
                    change_request: row1[i].change_request,
                    change_owner: change_owner,
                    role_name: row1[i].role_name,
                    role_status: row1[i].role_status,
                    is_pending: (_role_status == 0 || _change_request ? true : false),
                });
            }
            const results = {
                current_page: _page_no,
                total_record: total_record,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_view = async (req, res, next) => {
    const { role_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;
            const _query1 = `SELECT reg_id, role_name, role_status, change_request, request_id FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _role_status = row1[0].role_status != null && validator.isNumeric(row1[0].role_status.toString()) ? parseInt(row1[0].role_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_role_status.toString() == '0' || _change_request) {
                    var old_data = null; var new_data = null;
                    if (_role_status.toString() == '0') {
                        var permissions = [];
                        const _queryGetPerm = `SELECT p.menu_id, m.menu_name, m.parent_id
                        FROM role_permit p INNER JOIN entity_menu_master m  ON p.menu_id = m.menu_id WHERE p.role_id = ? AND p.allowed = true`;
                        const rowGetPerm = await db.sequelize.query(_queryGetPerm, { replacements: [_role_id], type: QueryTypes.SELECT });
                        for (let i = 0; rowGetPerm && i < rowGetPerm.length; i++) {
                            const elePerm = rowGetPerm[i];
                            permissions.push({
                                menu_id: elePerm.menu_id,
                                menu_name: elePerm.menu_name,
                                parent_id: elePerm.parent_id,
                            });
                        }
                        new_data = {
                            role_name: row1[0].role_name,
                            permissions: permissions,
                        };
                    } else {
                        const _queryReq = `SELECT role_name, new_permit FROM role_update WHERE request_id = ?`
                        const rowReq = await db.sequelize.query(_queryReq, { replacements: [row1[0].request_id], type: QueryTypes.SELECT });
                        if (rowReq && rowReq.length > 0) {
                            var permissionsOld = [];
                            const _queryGetPerm = `SELECT p.menu_id, m.menu_name, m.parent_id
                            FROM role_permit p INNER JOIN entity_menu_master m  ON p.menu_id = m.menu_id WHERE p.role_id = ? AND p.allowed = true`;
                            const rowGetPerm = await db.sequelize.query(_queryGetPerm, { replacements: [_role_id], type: QueryTypes.SELECT });
                            for (let i = 0; rowGetPerm && i < rowGetPerm.length; i++) {
                                const elePerm = rowGetPerm[i];
                                permissionsOld.push({
                                    menu_id: elePerm.menu_id,
                                    menu_name: elePerm.menu_name,
                                    parent_id: elePerm.parent_id,
                                });
                            }
                            old_data = {
                                role_name: row1[0].role_name,
                                permissions: permissionsOld,
                            };
                            var permissionsNew = [];
                            const newPermJson = JSON.parse(rowReq[0].new_permit); var permUpdated = [];
                            for (let k = 0; newPermJson && k < newPermJson.length; k++) {
                                const _menu_id = newPermJson[k].menu_id != null && validator.isNumeric(newPermJson[k].menu_id.toString()) ? BigInt(newPermJson[k].menu_id) : 0;
                                if (_menu_id > 0) {
                                    const allowed = newPermJson[k].allowed || false;
                                    if (allowed) {
                                        permUpdated.push(_menu_id);
                                    }
                                }
                            }
                            const _queryPermNew = `SELECT menu_id, menu_name, parent_id FROM entity_menu_master WHERE menu_id IN (?)`;
                            const rowPermNew = await db.sequelize.query(_queryPermNew, { replacements: [permUpdated], type: QueryTypes.SELECT });
                            for (let i = 0; rowPermNew && i < rowPermNew.length; i++) {
                                const elePerm = rowPermNew[i];
                                permissionsNew.push({
                                    menu_id: elePerm.menu_id,
                                    menu_name: elePerm.menu_name,
                                    parent_id: elePerm.parent_id,
                                });
                            }
                            new_data = {
                                role_name: rowReq[0].role_name,
                                permissions: permissionsNew,
                            };
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Role update details request not found.", null));
                        }
                    }
                    const results = {
                        old_data: old_data,
                        new_data: new_data,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Role request is not in pending state.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_approve = async (req, res, next) => {
    const { role_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;

            const _query1 = `SELECT reg_id, role_name, role_status, change_request, request_id FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _role_status = row1[0].role_status != null && validator.isNumeric(row1[0].role_status.toString()) ? parseInt(row1[0].role_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_role_status.toString() == '0' || _change_request) {
                    const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                    const currDate = new Date();
                    if (_role_status.toString() == '0') {
                        const _queryUpRole = `UPDATE role_master SET role_status = 1, change_request = false, approved_by = ?, approved_date = ?, approve_remark = ?, is_approved = true WHERE role_id = ?`;
                        const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, _role_id], type: QueryTypes.UPDATE });
                        if (i > 0) {
                            const _queryRoleStat = `INSERT INTO role_stat_log(role_id, role_status, status_by, status_date, status_remark)VALUES(?, ?, ?, ?, ?)`;
                            const _repRoleStat = [_role_id, 1, req.token_data.account_id, currDate, _remark];
                            await db.sequelize.query(_queryRoleStat, { replacements: _repRoleStat, type: QueryTypes.INSERT });

                            return res.status(200).json(success(true, res.statusCode, "Approved successfully.", null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                        }
                    } else {
                        const _querySelPerm = `SELECT role_name, new_permit FROM role_update WHERE request_id = ?`;
                        const rowSelPerm = await db.sequelize.query(_querySelPerm, { replacements: [row1[0].request_id], type: QueryTypes.SELECT });
                        if (rowSelPerm && rowSelPerm.length > 0) {
                            const _query2 = `SELECT r.role_id FROM role_master r WHERE r.role_id <> :role_id AND r.reg_id = :reg_id AND r.is_deleted = false 
                            AND LOWER(r.role_name) = LOWER(:role_name)`;
                            const row2 = await db.sequelize.query(_query2, { replacements: { role_id: _role_id, reg_id: row[0].reg_id, role_name: rowSelPerm[0].role_name }, type: QueryTypes.SELECT });
                            if (row2 && row2.length > 0) {
                                return res.status(200).json(success(false, res.statusCode, "Role name is already exists.", null));
                            }
                            const _queryUpRole = `UPDATE role_update SET request_status = 1, status_by = ?, status_date = ?, status_remark = ? WHERE request_id = ?`;
                            const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, row1[0].request_id], type: QueryTypes.UPDATE });
                            if (i > 0) {
                                try {
                                    const newPermJson = JSON.parse(rowSelPerm[0].new_permit); var permUpdated = [];
                                    for (let k = 0; newPermJson && k < newPermJson.length; k++) {
                                        const _menu_id = newPermJson[k].menu_id != null && validator.isNumeric(newPermJson[k].menu_id.toString()) ? BigInt(newPermJson[k].menu_id) : 0;
                                        if (_menu_id > 0) {
                                            const allowed = newPermJson[k].allowed || false;
                                            const _queryChkPerm = `SELECT menu_id FROM role_permit WHERE role_id = ? AND menu_id = ? `;
                                            const rowChkPerm = await db.sequelize.query(_queryChkPerm, { replacements: [_role_id, _menu_id], type: QueryTypes.SELECT });
                                            if (rowChkPerm && rowChkPerm.length > 0) {
                                                const _queryUpPerm = `UPDATE role_permit SET allowed = ?,  modify_by = ?, modify_date = ? WHERE role_id = ? AND menu_id = ?`;
                                                await db.sequelize.query(_queryUpPerm, { replacements: [allowed, req.token_data.account_id, currDate, _role_id, _menu_id], type: QueryTypes.UPDATE });
                                                permUpdated.push(_menu_id);
                                            } else {
                                                const _queryInPerm = `INSERT INTO role_permit(role_id, menu_id, allowed, added_by, added_date) VALUES (?, ?, ?, ?, ?)`;
                                                await db.sequelize.query(_queryInPerm, { replacements: [_role_id, _menu_id, allowed, req.token_data.account_id, currDate], type: QueryTypes.INSERT });
                                                permUpdated.push(_menu_id);
                                            }
                                        }
                                    }
                                    if (permUpdated.length > 0) {
                                        const _queryReset = `UPDATE role_permit SET allowed = false WHERE role_id = ? AND menu_id NOT IN (?)`;
                                        await db.sequelize.query(_queryReset, { replacements: [_role_id, permUpdated], type: QueryTypes.UPDATE });
                                    } else {
                                        const _queryReset = `UPDATE role_permit SET allowed = false WHERE role_id = ?`;
                                        await db.sequelize.query(_queryReset, { replacements: [_role_id], type: QueryTypes.UPDATE });
                                    }
                                } catch (_) {
                                }
                                return res.status(200).json(success(true, res.statusCode, "Approved successfully.", null));
                            } else {
                                return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                            }
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Update detail not found, Please try again.", null));
                        }
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Role request is not in pending state.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_reject = async (req, res, next) => {
    const { role_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_ROLE_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;

            const _query1 = `SELECT reg_id, role_name, role_status, change_request, request_id FROM role_master WHERE role_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_role_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _role_status = row1[0].role_status != null && validator.isNumeric(row1[0].role_status.toString()) ? parseInt(row1[0].role_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_role_status.toString() == '0' || _change_request) {
                    const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                    if (_remark.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter reason to reject role.", null));
                    }
                    const currDate = new Date();
                    if (_role_status.toString() == '0') {
                        const _queryUpRole = `UPDATE role_master SET role_status = 2, change_request = false, rejected_by = ?, rejected_date = ?, reject_remark = ? WHERE role_id = ?`;
                        const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, _role_id], type: QueryTypes.UPDATE });
                        if (i > 0) {
                            const _queryRoleStat = `INSERT INTO role_stat_log(role_id, role_status, status_by, status_date, status_remark)VALUES(?, ?, ?, ?, ?)`;
                            const _repRoleStat = [_role_id, 2, req.token_data.account_id, currDate, _remark];
                            await db.sequelize.query(_queryRoleStat, { replacements: _repRoleStat, type: QueryTypes.INSERT });

                            return res.status(200).json(success(true, res.statusCode, "Rejected successfully.", null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                        }
                    } else {
                        const _queryUpRole = `UPDATE role_update SET request_status = 2, status_by = ?, status_date = ?, status_remark = ? WHERE request_id = ?`;
                        const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, row1[0].request_id], type: QueryTypes.UPDATE });
                        if (i > 0) {
                            return res.status(200).json(success(true, res.statusCode, "Rejected successfully.", null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                        }
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Role request is not in pending state.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "Role details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_role_dropdown = async (req, res, next) => {
    const { } = req.body;
    try {
        const rc = utils.has_entity_permission(entityMenuItems.UM_ROLE_CREATION, req.token_data.permissions);
        const ra = utils.has_entity_permission(entityMenuItems.UM_ROLE_APPROVAL, req.token_data.permissions);
        const uc = utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions);
        const ua = utils.has_entity_permission(entityMenuItems.UM_USER_APPROVAL, req.token_data.permissions);
        const hasPerm = rc || ra || uc || ua;
        if (!hasPerm) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const roles = await entityDataModule.uam_role_dropdown_list(row[0].reg_id);
            return res.status(200).json(success(true, res.statusCode, "", roles));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_created = async (req, res, next) => {
    const { page_no, role_id, search_text } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {

            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";
            var _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;

            var _sql_condition = '';
            if (_search_text.length > 0) {
                _sql_condition += ' AND ( LOWER(a.first_name) LIKE LOWER(:search_text) OR LOWER(a.middle_name) LIKE LOWER(:search_text) OR ' +
                    ' LOWER(a.last_name) LIKE LOWER(:search_text) OR LOWER(a.email_id) LIKE LOWER(:search_text) OR LOWER(a.mobile_no) LIKE LOWER(:search_text) ) ';
            }
            if (_role_id > 0) { _sql_condition += ' AND a.role_id = :role_id '; }

            const _query0 = `SELECT count(1) AS total_record FROM user_account a
            WHERE a.reg_id = :reg_id AND a.is_deleted = false AND a.is_admin = false ${_sql_condition}
            AND a.added_by = :account_id `;

            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, role_id: _role_id, search_text: '%' + _search_text + '%', account_id: req.token_data.account_id
                }, type: QueryTypes.SELECT
            });
            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY a.user_id DESC) AS sr_no,
            a.user_id, a.user_status, a.added_date, a.modify_date, a.change_request, a.change_owner_id,
            a.first_name, a.middle_name, a.last_name, a.email_id, a.mobile_no, r.role_name, a.is_enabled

            FROM user_account a LEFT OUTER JOIN role_master r ON a.role_id = r.role_id
            WHERE a.reg_id = :reg_id AND a.is_deleted = false AND a.is_admin = false ${_sql_condition}
            AND a.added_by = :account_id LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, role_id: _role_id, search_text: '%' + _search_text + '%', account_id: req.token_data.account_id,
                    page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no
                },
                type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                var change_owner = false; if (row1[i].change_owner_id.toString() == req.token_data.account_id.toString()) { change_owner = true; }
                var full_name = [];
                if (row1[i].first_name && row1[i].first_name.length > 0) { full_name.push(row1[i].first_name); }
                if (row1[i].middle_name && row1[i].middle_name.length > 0) { full_name.push(row1[i].middle_name); }
                if (row1[i].last_name && row1[i].last_name.length > 0) { full_name.push(row1[i].last_name); }

                list.push({
                    sr_no: row1[i].sr_no,
                    user_id: row1[i].user_id,
                    user_status: row1[i].user_status,
                    added_date: row1[i].added_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].added_date)) : "",
                    modify_date: row1[i].modify_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].modify_date)) : "",
                    change_request: row1[i].change_request,
                    change_owner: change_owner,
                    full_name: full_name.join(' '),
                    email_id: row1[i].email_id,
                    mobile_no: row1[i].mobile_no,
                    role_name: row1[i].role_name,
                    is_enabled: row1[i].is_enabled,
                });
            }
            const results = {
                current_page: _page_no,
                total_record: total_record,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_form_data = async (req, res, next) => {
    const { } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const roles = await entityDataModule.uam_role_dropdown_list(row[0].reg_id);
            const mobile_ccc_list = await commonModule.country_calling_code();

            const results = {
                roles: roles,
                mobile_ccc_list: mobile_ccc_list,
            };
            return res.status(200).json(success(true, res.statusCode, "Success", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_create_new = async (req, res, next) => {
    const { first_name, middle_name, last_name, role_id, email_id, mobile_ccc, mobile_no, } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _first_name = (first_name && first_name.length > 0) ? first_name.trim() : "";
            if (_first_name.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter first name.", null));
            }
            if (_first_name.length < 2) {
                return res.status(200).json(success(false, res.statusCode, "First name should not be less than 2 characters.", null));
            }
            if (_first_name.length > 30) {
                return res.status(200).json(success(false, res.statusCode, "First name should not be more than 30 characters.", null));
            }
            const _middle_name = (middle_name && middle_name.length > 0) ? middle_name.trim() : "";
            if (_middle_name.length > 30) {
                return res.status(200).json(success(false, res.statusCode, "Middle name should not be more than 30 characters.", null));
            }
            const _last_name = (last_name && last_name.length > 0) ? last_name.trim() : "";
            if (_last_name.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter last name.", null));
            }
            if (_last_name.length < 2) {
                return res.status(200).json(success(false, res.statusCode, "Last name should not be less than 2 characters.", null));
            }
            if (_last_name.length > 30) {
                return res.status(200).json(success(false, res.statusCode, "Last name should not be more than 30 characters.", null));
            }
            const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;
            if (_role_id <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please select user role.", null));
            }
            var valid_role_id = false; const roles = await entityDataModule.uam_role_dropdown_list(row[0].reg_id);
            for (let i = 0; roles && i < roles.length; i++) {
                if (roles[i].role_id.toString() == _role_id.toString()) {
                    valid_role_id = true; break;
                }
            }
            if (!valid_role_id) {
                return res.status(200).json(success(false, res.statusCode, "Invalid user role.", null));
            }
            const _email_id = (email_id && email_id.length > 0) ? email_id.trim() : "";
            if (_email_id.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter email id.", null));
            }
            if (!validator.isEmail(_email_id)) {
                return res.status(200).json(success(false, res.statusCode, "Please enter correct email id.", null));
            }
            const _mobile_ccc = (mobile_ccc && mobile_ccc.length > 0) ? mobile_ccc.trim() : "";
            if (_mobile_ccc.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please select mobile country code.", null));
            }
            var valid_mobile_ccc = false; const db_mobile_ccc = await commonModule.country_calling_code();
            for (let i = 0; db_mobile_ccc && i < db_mobile_ccc.length; i++) {
                if (db_mobile_ccc[i].toString().toLowerCase() == _mobile_ccc.toString().toLowerCase()) {
                    valid_mobile_ccc = true; break;
                }
            }
            if (!valid_mobile_ccc) {
                return res.status(200).json(success(false, res.statusCode, "Invalid mobile country code.", null));
            }
            const _mobile_no = (mobile_no && mobile_no.length > 0) ? mobile_no.trim() : "";
            if (_mobile_no.length <= 0) {
                return res.status(200).json(success(false, res.statusCode, "Please enter mobile number.", null));
            }
            if (!utils.is_mobile_no(_mobile_no)) {
                return res.status(200).json(success(false, res.statusCode, "Please enter correct mobile number.", null));
            }
            const _chkMail = await commonModule.is_email_registered(_email_id);
            if (_chkMail) {
                return res.status(200).json(success(false, res.statusCode, "Email id is already registered.", null));
            }
            const _chkMobile = await commonModule.is_mobile_registered(_mobile_no);
            if (_chkMobile) {
                return res.status(200).json(success(false, res.statusCode, "Mobile number is already registered.", null));
            }

            const _queryInRole = `INSERT INTO user_account(reg_id, first_name, middle_name, last_name, role_id, email_id, mobile_ccc, mobile_no, 
                user_status, added_by, added_date, change_owner_id, change_req_date) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "user_id"`;
            const _repInRole = [row[0].reg_id, _first_name, _middle_name, _last_name, _role_id, _email_id, _mobile_ccc, _mobile_no,
                0, req.token_data.account_id, new Date(), req.token_data.account_id, new Date()];
            const [rowInRole] = await db.sequelize.query(_queryInRole, { replacements: _repInRole, type: QueryTypes.INSERT, returning: true });
            const user_id = (rowInRole && rowInRole.length > 0 && rowInRole[0] ? rowInRole[0].user_id : 0);
            if (user_id > 0) {
                return res.status(200).json(success(true, res.statusCode, "Added successfully & sent for approval.", null));
            } else {
                return res.status(200).json(success(false, res.statusCode, "Unable to add record, Please try again.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_edit_data = async (req, res, next) => {
    const { user_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;

            const _query1 = `SELECT reg_id, first_name, middle_name, last_name, role_id, email_id, mobile_ccc, mobile_no, is_admin,
            user_status, change_request FROM user_account WHERE user_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                const _user_status = row1[0].user_status != null && validator.isNumeric(row1[0].user_status.toString()) ? parseInt(row1[0].user_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_user_status.toString() == '0' || _change_request) {
                    return res.status(200).json(success(false, res.statusCode, "Cannot edit, User approval status is pending.", null));
                }
                const _role_id = row1[0].role_id != null && validator.isNumeric(row1[0].role_id.toString()) ? BigInt(row1[0].role_id) : 0;
                const roles = await entityDataModule.uam_role_dropdown_list(row[0].reg_id);
                const mobile_ccc_list = await commonModule.country_calling_code();

                const results = {
                    first_name: row1[0].first_name,
                    middle_name: row1[0].middle_name,
                    last_name: row1[0].last_name,
                    role_id: _role_id,
                    roles: roles,
                    email_id: row1[0].email_id,
                    mobile_ccc: row1[0].mobile_ccc,
                    mobile_ccc_list: mobile_ccc_list,
                    mobile_no: row1[0].mobile_no,
                };
                return res.status(200).json(success(true, res.statusCode, "", results));
            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_update = async (req, res, next) => {
    const { user_id, first_name, middle_name, last_name, role_id, email_id, mobile_ccc, mobile_no, } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }

        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;
            const _query1 = `SELECT reg_id, is_admin, user_status, change_request FROM user_account WHERE user_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                const _user_status = row1[0].user_status != null && validator.isNumeric(row1[0].user_status.toString()) ? parseInt(row1[0].user_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;
                if (_user_status.toString() == '0' || _change_request) {
                    return res.status(200).json(success(false, res.statusCode, "Cannot edit, User approval status is pending.", null));
                }
                const _first_name = (first_name && first_name.length > 0) ? first_name.trim() : "";
                if (_first_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter first name.", null));
                }
                if (_first_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "First name should not be less than 2 characters.", null));
                }
                if (_first_name.length > 30) {
                    return res.status(200).json(success(false, res.statusCode, "First name should not be more than 30 characters.", null));
                }
                const _middle_name = (middle_name && middle_name.length > 0) ? middle_name.trim() : "";
                if (_middle_name.length > 30) {
                    return res.status(200).json(success(false, res.statusCode, "Middle name should not be more than 30 characters.", null));
                }
                const _last_name = (last_name && last_name.length > 0) ? last_name.trim() : "";
                if (_last_name.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter last name.", null));
                }
                if (_last_name.length < 2) {
                    return res.status(200).json(success(false, res.statusCode, "Last name should not be less than 2 characters.", null));
                }
                if (_last_name.length > 30) {
                    return res.status(200).json(success(false, res.statusCode, "Last name should not be more than 30 characters.", null));
                }
                const _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;
                if (_role_id <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select user role.", null));
                }
                var valid_role_id = false; const roles = await entityDataModule.uam_role_dropdown_list(row[0].reg_id);
                for (let i = 0; roles && i < roles.length; i++) {
                    if (roles[i].role_id.toString() == _role_id.toString()) {
                        valid_role_id = true; break;
                    }
                }
                if (!valid_role_id) {
                    return res.status(200).json(success(false, res.statusCode, "Invalid user role.", null));
                }
                const _email_id = (email_id && email_id.length > 0) ? email_id.trim() : "";
                if (_email_id.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter email id.", null));
                }
                if (!validator.isEmail(_email_id)) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter correct email id.", null));
                }
                const _mobile_ccc = (mobile_ccc && mobile_ccc.length > 0) ? mobile_ccc.trim() : "";
                if (_mobile_ccc.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please select mobile country code.", null));
                }
                var valid_mobile_ccc = false; const db_mobile_ccc = await commonModule.country_calling_code();
                for (let i = 0; db_mobile_ccc && i < db_mobile_ccc.length; i++) {
                    if (db_mobile_ccc[i].toString().toLowerCase() == _mobile_ccc.toString().toLowerCase()) {
                        valid_mobile_ccc = true; break;
                    }
                }
                if (!valid_mobile_ccc) {
                    return res.status(200).json(success(false, res.statusCode, "Invalid mobile country code.", null));
                }
                const _mobile_no = (mobile_no && mobile_no.length > 0) ? mobile_no.trim() : "";
                if (_mobile_no.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter mobile number.", null));
                }
                if (!utils.is_mobile_no(_mobile_no)) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter correct mobile number.", null));
                }

                const _chkUsrMail = await commonModule.check_account_email_registered(_user_id, _email_id);
                if (_chkUsrMail) {
                    return res.status(200).json(success(false, res.statusCode, "Email id is already registered.", null));
                }

                const _chkUsrMobile = await commonModule.check_account_mobile_registered(_user_id, _mobile_no);
                if (_chkUsrMobile) {
                    return res.status(200).json(success(false, res.statusCode, "Mobile number is already registered.", null));
                }

                const _queryInUpdate = `INSERT INTO user_acc_update(user_id, first_name, middle_name, last_name, role_id, email_id,
                    mobile_ccc, mobile_no, added_by, added_date)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING "request_id"`;
                const _repInUpdate = [_user_id, _first_name, _middle_name, _last_name, _role_id, _email_id, _mobile_ccc, _mobile_no, req.token_data.account_id, new Date()];
                const [rowInUpdate] = await db.sequelize.query(_queryInUpdate, { replacements: _repInUpdate, type: QueryTypes.INSERT, returning: true });
                const _request_id = (rowInUpdate && rowInUpdate.length > 0 && rowInUpdate[0] ? rowInUpdate[0].request_id : 0);
                if (_request_id > 0) {
                    return res.status(200).json(success(true, res.statusCode, "Updated successfully & sent for approval.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to add record, Please try again.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_delete = async (req, res, next) => {
    const { user_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;

            const _query1 = `SELECT user_id, reg_id, user_status, change_request, request_id, is_admin FROM user_account WHERE user_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                /*if (_remark.length <= 0) {
                    return res.status(200).json(success(false, res.statusCode, "Please enter reason to delete user.", null));
                }*/
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                if (row1[0].user_id.toString() == req.token_data.user_id.toString()) {
                    return res.status(200).json(success(false, res.statusCode, "You cannot delete your own account.", null));
                }

                const _query2 = `UPDATE user_account SET is_deleted = true, deleted_date = ?, deleted_by = ?, deleted_remark = ? WHERE user_id = ?`;
                const _replacements2 = [new Date(), req.token_data.account_id, _remark, _user_id];
                const [, i] = await db.sequelize.query(_query2, { replacements: _replacements2, type: QueryTypes.UPDATE });
                if (i > 0) {
                    return res.status(200).json(success(true, res.statusCode, "User deleted successfully.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to delete, please try again.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_toggle = async (req, res, next) => {
    const { user_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_CREATION, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;

            const _query1 = `SELECT user_id, reg_id, user_status, change_request, request_id, is_admin FROM user_account WHERE user_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                if (row1[0].user_id.toString() == req.token_data.user_id.toString()) {
                    return res.status(200).json(success(false, res.statusCode, "You cannot update your own account.", null));
                }

                const _query2 = `UPDATE user_account SET is_enabled = CASE WHEN is_enabled = true THEN false ELSE true END, modify_date = ?, modify_by = ? WHERE user_id = ?`;
                const _replacements2 = [new Date(), req.token_data.account_id, _user_id];
                const [, i] = await db.sequelize.query(_query2, { replacements: _replacements2, type: QueryTypes.UPDATE });
                if (i > 0) {
                    await entityDataModule.remove_all_sessions_by_user(_user_id);

                    return res.status(200).json(success(true, res.statusCode, "Status changed successfully.", null));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "Unable to change, please try again.", null));
                }

            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_pending = async (req, res, next) => {
    const { page_no, role_id, search_text } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {

            console.log(req.token_data);
            var _page_no = page_no != null && validator.isNumeric(page_no.toString()) ? parseInt(page_no) : 0; if (_page_no <= 0) { _page_no = 1; }
            var _role_id = role_id != null && validator.isNumeric(role_id.toString()) ? BigInt(role_id) : 0;
            var _search_text = search_text != null && search_text.length > 0 ? search_text : "";

            var _sql_condition = '';
            if (_role_id > 0) {
                _sql_condition += ' AND CASE WHEN a.change_request = true THEN COALESCE(u.role_id, a.role_id) ELSE a.role_id END = :role_id ';
            }
            if (_search_text.length > 0) {
                _sql_condition += ' AND ( ' +
                    ' LOWER(CASE WHEN a.change_request = true THEN COALESCE(u.email_id, a.email_id) ELSE a.email_id END) LIKE LOWER(:search_text) OR ' +
                    ' LOWER(CASE WHEN a.change_request = true THEN COALESCE(u.mobile_no, a.mobile_no) ELSE a.mobile_no END) LIKE LOWER(:search_text) OR ' +
                    ' LOWER(CASE WHEN a.change_request = true THEN COALESCE(u.first_name, a.first_name) ELSE a.first_name END) LIKE LOWER(:search_text) ' +
                    ') ';
            }

            const _query0 = `SELECT count(1) AS total_record 
            FROM user_account a LEFT JOIN LATERAL (
                SELECT u.first_name, u.middle_name, u.last_name, u.role_id, u.email_id, u.mobile_ccc, u.mobile_no
                FROM user_acc_update u WHERE u.request_id = a.request_id LIMIT 1
            ) u ON true
            WHERE a.reg_id = :reg_id AND a.is_deleted = false AND a.is_admin = false
            AND a.added_by <> :account_id ${_sql_condition}`;
            const row0 = await db.sequelize.query(_query0, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', role_id: _role_id, account_id: req.token_data.account_id
                }, type: QueryTypes.SELECT
            });

            var total_record = 0; if (row0 && row0.length > 0) { total_record = row0[0].total_record; }

            const _query1 = `SELECT ROW_NUMBER() OVER(ORDER BY a.change_req_date) AS sr_no,
            a.user_id, a.change_req_date, a.change_request, a.change_owner_id, a.user_status,
            CASE WHEN a.change_request = true THEN COALESCE(u.first_name, a.first_name) ELSE a.first_name END AS first_name,
            CASE WHEN a.change_request = true THEN COALESCE(u.middle_name, a.middle_name) ELSE a.middle_name END AS middle_name,
            CASE WHEN a.change_request = true THEN COALESCE(u.last_name, a.last_name) ELSE a.last_name END AS last_name,
            CASE WHEN a.change_request = true THEN COALESCE(u.email_id, a.email_id) ELSE a.email_id END AS email_id,
            CASE WHEN a.change_request = true THEN COALESCE(u.mobile_no, a.mobile_no) ELSE a.mobile_no END AS mobile_no,
            CASE WHEN a.change_request = true THEN COALESCE(u.role_name, r.role_name) ELSE r.role_name END AS role_name
            FROM user_account a LEFT OUTER JOIN role_master r ON a.role_id = r.role_id
            LEFT JOIN LATERAL (
                SELECT u.first_name, u.middle_name, u.last_name, u.role_id, u.email_id, u.mobile_ccc, u.mobile_no, ru.role_name
                FROM user_acc_update u LEFT OUTER JOIN role_master ru ON u.role_id = ru.role_id
                WHERE u.request_id = a.request_id LIMIT 1
            ) u ON true
            WHERE a.reg_id = :reg_id AND a.is_deleted = false AND a.is_admin = false
            AND a.added_by <> :account_id ${_sql_condition}
            LIMIT :page_size OFFSET ((:page_no - 1) * :page_size)`;
            const row1 = await db.sequelize.query(_query1, {
                replacements: {
                    reg_id: row[0].reg_id, search_text: '%' + _search_text + '%', role_id: _role_id, account_id: req.token_data.account_id,
                    page_size: parseInt(process.env.PAGINATION_SIZE), page_no: _page_no
                },
                type: QueryTypes.SELECT
            });
            var list = [];
            for (let i = 0; row1 && i < row1.length; i++) {
                var change_owner = false; if (row1[i].change_owner_id.toString() == req.token_data.account_id.toString()) { change_owner = true; }
                var full_name = [];
                if (row1[i].first_name && row1[i].first_name.length > 0) { full_name.push(row1[i].first_name); }
                if (row1[i].middle_name && row1[i].middle_name.length > 0) { full_name.push(row1[i].middle_name); }
                if (row1[i].last_name && row1[i].last_name.length > 0) { full_name.push(row1[i].last_name); }
                const _user_status = row1[i].user_status != null && validator.isNumeric(row1[i].user_status.toString()) ? parseInt(row1[i].user_status) : 0;
                const _change_request = row1[i].change_request && row1[i].change_request == true ? true : false;

                list.push({
                    sr_no: row1[i].sr_no,
                    user_id: row1[i].user_id,
                    change_req_date: row1[i].change_req_date ? dateFormat(process.env.DATE_FORMAT, utils.db_date_to_ist(row1[i].change_req_date)) : "",
                    change_request: row1[i].change_request,
                    change_owner: change_owner,
                    user_status: row1[i].user_status,
                    full_name: full_name.join(' '),
                    email_id: row1[i].email_id,
                    mobile_no: row1[i].mobile_no,
                    role_name: row1[i].role_name,
                    is_pending: (_user_status == 0 || _change_request ? true : false),
                });
            }
            const results = {
                current_page: _page_no,
                total_record: total_record,
                total_pages: Math.ceil(total_record / parseInt(process.env.PAGINATION_SIZE)),
                data: list,
            };
            return res.status(200).json(success(true, res.statusCode, "", results));
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_view = async (req, res, next) => {
    const { user_id } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;

            const _query1 = `SELECT a.reg_id, a.is_admin, a.user_status, a.change_request, a.request_id,
            a.first_name, a.middle_name, a.last_name, a.email_id, a.mobile_ccc, a.mobile_no, r.role_name
            FROM user_account a LEFT OUTER JOIN role_master r ON a.role_id = r.role_id WHERE a.user_id = ? AND a.is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                const _user_status = row1[0].user_status != null && validator.isNumeric(row1[0].user_status.toString()) ? parseInt(row1[0].user_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;

                if (_user_status.toString() == '0' || _change_request) {
                    var old_data = null; var new_data = null;
                    if (_user_status.toString() == '0') {
                        new_data = {
                            first_name: row1[0].first_name,
                            middle_name: row1[0].middle_name,
                            last_name: row1[0].last_name,
                            email_id: row1[0].email_id,
                            mobile_ccc: row1[0].mobile_ccc,
                            mobile_no: row1[0].mobile_no,
                            role_name: row1[0].role_name,
                        };
                    } else {
                        const _queryReq = `SELECT u.first_name, u.middle_name, u.last_name, u.email_id, u.mobile_ccc, u.mobile_no, r.role_name
                        FROM user_acc_update u LEFT OUTER JOIN role_master r ON u.role_id = r.role_id WHERE u.request_id = ?`
                        const rowReq = await db.sequelize.query(_queryReq, { replacements: [row1[0].request_id], type: QueryTypes.SELECT });
                        if (rowReq && rowReq.length > 0) {
                            old_data = {
                                first_name: row1[0].first_name,
                                middle_name: row1[0].middle_name,
                                last_name: row1[0].last_name,
                                email_id: row1[0].email_id,
                                mobile_ccc: row1[0].mobile_ccc,
                                mobile_no: row1[0].mobile_no,
                                role_name: row1[0].role_name,
                            };
                            new_data = {
                                first_name: rowReq[0].first_name,
                                middle_name: rowReq[0].middle_name,
                                last_name: rowReq[0].last_name,
                                email_id: rowReq[0].email_id,
                                mobile_ccc: rowReq[0].mobile_ccc,
                                mobile_no: rowReq[0].mobile_no,
                                role_name: rowReq[0].role_name,
                            };
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "User update details request not found.", null));
                        }
                    }
                    const results = {
                        old_data: old_data,
                        new_data: new_data,
                    };
                    return res.status(200).json(success(true, res.statusCode, "", results));
                } else {
                    return res.status(200).json(success(false, res.statusCode, "User request is not in pending state.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_approve = async (req, res, next) => {
    const { user_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;

            const _query1 = `SELECT reg_id, is_admin, user_status, change_request, request_id, email_id, mobile_no FROM user_account WHERE user_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                const _user_status = row1[0].user_status != null && validator.isNumeric(row1[0].user_status.toString()) ? parseInt(row1[0].user_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;

                if (_user_status.toString() == '0' || _change_request) {
                    const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                    const currDate = new Date();
                    if (_user_status.toString() == '0') {
                        const _queryUpRole = `UPDATE user_account SET user_status = 1, change_request = false, approved_by = ?, approved_date = ?, approve_remark = ?, is_approved = true WHERE user_id = ?`;
                        const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, _user_id], type: QueryTypes.UPDATE });
                        if (i > 0) {

                            const _queryRoleStat = `INSERT INTO user_acc_status_log(user_id, user_status, status_by, status_date, status_remark)VALUES(?, ?, ?, ?, ?)`;
                            const _repRoleStat = [_user_id, 1, req.token_data.account_id, currDate, _remark];
                            await db.sequelize.query(_queryRoleStat, { replacements: _repRoleStat, type: QueryTypes.INSERT });

                            setTimeout(async () => {
                                await commonModule.send_entity_user_activation(_user_id);
                            }, 0);

                            return res.status(200).json(success(true, res.statusCode, "Approved successfully.", null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                        }
                    } else {
                        const _querySelPerm = `SELECT role_id, email_id, mobile_no FROM user_acc_update WHERE request_id = ?`;
                        const rowSelPerm = await db.sequelize.query(_querySelPerm, { replacements: [row1[0].request_id], type: QueryTypes.SELECT });
                        if (rowSelPerm && rowSelPerm.length > 0) {
                            const sameEmailID = (rowSelPerm[0].email_id.trim().toLowerCase() == row1[0].email_id.trim().toLowerCase() ? true : false);
                            const sameMobileNo = (rowSelPerm[0].mobile_no.trim().toLowerCase() == row1[0].mobile_no.trim().toLowerCase() ? true : false);
                            const changeCred = (sameEmailID && sameMobileNo ? false : true);

                            const _role_id = rowSelPerm[0].role_id != null && validator.isNumeric(rowSelPerm[0].role_id.toString()) ? BigInt(rowSelPerm[0].role_id) : 0;
                            var valid_role_id = false; const roles = await entityDataModule.uam_role_dropdown_list(row[0].reg_id);
                            for (let i = 0; roles && i < roles.length; i++) {
                                if (roles[i].role_id.toString() == _role_id.toString()) {
                                    valid_role_id = true; break;
                                }
                            }
                            if (!valid_role_id) {
                                return res.status(200).json(success(false, res.statusCode, "Invalid user role.", null));
                            }

                            const _chkUsrMail = await commonModule.check_account_email_registered(_user_id, rowSelPerm[0].email_id);
                            if (_chkUsrMail) {
                                return res.status(200).json(success(false, res.statusCode, "Email id is already registered.", null));
                            }
                            const _chkUsrMobile = await commonModule.check_account_mobile_registered(_user_id, rowSelPerm[0].mobile_no);
                            if (_chkUsrMobile) {
                                return res.status(200).json(success(false, res.statusCode, "Mobile number is already registered.", null));
                            }

                            const _queryUpRole = `UPDATE user_acc_update SET request_status = 1, status_by = ?, status_date = ?, status_remark = ? WHERE request_id = ?`;
                            const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, row1[0].request_id], type: QueryTypes.UPDATE });
                            if (i > 0) {
                                if (changeCred) {
                                    const _queryCred = `UPDATE user_account SET is_activated = false, re_activation_required = true WHERE user_id = ? `;
                                    await db.sequelize.query(_queryCred, { replacements: [_user_id], type: QueryTypes.UPDATE });

                                    await entityDataModule.remove_all_sessions_by_user(_user_id);

                                    setTimeout(async () => {
                                        await commonModule.send_entity_user_activation(_user_id);
                                    }, 0);

                                }
                                return res.status(200).json(success(true, res.statusCode, "Approved successfully.", null));
                            } else {
                                return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                            }
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Update detail not found, Please try again.", null));
                        }
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, "User request is not in pending state.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

const uam_user_reject = async (req, res, next) => {
    const { user_id, remark } = req.body;
    try {
        if (!utils.has_entity_permission(entityMenuItems.UM_USER_APPROVAL, req.token_data.permissions)) {
            return res.status(200).json(success(false, apiStatus.NO_PERMISSION, apiEntityMsgs.NO_PERMISSION, null));
        }
        const _query = `SELECT a.reg_id, u.entity_id, a.is_admin FROM user_account a INNER JOIN user_master u ON a.reg_id = u.reg_id WHERE a.user_id = ?`;
        const row = await db.sequelize.query(_query, { replacements: [req.token_data.user_id], type: QueryTypes.SELECT });
        if (row && row.length > 0) {
            const _user_id = user_id != null && validator.isNumeric(user_id.toString()) ? BigInt(user_id) : 0;

            const _query1 = `SELECT reg_id, is_admin, user_status, change_request, request_id FROM user_account WHERE user_id = ? AND is_deleted = false`;
            const row1 = await db.sequelize.query(_query1, { replacements: [_user_id], type: QueryTypes.SELECT });
            if (row1 && row1.length > 0 && row1[0].reg_id.toString() == row[0].reg_id.toString()) {
                const _is_admin = row1[0].is_admin && row1[0].is_admin == true ? true : false;
                if (_is_admin) {
                    return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
                }
                const _user_status = row1[0].user_status != null && validator.isNumeric(row1[0].user_status.toString()) ? parseInt(row1[0].user_status) : 0;
                const _change_request = row1[0].change_request && row1[0].change_request == true ? true : false;

                if (_user_status.toString() == '0' || _change_request) {
                    const _remark = (remark != null && remark.length > 0) ? remark.trim() : "";
                    if (_remark.length <= 0) {
                        return res.status(200).json(success(false, res.statusCode, "Please enter reason to reject user.", null));
                    }
                    const currDate = new Date();
                    if (_user_status.toString() == '0') {
                        const _queryUpRole = `UPDATE user_account SET user_status = 2, change_request = false, rejected_by = ?, rejected_date = ?, reject_remark = ? WHERE user_id = ?`;
                        const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, _user_id], type: QueryTypes.UPDATE });
                        if (i > 0) {
                            const _queryRoleStat = `INSERT INTO user_acc_status_log(user_id, user_status, status_by, status_date, status_remark)VALUES(?, ?, ?, ?, ?)`;
                            const _repRoleStat = [_user_id, 2, req.token_data.account_id, currDate, _remark];
                            await db.sequelize.query(_queryRoleStat, { replacements: _repRoleStat, type: QueryTypes.INSERT });

                            return res.status(200).json(success(true, res.statusCode, "Rejected successfully.", null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                        }
                    } else {
                        const _queryUpRole = `UPDATE user_acc_update SET request_status = 2, status_by = ?, status_date = ?, status_remark = ? WHERE request_id = ?`;
                        const [, i] = await db.sequelize.query(_queryUpRole, { replacements: [req.token_data.account_id, currDate, _remark, row1[0].request_id], type: QueryTypes.UPDATE });
                        if (i > 0) {
                            return res.status(200).json(success(true, res.statusCode, "Rejected successfully.", null));
                        } else {
                            return res.status(200).json(success(false, res.statusCode, "Unable to update, Please try again", null));
                        }
                    }
                } else {
                    return res.status(200).json(success(false, res.statusCode, "User request is not in pending state.", null));
                }
            } else {
                return res.status(200).json(success(false, res.statusCode, "User details not found.", null));
            }
        } else {
            return res.status(200).json(success(false, res.statusCode, apiEntityMsgs.ACCOUNT_NOT_FOUND, null));
        }
    } catch (err) {
        _logger.error(err.stack);
        return res.status(200).json(success(false, res.statusCode, err.message, null));
    }
};

/***********************************************************/

module.exports = {
    countries,
    states,
    districts,
    blocks,
    ifsc_code_search,
    check_ifsc_code,

    logout,
    dashboard,
    password,
    profile_data,
    search_parent_entity,
    validate_initiator,
    validate_company,
    validate_enrolment,
    validate_admin,
    validate_board_member,
    validate_csr_committee,
    profile_update,
    profile_request_cancel,
    enrolment_document_get_url,
    admin_account_doc_get_url,
    csr_policy_doc_get_url,

    search_corporate,
    search_foundation,
    search_philanthropist,
    search_implementing_agency,
    search_accreditation_agency,
    search_vendor,
    search_consultant,
    view_profile,

    project_create_form_data,
    project_create_search_ia,
    project_create_save_details,
    project_create_save_milestones,
    project_create_save_questionnaire,
    project_create_save_rfp_details,
    project_float_for_discovery,
    //project_create_submit,
    project_created_list,
    project_created_delete,
    project_ia_selection_floated_list,
    project_ia_selection_appl_list,
    project_ia_selection_appl_view,
    project_ia_selection_appl_reject,
    project_ia_selection_appl_award,
    project_crowd_funding_view_list,
    project_crowd_funding_view_details,
    project_fund_transfer_agency_list,
    project_fund_transfer_agency_projects,
    project_fund_transfer_int_milestone_list,
    project_fund_transfer_int_milestone_payments,
    project_fund_transfer_int_milestone_pay_get,
    project_fund_transfer_int_milestone_pay_chk,
    project_fund_transfer_ext_payments,
    project_fund_transfer_ext_pay_get,
    project_fund_transfer_ext_pay_chk,
    project_proposal_doc_get_url,

    monitoring_looking_ia_project_list,
    monitoring_looking_ia_project_view,
    monitoring_looking_ia_milestone_list,
    monitoring_looking_ia_milestone_view,
    monitoring_looking_ia_milestone_save,
    monitoring_looking_ia_milestone_send,
    monitoring_looking_ia_milestone_doc_get_url,
    monitoring_looking_ia_milestone_reject,
    monitoring_looking_ia_milestone_accept,
    monitoring_crowd_fund_project_list,
    monitoring_crowd_fund_project_view,
    monitoring_crowd_fund_milestone_list,
    monitoring_crowd_fund_milestone_view,
    monitoring_crowd_fund_milestone_save,
    monitoring_crowd_fund_milestone_send,
    monitoring_crowd_fund_milestone_doc_get_url,


    project_discovery_thematic_areas,
    project_discovery_search,
    project_discovery_detail,
    project_rfp_document_get_url,
    project_discovery_apply_check,
    project_discovery_apply_submit,
    project_discovery_apply_list,
    project_discovery_apply_view,
    project_discovery_apply_reject,
    project_discovery_apply_accept,
    project_discovery_donate_payments,
    project_discovery_donate_pay_get,
    project_discovery_donate_pay_chk,
    project_discovery_donate_history,
    discovery_monitoring_project_list,
    discovery_monitoring_project_view,
    discovery_monitoring_milestone_list,
    discovery_monitoring_milestone_view,
    discovery_monitoring_milestone_doc_get_url,

    accreditation_initiate_search,
    accreditation_req_initiate,
    accreditation_req_submit,
    accreditation_request_list,
    accreditation_request_search,
    accreditation_request_detail,
    accreditation_req_doc_get_url,
    accreditation_request_approve,
    accreditation_request_reject,

    uam_role_created,
    uam_role_form_data,
    uam_role_create_new,
    uam_role_edit_data,
    uam_role_update,
    uam_role_delete,
    uam_role_toggle,
    uam_role_pending,
    uam_role_view,
    uam_role_approve,
    uam_role_reject,
    uam_role_dropdown,
    uam_user_created,
    uam_user_form_data,
    uam_user_create_new,
    uam_user_edit_data,
    uam_user_update,
    uam_user_delete,
    uam_user_toggle,
    uam_user_pending,
    uam_user_view,
    uam_user_approve,
    uam_user_reject,
};